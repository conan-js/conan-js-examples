import { InjectableType } from './diAnnotationsDomain';
import { MetadataCrudUtils } from "../../../conan-utils/anotationsCrudUtils";
export let diAnnotationsCrud = new MetadataCrudUtils('$di', () => ({
    diAnnotations: []
}));
export function InjectByType(constructor, propsProvider) {
    return (classConstructor, keyOfParam_alwaysIgnore, index) => {
        diAnnotationsCrud.updateMetadata(classConstructor, (current) => current.diAnnotations.push({
            onConstructorParamIndex: index,
            injectable: constructor,
            type: InjectableType.TYPE,
            cascadeProperties: propsProvider
        }));
    };
}
export function InjectDynamic(constructorProvider, propsProvider) {
    return (classConstructor, keyOfParam_alwaysIgnore, index) => {
        diAnnotationsCrud.updateMetadata(classConstructor, (current) => current.diAnnotations.push({
            onConstructorParamIndex: index,
            injectable: constructorProvider,
            type: InjectableType.DYNAMIC,
            cascadeProperties: propsProvider
        }));
    };
}
export function InjectByName(name, propsProvider) {
    console.log('Inject by name', name);
    return (classConstructor, keyOfParam_alwaysIgnore, index) => {
        diAnnotationsCrud.updateMetadata(classConstructor, (current) => current.diAnnotations.push({
            onConstructorParamIndex: index,
            injectable: name,
            type: InjectableType.NAME,
            cascadeProperties: propsProvider
        }));
    };
}
//# sourceMappingURL=diAnnotations.js.map