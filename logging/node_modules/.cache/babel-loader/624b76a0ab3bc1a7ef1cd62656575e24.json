{"ast":null,"code":"var _jsxFileName = \"/Users/albertoalmansa/Projects/conan-js/tmp/conan-js-examples/logging/src/app.tsx\";\nimport * as React from \"react\";\nimport { Conan } from \"conan-js-core\";\nimport { getLoggingFilter, LoggerFilters, setLoggingFilter, updateLoggingFilter } from \"conan-js-core\";\nimport { FlowEventType } from \"conan-js-core\";\nexport function LoggingApp() {\n  let numberState1$ = Conan.light('number1', 0);\n  let numberState2$ = Conan.light('number2', 0);\n  let loggingFilterName$ = Conan.light('filter name', getLoggingFilter().name);\n\n  const setNewLogging = logger => {\n    loggingFilterName$.do.update(logger.name);\n    setLoggingFilter(logger);\n  };\n\n  const updateLogging = logger => {\n    let flowEventRule = updateLoggingFilter(logger);\n    loggingFilterName$.do.update(flowEventRule.name);\n  };\n\n  const printButtons = (operator, actions) => /*#__PURE__*/React.createElement(React.Fragment, null, actions.map((action, i) => /*#__PURE__*/React.createElement(\"button\", {\n    key: i,\n    onClick: () => updateLogging(current => current[operator](action[1])),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, operator.toUpperCase(), \" \", action[0])));\n\n  const printButtonsSection = toPrint => /*#__PURE__*/React.createElement(\"div\", {\n    key: toPrint[0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, toPrint[0]), ['or', 'and'].map(condition => /*#__PURE__*/React.createElement(\"div\", {\n    key: condition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, condition.toUpperCase()), printButtons(condition, toPrint[1]))));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"Specifying what to log globally\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Currently logging:\"), loggingFilterName$.connectLive(data => /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, data)), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, \"Choose something to log:\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"Absolutely\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setNewLogging(LoggerFilters.never()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"never\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setNewLogging(LoggerFilters.default()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"default\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setNewLogging(LoggerFilters.allExceptTraces()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"all except traces\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setNewLogging(LoggerFilters.all()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"all\"), [['Based on the status', [['initialising', LoggerFilters.initialising()], ['nextData', LoggerFilters.nextData()]]], ['Based on the nature', [['main', LoggerFilters.main()], ['aux', LoggerFilters.aux()], ['helper', LoggerFilters.helper()], ['async', LoggerFilters.async()]]], ['Based on the logging level', [['milestone', LoggerFilters.milestone()], ['info', LoggerFilters.info()], ['debug', LoggerFilters.debug()], ['trace', LoggerFilters.trace()]]], ['Based on the conan state name', [['number1', LoggerFilters.mainLogName('number1')], ['number2', LoggerFilters.mainLogName('number2')]]], ['Based on the event type (not all listed here)', [['PROCESSING_REACTIONS', LoggerFilters.eventType(FlowEventType.PROCESSING_REACTIONS)], ['ADDING_REACTION', LoggerFilters.eventType(FlowEventType.ADDING_REACTION)], ['USER_CODE', LoggerFilters.eventType(FlowEventType.USER_CODE)], ['USER_REACTIONS', LoggerFilters.eventType(FlowEventType.USER_REACTIONS)]]]].map(printButtonsSection), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Open your console, clean it, and check here to see the logging:\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => numberState1$.do.update(value => ++value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"increase number1\"), numberState1$.connectLive(data => /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Number 1: \", data)), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => numberState2$.do.update(value => ++value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"increase number2\"), numberState2$.connectLive(data => /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Number 2: \", data)));\n}","map":{"version":3,"sources":["/Users/albertoalmansa/Projects/conan-js/tmp/conan-js-examples/logging/src/app.tsx"],"names":["React","Conan","getLoggingFilter","LoggerFilters","setLoggingFilter","updateLoggingFilter","FlowEventType","LoggingApp","numberState1$","light","numberState2$","loggingFilterName$","name","setNewLogging","logger","do","update","updateLogging","flowEventRule","printButtons","operator","actions","map","action","i","current","toUpperCase","printButtonsSection","toPrint","condition","connectLive","data","never","default","allExceptTraces","all","initialising","nextData","main","aux","helper","async","milestone","info","debug","trace","mainLogName","eventType","PROCESSING_REACTIONS","ADDING_REACTION","USER_CODE","USER_REACTIONS","value"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {Conan, IReducer} from \"conan-js-core\";\nimport {\n    getLoggingFilter,\n    LoggerFilters,\n    setLoggingFilter,\n    updateLoggingFilter\n} from \"conan-js-core\";\nimport {Rule} from \"conan-js-core\";\nimport {FlowEvent, FlowEventType} from \"conan-js-core\";\n\n\nexport function LoggingApp(): React.ReactElement {\n\n    let numberState1$ = Conan.light('number1', 0);\n    let numberState2$ = Conan.light('number2', 0);\n    let loggingFilterName$ = Conan.light('filter name', getLoggingFilter().name);\n\n\n    const setNewLogging= (logger: Rule<FlowEvent>)=> {\n        loggingFilterName$.do.update(logger.name);\n        setLoggingFilter(logger);\n    }\n\n    const updateLogging= (logger: IReducer<Rule<FlowEvent>>)=> {\n        let flowEventRule = updateLoggingFilter(logger);\n        loggingFilterName$.do.update(flowEventRule.name);\n    }\n\n    const printButtons= (operator, actions): React.ReactElement => (\n        <>{actions.map((action, i)=>\n            <button key={i} onClick={()=>updateLogging(current => current[operator](action[1]))}>{operator.toUpperCase()} {action[0]}</button>\n        )}</>\n    )\n\n    const printButtonsSection= (toPrint): React.ReactElement => (\n        <div key={toPrint[0]}>\n            <h3>{toPrint[0]}</h3>\n            {['or', 'and'].map (condition=>(\n                <div key={condition}>\n                    <b>{condition.toUpperCase()}</b>\n                    {printButtons (condition, toPrint[1])}\n                </div>\n            ))}\n        </div>\n    )\n\n    return (<div>\n        <h1>Specifying what to log globally</h1>\n        <h2>Currently logging:</h2>\n        {loggingFilterName$.connectLive(data=>(\n            <span>{data}</span>\n        ))}\n\n        <h2>Choose something to log:</h2>\n        <h3>Absolutely</h3>\n        <button onClick={()=>setNewLogging(LoggerFilters.never())}>never</button>\n        <button onClick={()=>setNewLogging(LoggerFilters.default())}>default</button>\n        <button onClick={()=>setNewLogging(LoggerFilters.allExceptTraces())}>all except traces</button>\n        <button onClick={()=>setNewLogging(LoggerFilters.all())}>all</button>\n\n        {[\n            ['Based on the status', [\n                ['initialising', LoggerFilters.initialising()],\n                ['nextData', LoggerFilters.nextData()]\n            ]],\n            ['Based on the nature', [\n                ['main', LoggerFilters.main()],\n                ['aux', LoggerFilters.aux()],\n                ['helper', LoggerFilters.helper()],\n                ['async', LoggerFilters.async()],\n            ]],\n            ['Based on the logging level', [\n                ['milestone', LoggerFilters.milestone()],\n                ['info', LoggerFilters.info()],\n                ['debug', LoggerFilters.debug()],\n                ['trace', LoggerFilters.trace()],\n            ]],\n            ['Based on the conan state name', [\n                ['number1', LoggerFilters.mainLogName('number1')],\n                ['number2', LoggerFilters.mainLogName('number2')],\n            ]],\n            ['Based on the event type (not all listed here)', [\n                ['PROCESSING_REACTIONS', LoggerFilters.eventType(FlowEventType.PROCESSING_REACTIONS)],\n                ['ADDING_REACTION', LoggerFilters.eventType(FlowEventType.ADDING_REACTION)],\n                ['USER_CODE', LoggerFilters.eventType(FlowEventType.USER_CODE)],\n                ['USER_REACTIONS', LoggerFilters.eventType(FlowEventType.USER_REACTIONS)],\n            ]],\n        ].map(printButtonsSection)}\n\n\n        <h2>Open your console, clean it, and check here to see the logging:</h2>\n\n        <button onClick={()=>numberState1$.do.update(value=>++value)}>increase number1</button>\n        {numberState1$.connectLive(data=>(\n            <h1>Number 1: {data}</h1>\n        ))}\n\n        <button onClick={()=>numberState2$.do.update(value=>++value)}>increase number2</button>\n        {numberState2$.connectLive(data=>(\n            <h1>Number 2: {data}</h1>\n        ))}\n    </div>)\n}\n"]},"metadata":{},"sourceType":"module"}