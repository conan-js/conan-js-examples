{"ast":null,"code":"import*as React from\"react\";import{Conan}from\"conan-js-core\";import{getLoggingFilter,LoggerFilters,setLoggingFilter,updateLoggingFilter}from\"conan-js-core\";import{FlowEventType}from\"conan-js-core\";export function LoggingApp(){var numberState1$=Conan.light('number1',0);var numberState2$=Conan.light('number2',0);var loggingFilterName$=Conan.light('filter name',getLoggingFilter().name);var setNewLogging=function setNewLogging(logger){loggingFilterName$.do.update(logger.name);setLoggingFilter(logger);};var updateLogging=function updateLogging(logger){var flowEventRule=updateLoggingFilter(logger);loggingFilterName$.do.update(flowEventRule.name);};var printButtons=function printButtons(operator,actions){return/*#__PURE__*/React.createElement(React.Fragment,null,actions.map(function(action,i){return/*#__PURE__*/React.createElement(\"button\",{key:i,onClick:function onClick(){return updateLogging(function(current){return current[operator](action[1]);});}},operator.toUpperCase(),\" \",action[0]);}));};var printButtonsSection=function printButtonsSection(toPrint){return/*#__PURE__*/React.createElement(\"div\",{key:toPrint[0]},/*#__PURE__*/React.createElement(\"h3\",null,toPrint[0]),['or','and'].map(function(condition){return/*#__PURE__*/React.createElement(\"div\",{key:condition},/*#__PURE__*/React.createElement(\"b\",null,condition.toUpperCase()),printButtons(condition,toPrint[1]));}));};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"Specifying what to log globally\"),/*#__PURE__*/React.createElement(\"h2\",null,\"Currently logging:\"),loggingFilterName$.connectLive(function(data){return/*#__PURE__*/React.createElement(\"span\",null,data);}),/*#__PURE__*/React.createElement(\"h2\",null,\"Choose something to log:\"),/*#__PURE__*/React.createElement(\"h3\",null,\"Absolutely\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return setNewLogging(LoggerFilters.never());}},\"never\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return setNewLogging(LoggerFilters.default());}},\"default\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return setNewLogging(LoggerFilters.allExceptTraces());}},\"all except traces\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return setNewLogging(LoggerFilters.all());}},\"all\"),[['Based on the status',[['initialising',LoggerFilters.initialising()],['nextData',LoggerFilters.nextData()]]],['Based on the nature',[['main',LoggerFilters.main()],['aux',LoggerFilters.aux()],['helper',LoggerFilters.helper()],['async',LoggerFilters.async()]]],['Based on the logging level',[['milestone',LoggerFilters.milestone()],['info',LoggerFilters.info()],['debug',LoggerFilters.debug()],['trace',LoggerFilters.trace()]]],['Based on the conan state name',[['number1',LoggerFilters.mainLogName('number1')],['number2',LoggerFilters.mainLogName('number2')]]],['Based on the event type (not all listed here)',[['PROCESSING_REACTIONS',LoggerFilters.eventType(FlowEventType.PROCESSING_REACTIONS)],['ADDING_REACTION',LoggerFilters.eventType(FlowEventType.ADDING_REACTION)],['USER_CODE',LoggerFilters.eventType(FlowEventType.USER_CODE)],['USER_REACTIONS',LoggerFilters.eventType(FlowEventType.USER_REACTIONS)]]]].map(printButtonsSection),/*#__PURE__*/React.createElement(\"h2\",null,\"Open your console, clean it, and check here to see the logging:\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return numberState1$.do.update(function(value){return++value;});}},\"increase number1\"),numberState1$.connectLive(function(data){return/*#__PURE__*/React.createElement(\"h1\",null,\"Number 1: \",data);}),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return numberState2$.do.update(function(value){return++value;});}},\"increase number2\"),numberState2$.connectLive(function(data){return/*#__PURE__*/React.createElement(\"h1\",null,\"Number 2: \",data);}));}","map":{"version":3,"sources":["/Users/albertoalmansa/Projects/conan-js/tmp/conan-js-examples/logging/src/app.tsx"],"names":["React","Conan","getLoggingFilter","LoggerFilters","setLoggingFilter","updateLoggingFilter","FlowEventType","LoggingApp","numberState1$","light","numberState2$","loggingFilterName$","name","setNewLogging","logger","do","update","updateLogging","flowEventRule","printButtons","operator","actions","map","action","i","current","toUpperCase","printButtonsSection","toPrint","condition","connectLive","data","never","default","allExceptTraces","all","initialising","nextData","main","aux","helper","async","milestone","info","debug","trace","mainLogName","eventType","PROCESSING_REACTIONS","ADDING_REACTION","USER_CODE","USER_REACTIONS","value"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {Conan, IReducer} from \"conan-js-core\";\nimport {\n    getLoggingFilter,\n    LoggerFilters,\n    setLoggingFilter,\n    updateLoggingFilter\n} from \"conan-js-core\";\nimport {Rule} from \"conan-js-core\";\nimport {FlowEvent, FlowEventType} from \"conan-js-core\";\n\n\nexport function LoggingApp(): React.ReactElement {\n\n    let numberState1$ = Conan.light('number1', 0);\n    let numberState2$ = Conan.light('number2', 0);\n    let loggingFilterName$ = Conan.light('filter name', getLoggingFilter().name);\n\n\n    const setNewLogging= (logger: Rule<FlowEvent>)=> {\n        loggingFilterName$.do.update(logger.name);\n        setLoggingFilter(logger);\n    }\n\n    const updateLogging= (logger: IReducer<Rule<FlowEvent>>)=> {\n        let flowEventRule = updateLoggingFilter(logger);\n        loggingFilterName$.do.update(flowEventRule.name);\n    }\n\n    const printButtons= (operator, actions): React.ReactElement => (\n        <>{actions.map((action, i)=>\n            <button key={i} onClick={()=>updateLogging(current => current[operator](action[1]))}>{operator.toUpperCase()} {action[0]}</button>\n        )}</>\n    )\n\n    const printButtonsSection= (toPrint): React.ReactElement => (\n        <div key={toPrint[0]}>\n            <h3>{toPrint[0]}</h3>\n            {['or', 'and'].map (condition=>(\n                <div key={condition}>\n                    <b>{condition.toUpperCase()}</b>\n                    {printButtons (condition, toPrint[1])}\n                </div>\n            ))}\n        </div>\n    )\n\n    return (<div>\n        <h1>Specifying what to log globally</h1>\n        <h2>Currently logging:</h2>\n        {loggingFilterName$.connectLive(data=>(\n            <span>{data}</span>\n        ))}\n\n        <h2>Choose something to log:</h2>\n        <h3>Absolutely</h3>\n        <button onClick={()=>setNewLogging(LoggerFilters.never())}>never</button>\n        <button onClick={()=>setNewLogging(LoggerFilters.default())}>default</button>\n        <button onClick={()=>setNewLogging(LoggerFilters.allExceptTraces())}>all except traces</button>\n        <button onClick={()=>setNewLogging(LoggerFilters.all())}>all</button>\n\n        {[\n            ['Based on the status', [\n                ['initialising', LoggerFilters.initialising()],\n                ['nextData', LoggerFilters.nextData()]\n            ]],\n            ['Based on the nature', [\n                ['main', LoggerFilters.main()],\n                ['aux', LoggerFilters.aux()],\n                ['helper', LoggerFilters.helper()],\n                ['async', LoggerFilters.async()],\n            ]],\n            ['Based on the logging level', [\n                ['milestone', LoggerFilters.milestone()],\n                ['info', LoggerFilters.info()],\n                ['debug', LoggerFilters.debug()],\n                ['trace', LoggerFilters.trace()],\n            ]],\n            ['Based on the conan state name', [\n                ['number1', LoggerFilters.mainLogName('number1')],\n                ['number2', LoggerFilters.mainLogName('number2')],\n            ]],\n            ['Based on the event type (not all listed here)', [\n                ['PROCESSING_REACTIONS', LoggerFilters.eventType(FlowEventType.PROCESSING_REACTIONS)],\n                ['ADDING_REACTION', LoggerFilters.eventType(FlowEventType.ADDING_REACTION)],\n                ['USER_CODE', LoggerFilters.eventType(FlowEventType.USER_CODE)],\n                ['USER_REACTIONS', LoggerFilters.eventType(FlowEventType.USER_REACTIONS)],\n            ]],\n        ].map(printButtonsSection)}\n\n\n        <h2>Open your console, clean it, and check here to see the logging:</h2>\n\n        <button onClick={()=>numberState1$.do.update(value=>++value)}>increase number1</button>\n        {numberState1$.connectLive(data=>(\n            <h1>Number 1: {data}</h1>\n        ))}\n\n        <button onClick={()=>numberState2$.do.update(value=>++value)}>increase number2</button>\n        {numberState2$.connectLive(data=>(\n            <h1>Number 2: {data}</h1>\n        ))}\n    </div>)\n}\n"]},"metadata":{},"sourceType":"module"}