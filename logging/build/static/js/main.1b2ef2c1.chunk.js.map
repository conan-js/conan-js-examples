{"version":3,"sources":["app.tsx","index.tsx"],"names":["LoggingApp","numberState1$","Conan","light","numberState2$","loggingFilterName$","getLoggingFilter","name","setNewLogging","logger","do","update","setLoggingFilter","printButtons","operator","actions","map","action","i","key","onClick","flowEventRule","updateLoggingFilter","updateLogging","current","toUpperCase","connectLive","data","LoggerFilters","never","default","allExceptTraces","all","initialising","nextData","main","aux","helper","async","milestone","info","debug","trace","mainLogName","eventType","FlowEventType","PROCESSING_REACTIONS","ADDING_REACTION","USER_CODE","USER_REACTIONS","toPrint","condition","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KAYO,SAASA,IAEZ,IAAIC,EAAgBC,QAAMC,MAAM,UAAW,GACvCC,EAAgBF,QAAMC,MAAM,UAAW,GACvCE,EAAqBH,QAAMC,MAAM,cAAeG,6BAAmBC,MAGjEC,EAAe,SAACC,GAClBJ,EAAmBK,GAAGC,OAAOF,EAAOF,MACpCK,2BAAiBH,IAQfI,EAAc,SAACC,EAAUC,GAAX,OAChB,gCAAGA,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACX,0BAAQC,IAAKD,EAAGE,QAAS,kBAPZ,SAACX,GAClB,IAAIY,EAAgBC,8BAAoBb,GACxCJ,EAAmBK,GAAGC,OAAOU,EAAcd,MAKVgB,EAAc,SAAAC,GAAO,OAAIA,EAAQV,GAAUG,EAAO,SAAOH,EAASW,cAA/F,IAA+GR,EAAO,SAgB9H,OAAQ,2BACJ,6DACA,gDACCZ,EAAmBqB,aAAY,SAAAC,GAAI,OAChC,4BAAOA,MAGX,sDACA,wCACA,0BAAQP,QAAS,kBAAIZ,EAAcoB,gBAAcC,WAAjD,SACA,0BAAQT,QAAS,kBAAIZ,EAAcoB,gBAAcE,aAAjD,WACA,0BAAQV,QAAS,kBAAIZ,EAAcoB,gBAAcG,qBAAjD,qBACA,0BAAQX,QAAS,kBAAIZ,EAAcoB,gBAAcI,SAAjD,OAEC,CACG,CAAC,sBAAuB,CACpB,CAAC,eAAgBJ,gBAAcK,gBAC/B,CAAC,WAAYL,gBAAcM,cAE/B,CAAC,sBAAuB,CACpB,CAAC,OAAQN,gBAAcO,QACvB,CAAC,MAAOP,gBAAcQ,OACtB,CAAC,SAAUR,gBAAcS,UACzB,CAAC,QAAST,gBAAcU,WAE5B,CAAC,6BAA8B,CAC3B,CAAC,YAAaV,gBAAcW,aAC5B,CAAC,OAAQX,gBAAcY,QACvB,CAAC,QAASZ,gBAAca,SACxB,CAAC,QAASb,gBAAcc,WAE5B,CAAC,gCAAiC,CAC9B,CAAC,UAAWd,gBAAce,YAAY,YACtC,CAAC,UAAWf,gBAAce,YAAY,cAE1C,CAAC,gDAAiD,CAC9C,CAAC,uBAAwBf,gBAAcgB,UAAUC,gBAAcC,uBAC/D,CAAC,kBAAmBlB,gBAAcgB,UAAUC,gBAAcE,kBAC1D,CAAC,YAAanB,gBAAcgB,UAAUC,gBAAcG,YACpD,CAAC,iBAAkBpB,gBAAcgB,UAAUC,gBAAcI,oBAE/DjC,KArDqB,SAACkC,GAAD,OACvB,uBAAK/B,IAAK+B,EAAQ,IACd,0BAAKA,EAAQ,IACZ,CAAC,KAAM,OAAOlC,KAAK,SAAAmC,GAAS,OACzB,uBAAKhC,IAAKgC,GACN,yBAAIA,EAAU1B,eACbZ,EAAcsC,EAAWD,EAAQ,YAkD9C,6FAEA,0BAAQ9B,QAAS,kBAAInB,EAAcS,GAAGC,QAAO,SAAAyC,GAAK,QAAIA,OAAtD,oBACCnD,EAAcyB,aAAY,SAAAC,GAAI,OAC3B,uCAAeA,MAGnB,0BAAQP,QAAS,kBAAIhB,EAAcM,GAAGC,QAAO,SAAAyC,GAAK,QAAIA,OAAtD,oBACChD,EAAcsB,aAAY,SAAAC,GAAI,OAC3B,uCAAeA,OChG3B0B,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAACvD,EAAD,OAEJwD,SAASC,eAAe,U","file":"static/js/main.1b2ef2c1.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {Conan, IReducer} from \"conan-js-core\";\nimport {\n    getLoggingFilter,\n    LoggerFilters,\n    setLoggingFilter,\n    updateLoggingFilter\n} from \"conan-js-core\";\nimport {Rule} from \"conan-js-core\";\nimport {FlowEvent, FlowEventType} from \"conan-js-core\";\n\n\nexport function LoggingApp(): React.ReactElement {\n\n    let numberState1$ = Conan.light('number1', 0);\n    let numberState2$ = Conan.light('number2', 0);\n    let loggingFilterName$ = Conan.light('filter name', getLoggingFilter().name);\n\n\n    const setNewLogging= (logger: Rule<FlowEvent>)=> {\n        loggingFilterName$.do.update(logger.name);\n        setLoggingFilter(logger);\n    }\n\n    const updateLogging= (logger: IReducer<Rule<FlowEvent>>)=> {\n        let flowEventRule = updateLoggingFilter(logger);\n        loggingFilterName$.do.update(flowEventRule.name);\n    }\n\n    const printButtons= (operator, actions): React.ReactElement => (\n        <>{actions.map((action, i)=>\n            <button key={i} onClick={()=>updateLogging(current => current[operator](action[1]))}>{operator.toUpperCase()} {action[0]}</button>\n        )}</>\n    )\n\n    const printButtonsSection= (toPrint): React.ReactElement => (\n        <div key={toPrint[0]}>\n            <h3>{toPrint[0]}</h3>\n            {['or', 'and'].map (condition=>(\n                <div key={condition}>\n                    <b>{condition.toUpperCase()}</b>\n                    {printButtons (condition, toPrint[1])}\n                </div>\n            ))}\n        </div>\n    )\n\n    return (<div>\n        <h1>Specifying what to log globally</h1>\n        <h2>Currently logging:</h2>\n        {loggingFilterName$.connectLive(data=>(\n            <span>{data}</span>\n        ))}\n\n        <h2>Choose something to log:</h2>\n        <h3>Absolutely</h3>\n        <button onClick={()=>setNewLogging(LoggerFilters.never())}>never</button>\n        <button onClick={()=>setNewLogging(LoggerFilters.default())}>default</button>\n        <button onClick={()=>setNewLogging(LoggerFilters.allExceptTraces())}>all except traces</button>\n        <button onClick={()=>setNewLogging(LoggerFilters.all())}>all</button>\n\n        {[\n            ['Based on the status', [\n                ['initialising', LoggerFilters.initialising()],\n                ['nextData', LoggerFilters.nextData()]\n            ]],\n            ['Based on the nature', [\n                ['main', LoggerFilters.main()],\n                ['aux', LoggerFilters.aux()],\n                ['helper', LoggerFilters.helper()],\n                ['async', LoggerFilters.async()],\n            ]],\n            ['Based on the logging level', [\n                ['milestone', LoggerFilters.milestone()],\n                ['info', LoggerFilters.info()],\n                ['debug', LoggerFilters.debug()],\n                ['trace', LoggerFilters.trace()],\n            ]],\n            ['Based on the conan state name', [\n                ['number1', LoggerFilters.mainLogName('number1')],\n                ['number2', LoggerFilters.mainLogName('number2')],\n            ]],\n            ['Based on the event type (not all listed here)', [\n                ['PROCESSING_REACTIONS', LoggerFilters.eventType(FlowEventType.PROCESSING_REACTIONS)],\n                ['ADDING_REACTION', LoggerFilters.eventType(FlowEventType.ADDING_REACTION)],\n                ['USER_CODE', LoggerFilters.eventType(FlowEventType.USER_CODE)],\n                ['USER_REACTIONS', LoggerFilters.eventType(FlowEventType.USER_REACTIONS)],\n            ]],\n        ].map(printButtonsSection)}\n\n\n        <h2>Open your console, clean it, and check here to see the logging:</h2>\n\n        <button onClick={()=>numberState1$.do.update(value=>++value)}>increase number1</button>\n        {numberState1$.connectLive(data=>(\n            <h1>Number 1: {data}</h1>\n        ))}\n\n        <button onClick={()=>numberState2$.do.update(value=>++value)}>increase number2</button>\n        {numberState2$.connectLive(data=>(\n            <h1>Number 2: {data}</h1>\n        ))}\n    </div>)\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {LoggingApp} from \"./app\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <LoggingApp/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}