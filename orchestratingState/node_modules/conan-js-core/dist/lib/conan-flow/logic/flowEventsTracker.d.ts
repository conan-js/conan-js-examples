import { Status } from "../domain/status";
import { Transition } from "../domain/transitions";
import { StatusRequest } from "./flowRequest";
import { EventsLike, EventWithStatusInfo, LastStatusData, SerializationOptions, SerializationStatusesOptions, StateEvent, StatusEvent } from "../domain/flowEvents";
export declare class FlowEventsTracker<STATUSES> {
    private eventsByStatus;
    private events;
    private lastEvent;
    currentStatus: Status;
    addTransition(transition: Transition, isStep: boolean): void;
    addStateFromStatus(stateEvent: StateEvent): void;
    addProcessingStatus(statusRequest: StatusRequest, isStep: boolean): void;
    settleProcessingStatus(statusRequest: StatusRequest, isStep: boolean): void;
    private process;
    serializeStatesWithStatus(filterOptions?: SerializationStatusesOptions<STATUSES>): EventWithStatusInfo[];
    serializeStates(filterOptions?: SerializationStatusesOptions<STATUSES>): StateEvent[];
    serializeStatuses(filterOptions?: SerializationStatusesOptions<STATUSES>): StatusEvent[];
    serialize(filterOptions?: SerializationOptions<STATUSES>): EventsLike[];
    serializeWithStatusInfo(filterOptions?: SerializationOptions<STATUSES>): EventWithStatusInfo[];
    getLastStates(): LastStatusData<STATUSES>;
    getLastState<STATUS extends keyof STATUSES>(statusName: STATUS): STATUSES[STATUS];
}
