{"version":3,"sources":["app.tsx","index.tsx"],"names":["OrchestratingStateApp","market$","Conan","light","id","price","stockOrder$","stockId","buy","sell","changeStockPrice","delta","do","update","current","map","it","newValue","changeStockOrder","toChange","alertsByStock$","alertStream$","alertsByStock","newStream","Objects","foreachEntry","stockAlerts","sort","left","right","timestamp","tuple","addDataReaction","name","dataConsumer","stockOrders","stocks","newAlerts","forEach","stockOrder","operation","stock","find","push","orderSnapshot","stockSnapshot","Date","now","nextState","getData","newAlert","alertsForStock","lastAlert","length","deepEquals","connectLive","stockPrices","stockPrice","onClick","reverse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbeaa1ab.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {Reducers} from \"conan-js-core\";\nimport {Conan} from \"conan-js-core\";\nimport {IKeyValuePairs} from \"conan-js-core\";\nimport {Objects} from \"conan-js-core\";\n\nexport interface ProductPriceReducers extends Reducers<ProductUnitPrice>{\n    $incrementPriceBy10(): ProductUnitPrice;\n    $decrementPriceBy10(): ProductUnitPrice;\n}\ninterface ProductUnitPrice {\n    priceUsd: number;\n    id: string;\n}\n\n\nexport function OrchestratingStateApp(): React.ReactElement {\n    interface StockAlert {\n        operation: 'buy' | 'sell' | 'keep',\n        stockSnapshot: StockPrice,\n        orderSnapshot: StockOrder,\n        timestamp: number\n    }\n\n    interface StockPrice {\n        id: string,\n        price: number,\n    }\n\n    interface StockOrder {\n        stockId: string,\n        sell: number,\n        buy: number,\n    }\n\n    const market$ = Conan.light<StockPrice[]>('market', [{\n        id: 'TSLA',\n        price: 1000\n    },{\n        id: 'AAPL',\n        price: 350\n    }]);\n\n    const stockOrder$ = Conan.light<StockOrder[]>('stockOrders', [{\n        stockId: 'AAPL',\n        buy: 300,\n        sell: 400\n    },{\n        stockId: 'TSLA',\n        buy: 900,\n        sell: 1200\n    }]);\n\n    function changeStockPrice (stockId: string, delta: number) {\n        market$.do.update(current=>\n            current.map(it=>{\n                let newValue = it.price + delta;\n                return it.id !== stockId ?\n                    it :\n                    {...it, price: newValue > 0 ? newValue : 0};\n            })\n        )\n    }\n\n    function changeStockOrder (stockId: string, delta: number, toChange: 'buy' | 'sell') {\n        stockOrder$.do.update(current=>\n            current.map(it=> {\n                let newValue = it[toChange] + delta;\n                return it.stockId !== stockId ?\n                        it :\n                        {...it, [toChange]: newValue > 0 ? newValue : 0};\n                }\n            )\n        )\n    }\n\n\n    const alertsByStock$ = Conan.light<IKeyValuePairs<StockAlert[]>>('alerts', {});\n\n    const alertStream$ = alertsByStock$.map<StockAlert[]>(alertsByStock => {\n        let newStream: StockAlert[] = [];\n        Objects.foreachEntry(alertsByStock, (stockAlerts)=>newStream = [...newStream, ...stockAlerts])\n        return newStream.sort((left, right)=>left.timestamp - right.timestamp);\n    });\n\n\n\n\n    stockOrder$.tuple(market$).addDataReaction({\n        name: `checking alerts`,\n        dataConsumer: ([stockOrders, stocks])=> {\n            let newAlerts: StockAlert[] = [];\n            stockOrders.forEach(stockOrder=>{\n                const stock = stocks.find(it=>it.id === stockOrder.stockId);\n                let operation: 'buy' | 'sell' | 'keep';\n                if (stock.price >= stockOrder.sell) {\n                    operation= 'sell';\n                } else if (stock.price <= stockOrder.buy) {\n                    operation= 'buy';\n                } else {\n                    operation= 'keep';\n                }\n                newAlerts.push({\n                    operation,\n                    orderSnapshot: stockOrder,\n                    stockSnapshot: stock,\n                    timestamp: Date.now()\n                })\n            });\n\n            let nextState: IKeyValuePairs<StockAlert[]> = {...alertsByStock$.getData()};\n            newAlerts.forEach(newAlert=>{\n                if (nextState[newAlert.stockSnapshot.id] == null){\n                    nextState[newAlert.stockSnapshot.id] = [newAlert];\n                }  else {\n                    let alertsForStock:StockAlert[] = nextState[newAlert.stockSnapshot.id];\n                    let lastAlert = alertsForStock[alertsForStock.length -1];\n                    if (\n                        !Objects.deepEquals(newAlert.stockSnapshot, lastAlert.stockSnapshot) ||\n                        !Objects.deepEquals(newAlert.orderSnapshot, lastAlert.orderSnapshot)\n                    ){\n                        alertsForStock.push(newAlert);\n                    }\n                }\n            })\n\n            alertsByStock$.do.update(nextState);\n        }\n    })\n\n    return (<div>\n        <h1>PRICES</h1>\n        {market$.connectLive( stockPrices=> (\n            <ul>\n                {stockPrices.map(stockPrice=>(\n                    <li>{stockPrice.id} - {stockPrice.price}$ &nbsp;\n                        <button onClick={()=>changeStockPrice(stockPrice.id, +10)}>+10</button>\n                        <button onClick={()=>changeStockPrice(stockPrice.id, +100)}>+100</button>\n                        <button onClick={()=>changeStockPrice(stockPrice.id, -10)}>-10</button>\n                        <button onClick={()=>changeStockPrice(stockPrice.id, -100)}>-100</button>\n                    </li>\n                ))}\n            </ul>\n        ))}\n        <h1>ORDERS</h1>\n        {stockOrder$.connectLive(stockOrders=>(\n            <ul>\n                {stockOrders.map(stockOrder=><li>\n                    {stockOrder.stockId} <br/>\n                    BUY: {stockOrder.buy} &nbsp;\n                    <button onClick={()=>changeStockOrder(stockOrder.stockId, +10, 'buy')}>+10</button>\n                    <button onClick={()=>changeStockOrder(stockOrder.stockId, +100, 'buy')}>+100</button>\n                    <button onClick={()=>changeStockOrder(stockOrder.stockId, -10, 'buy')}>-10</button>\n                    <button onClick={()=>changeStockOrder(stockOrder.stockId, -100, 'buy')}>-100</button>\n                    <br/>\n                    SELL: {stockOrder.sell} &nbsp;\n                    <button onClick={()=>changeStockOrder(stockOrder.stockId, +10, 'sell')}>+10</button>\n                    <button onClick={()=>changeStockOrder(stockOrder.stockId, +100, 'sell')}>+100</button>\n                    <button onClick={()=>changeStockOrder(stockOrder.stockId, -10, 'sell')}>-10</button>\n                    <button onClick={()=>changeStockOrder(stockOrder.stockId, -100, 'sell')}>-100</button>\n                    <br/>\n                </li>)}\n            </ul>\n        ))}\n\n        <h1>ALERTS</h1>\n        {alertStream$.connectLive((stockAlerts)=>(\n            <ul>\n                {stockAlerts.reverse().map(it=><li>\n                    {it.operation} - {it.stockSnapshot.id} - {it.stockSnapshot.price} [{\n                        it.operation === 'buy'? it.orderSnapshot.buy :\n                        it.operation === 'sell'? it.orderSnapshot.sell :\n                        `${it.orderSnapshot.buy}/${it.orderSnapshot.sell}`}\n                    ]\n                </li>)}\n            </ul>\n        ))}\n    </div>)\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {OrchestratingStateApp} from \"./app\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <OrchestratingStateApp/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}