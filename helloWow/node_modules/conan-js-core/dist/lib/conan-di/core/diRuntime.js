export class DiRuntime {
    constructor(diInvocationResolver, diInvocationBuilderFactory) {
        this.diInvocationResolver = diInvocationResolver;
        this.diInvocationBuilderFactory = diInvocationBuilderFactory;
    }
    invoke(from, transitiveBeans, context) {
        if (typeof from === "object")
            return from;
        let invocation = this.diInvocationBuilderFactory.root(from)
            .if(transitiveBeans != null, it => it.withTransitiveBeans(transitiveBeans))
            .build();
        let result = this.diInvocationResolver.resolve(invocation, context, this).result;
        if (result == null)
            throw Error(`Can't invoke`);
        return result;
    }
    invokeWithProps(from, props, transitiveBeans, context) {
        let invocation = this.diInvocationBuilderFactory.root(from)
            .withProperties(props)
            .if(transitiveBeans != null, it => it.withTransitiveBeans(transitiveBeans))
            .build();
        let result = this.diInvocationResolver.resolve(invocation, context, this).result;
        if (result == null)
            throw Error(`Can't invoke`);
        return result;
    }
}
DiRuntime.PROPS_PROPERTY_NAME = '$props';
//# sourceMappingURL=diRuntime.js.map