import * as React from "react";
import { IBiFunction, IFunction } from "../../index";
import { ConanState } from "../conanState";
import { MonitorInfo } from "../../conan-monitor/domain/monitorInfo";
import { ITriFunction } from "../../conan-utils/typesHelper";
export interface ReactWrapperProps<STATE, PROPS, ACTIONS = any> {
    from: ConanState<STATE, ACTIONS>;
    into: React.ComponentType<PROPS>;
    mapper: ITriFunction<STATE, ACTIONS, MonitorInfo, PROPS>;
    fallbackValue?: IFunction<ACTIONS, PROPS>;
}
export declare const ReactStateContext: React.Context<any>;
export declare class StateMapConnect<STATE, PROPS, ACTIONS = any> extends React.Component<ReactWrapperProps<STATE, PROPS>, PROPS, ACTIONS> {
    private _mainDataReactionLock;
    private _asyncDataReactionLock;
    private _isMounted;
    private lastMonitorInfo;
    private lastState;
    constructor(props: ReactWrapperProps<STATE, PROPS, ACTIONS>);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
}
export interface ConnectedState<DATA, ACTIONS> {
    data: DATA;
    actions: ACTIONS;
    monitorInfo: MonitorInfo;
}
export interface StateConnectProps<STATE, ACTIONS = any> {
    from: ConanState<STATE, ACTIONS>;
    into: React.ComponentType<ConnectedState<STATE, ACTIONS>>;
    fallbackValue?: STATE;
}
export declare const StateConnect: <STATE, ACTIONS = any>(props: StateConnectProps<STATE, ACTIONS>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
export declare const stateConnect: <STATE, ACTIONS = any>(from: ConanState<STATE, ACTIONS>, into: React.ComponentType<ConnectedState<STATE, ACTIONS>>, fallbackValue?: STATE) => React.ReactElement<StateConnectProps<STATE, ACTIONS>, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
export declare const stateMapConnect: <STATE, PROPS, ACTIONS = any>(from: ConanState<STATE, ACTIONS>, into: React.ComponentType<PROPS>, mapper: IBiFunction<STATE, ACTIONS, PROPS>, fallbackValue?: IFunction<ACTIONS, PROPS>) => React.ReactElement<StateConnectProps<STATE, ACTIONS>, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
