import { StatusLikeParser } from "../domain/status";
export class FlowRequest {
    constructor(flowThread, id, status, isStep) {
        this.flowThread = flowThread;
        this.id = id;
        this.status = status;
        this.isStep = isStep;
        this.queuedReactions = [];
        this.queuedTransitions = [];
        this.queuedSteps = [];
        this.queuedStatuses = [];
        this.queuedStates = [];
        this.started = false;
        this.processingStatus = {
            id: this.id,
            status: this.status
        };
    }
    static statusRequest(smFlow, id, state, isStep) {
        return new FlowRequest(smFlow, id, state, isStep);
    }
    static transitionRequest(smFlow, id, transition, isStep) {
        return new FlowRequest(smFlow, id, StatusLikeParser.parse(transition.into), isStep);
    }
    start() {
        if (this.started) {
            throw new Error('unexpected');
        }
        this.started = true;
        this.flowThread.processStateAndReactions(this.processingStatus, this.isStep);
        this.flowThread.flagAsSettled(this.processingStatus, this.isStep);
        this.flowThread.onStateRequestCompleted(this, this.queuedReactions, this.queuedStatuses, this.queuedStates, this.queuedTransitions, this.queuedSteps);
    }
    queueStatus(state) {
        this.queuedStatuses.push(state);
    }
    queueTransition(transition) {
        this.queuedTransitions.push(transition);
        return this;
    }
    queueStep(transition) {
        this.queuedSteps.push(transition);
        return this;
    }
    queueState(status) {
        this.queuedStates.push(status);
    }
    queueReaction(eventName, reaction) {
        this.queuedReactions.push([eventName, reaction]);
    }
}
//# sourceMappingURL=flowRequest.js.map