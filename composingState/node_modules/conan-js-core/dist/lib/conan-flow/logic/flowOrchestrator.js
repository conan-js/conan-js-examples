import { FlowRuntimeEventTiming } from "../domain/flowRuntimeEvents";
import { FlowRuntimeTracker } from "./flowRuntimeTracker";
export class FlowOrchestrator {
    constructor(eventsProcessor) {
        this.eventsProcessor = eventsProcessor;
        this.pastTrackers = [];
    }
    onRuntimeEvent(tracker, event, loggingOptions) {
        if (event.timing === FlowRuntimeEventTiming.REQUEST_START) {
            this.currentTracker = tracker;
        }
        else if (event.timing === FlowRuntimeEventTiming.REQUEST_END || event.timing === FlowRuntimeEventTiming.REQUEST_CANCEL) {
            this.pastTrackers.push(tracker);
            this.currentTracker = undefined;
        }
        this.eventsProcessor.forEach(it => it(event, loggingOptions));
    }
    createRuntimeTracker(flowController, source, runtimeEvent, payload) {
        return new FlowRuntimeTracker(this, {
            flowController: flowController,
            source,
            runtimeEvent,
            payload
        });
    }
}
//# sourceMappingURL=flowOrchestrator.js.map