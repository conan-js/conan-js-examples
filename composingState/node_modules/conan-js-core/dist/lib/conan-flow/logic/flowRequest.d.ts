import { Status } from "../domain/status";
import { FlowThread } from "./flowThread";
import { Transition } from "../domain/transitions";
import { ReactionDef } from "../def/reactionDef";
export interface StatusRequest {
    status: Status;
    id: string;
}
export declare class FlowRequest {
    readonly flowThread: FlowThread<any>;
    readonly id: string;
    readonly status: Status;
    readonly isStep: boolean;
    private queuedReactions;
    private queuedTransitions;
    private queuedSteps;
    private queuedStatuses;
    private queuedStates;
    private started;
    static statusRequest(smFlow: FlowThread<any>, id: string, state: Status, isStep: boolean): FlowRequest;
    static transitionRequest(smFlow: FlowThread<any>, id: string, transition: Transition, isStep: boolean): FlowRequest;
    constructor(flowThread: FlowThread<any>, id: string, status: Status, isStep: boolean);
    private processingStatus;
    start(): void;
    queueStatus(state: Status): void;
    queueTransition(transition: Transition): this;
    queueStep(transition: Transition): this;
    queueState(status: Status): void;
    queueReaction(eventName: string, reaction: ReactionDef<any, any>): void;
}
