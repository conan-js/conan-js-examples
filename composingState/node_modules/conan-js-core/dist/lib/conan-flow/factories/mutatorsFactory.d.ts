import { Steps, StepsDef } from "../def/stepsDef";
import { DefaultTransitionFn, Transitions, TransitionsDef } from "../domain/transitions";
import { BindBackType, FlowAnchor } from "../logic/flowAnchor";
import { BaseStates } from "../domain/flow";
import { DefaultStepFn } from "../domain/steps";
export declare class MutatorsFactory {
    static createDefaultStepsDef<STATUSES extends BaseStates, STATUS extends keyof STATUSES>(): StepsDef<STATUSES, STATUS>;
    static createDefaultTransitionDef<STATUSES, STATUS extends keyof STATUSES>(): TransitionsDef<STATUSES>;
    static createDefaultSteps<STATUSES extends BaseStates, STATUS extends keyof STATUSES>(statusName: STATUS, flowAnchor: FlowAnchor<STATUSES>): Steps<STATUSES, STATUS>;
    static createTransitions<STATUSES extends BaseStates, STATUS extends keyof STATUSES>(statusName: STATUS, flowAnchor: FlowAnchor<STATUSES>, userTransitions?: TransitionsDef<STATUSES>): Transitions<STATUSES> & DefaultTransitionFn<STATUSES>;
    static createSteps<STATUSES extends BaseStates, STATUS extends keyof STATUSES>(statusName: STATUS, flowAnchor: FlowAnchor<STATUSES>, userStepsDef?: StepsDef<STATUSES, STATUS>): Steps<STATUSES, STATUS> & DefaultStepFn<STATUSES[STATUS]>;
    static doCreateSteps<STATUSES extends BaseStates, STATUS extends keyof STATUSES>(statusName: STATUS, flowAnchor: FlowAnchor<STATUSES>, allStepsDef: StepsDef<STATUSES, STATUS>[]): Steps<STATUSES, STATUS>;
    static doCreateTransitions<STATUSES extends BaseStates, STATUS extends keyof STATUSES>(statusName: STATUS, flowAnchor: FlowAnchor<STATUSES>, allTransitionsDef: TransitionsDef<STATUSES>[]): Transitions<STATUSES>;
    static bindToAnchor<STATUSES extends BaseStates, DATA, STATUS extends keyof STATUSES, TYPE extends Transitions<STATUSES> | Steps<STATUSES, STATUS> = Transitions<STATUSES> | Steps<STATUSES, STATUS>>(expectedStatusName: STATUS, flowAnchor: FlowAnchor<STATUSES>, toBind: TYPE, type: BindBackType): TYPE;
}
