export class DiInvocationBuilderFactory {
    constructor(diAnnotationsMetadataFactory) {
        this.diAnnotationsMetadataFactory = diAnnotationsMetadataFactory;
    }
    childrenOf(parent, from, propsProvider) {
        let newBranch = parent.inProcessDiInvocations.slice(0);
        newBranch.push(parent.diMetadata.dependencyName);
        return new DiInvocationBuilder(this.diAnnotationsMetadataFactory, from)
            .withInProcessDiInvocations(newBranch)
            .withTransitiveBeans(parent.transitiveBeans)
            // @ts-ignore
            .if(propsProvider != null, (it) => it.withProperties(propsProvider()));
    }
    root(from) {
        return new DiInvocationBuilder(this.diAnnotationsMetadataFactory, from);
    }
}
export class DiInvocationFactory {
    constructor(diInvocationBuilderFactory) {
        this.diInvocationBuilderFactory = diInvocationBuilderFactory;
    }
    childrenOf(parent, from, propsProvider) {
        return this.diInvocationBuilderFactory.childrenOf(parent, from, propsProvider).build();
    }
}
export class DiInvocationBuilder {
    constructor(diAnnotationsMetadataFactory, _constructor) {
        this.diAnnotationsMetadataFactory = diAnnotationsMetadataFactory;
        this._constructor = _constructor;
        this.inProcessDiInvocations = [];
        this.transitiveBeans = {};
        this.properties = null;
    }
    if(condition, cb) {
        if (condition) {
            cb(this);
        }
        return this;
    }
    withInProcessDiInvocations(inProcessDiInvocations) {
        this.inProcessDiInvocations = inProcessDiInvocations;
        return this;
    }
    withTransitiveBeans(transitiveBeans) {
        this.transitiveBeans = transitiveBeans;
        return this;
    }
    withProperties(properties) {
        this.properties = properties;
        return this;
    }
    build() {
        return {
            diMetadata: this.diAnnotationsMetadataFactory.create(this._constructor),
            inProcessDiInvocations: this.inProcessDiInvocations,
            transitiveBeans: this.transitiveBeans,
            properties: this.properties
        };
    }
}
//# sourceMappingURL=diInvocationBuilder.js.map