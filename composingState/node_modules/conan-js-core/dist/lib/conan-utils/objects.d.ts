import { IBiConsumer, IFunction, IKeyValuePairs, IPredicate } from "./typesHelper";
export declare class Objects {
    static mapKeys<VALUE_TYPE, FINAL_VALUE_TYPE = VALUE_TYPE>(from: IKeyValuePairs<any>, valueMapper: IFunction<VALUE_TYPE, FINAL_VALUE_TYPE>, keyMapper?: IPredicate<string>): IKeyValuePairs<FINAL_VALUE_TYPE>;
    static foreachEntry<DATA_TYPE>(from: {
        [p: string]: DATA_TYPE;
    }, cb: IBiConsumer<DATA_TYPE, string>): void;
    static keyfy<ARRAY_TYPE>(from: ARRAY_TYPE[], keyProvider: IFunction<ARRAY_TYPE, string>): IKeyValuePairs<ARRAY_TYPE>;
    static navigate<START>(from: START, iterator: IFunction<START, START | null>): START[];
    static deepEqualsArrays<T extends {}>(left: T[], right: T[]): boolean;
    static deepEqualsObjects<T extends {}>(left: T, right: T): boolean;
    static deepEquals<T>(left: T, right: T): boolean;
}
