import * as React from "react";
import { ConnectedState, StateConnectProps } from "./stateConnect";
import { IBiFunction, IFunction } from "../../index";
export interface ContextStateMapConnectProps<STATE, PROPS, ACTIONS = any> {
    into: React.ComponentType<PROPS>;
    mapper: IBiFunction<STATE, ACTIONS, PROPS>;
    fallbackValue?: IFunction<ACTIONS, PROPS>;
}
export declare class ContextStateMapConnect<STATE, PROPS, ACTIONS = any> extends React.Component<ContextStateMapConnectProps<STATE, PROPS, ACTIONS>> {
    render(): React.ReactElement;
}
export interface ContextStateConnectProps<STATE, ACTIONS = any> {
    into: React.ComponentType<ConnectedState<STATE, ACTIONS>>;
    fallbackValue?: STATE;
}
export declare class ContextStateConnect<STATE, ACTIONS = any> extends React.Component<ContextStateConnectProps<STATE, ACTIONS>> {
    render(): React.ReactElement;
}
export declare const contextStateConnect: <STATE, ACTIONS = any>(into: React.ComponentType<ConnectedState<STATE, ACTIONS>>, fallbackValue?: STATE) => React.ReactElement<StateConnectProps<STATE, ACTIONS>, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
export declare const contextStateMapConnect: <STATE, PROPS, ACTIONS = any>(into: React.ComponentType<PROPS>, mapper: IBiFunction<STATE, ACTIONS, PROPS>, fallbackValue?: IFunction<ACTIONS, PROPS>) => React.ReactElement<StateConnectProps<STATE, ACTIONS>, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
