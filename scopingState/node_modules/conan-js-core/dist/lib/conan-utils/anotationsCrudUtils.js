export class MetadataCrudUtils {
    constructor(spaceName, defaultProvider) {
        this.spaceName = spaceName;
        this.defaultProvider = defaultProvider;
    }
    updateMetadata(constructor, updater) {
        let current = this.getOrCreateMetadata(constructor);
        if (current == null)
            throw Error(`can't get or create metaData`);
        updater(current);
        return current;
    }
    assignMetaDataToConstructor(constructor, metaData) {
        let annotationsMetadataBySpaceAndPrototypeHolder = this.getPrototype(constructor);
        if (annotationsMetadataBySpaceAndPrototypeHolder.$a == null) {
            annotationsMetadataBySpaceAndPrototypeHolder.$a = {};
        }
        if (annotationsMetadataBySpaceAndPrototypeHolder.$a[this.spaceName] == null) {
            annotationsMetadataBySpaceAndPrototypeHolder.$a[this.spaceName] = {};
        }
        let name = MetadataCrudUtils.extractName(constructor);
        annotationsMetadataBySpaceAndPrototypeHolder.$a[this.spaceName][name] = metaData;
    }
    getAnnotationsMetaData(constructorOrInstance) {
        let annotationsMetadataBySpaceAndPrototypeHolder = constructorOrInstance;
        if (!annotationsMetadataBySpaceAndPrototypeHolder.$a) {
            annotationsMetadataBySpaceAndPrototypeHolder = this.getPrototype(constructorOrInstance);
        }
        let annotationsMetadataBySpaceAndPrototype = annotationsMetadataBySpaceAndPrototypeHolder.$a;
        if (annotationsMetadataBySpaceAndPrototype == null) {
            return null;
        }
        let annotationsMetadataByPrototype = annotationsMetadataBySpaceAndPrototype[this.spaceName];
        if (annotationsMetadataByPrototype == null) {
            return null;
        }
        let name = MetadataCrudUtils.extractName(constructorOrInstance);
        return annotationsMetadataByPrototype[name];
    }
    getOrCreateMetadata(constructor) {
        if (this.getAnnotationsMetaData(constructor) == null) {
            let metadata = this.defaultProvider();
            this.assignMetaDataToConstructor(constructor, metadata);
        }
        return this.getAnnotationsMetaData(constructor);
    }
    getPrototype(constructor) {
        if (typeof constructor === 'object') {
            return constructor;
        }
        if (typeof constructor.prototype === 'object') {
            return constructor.prototype;
        }
        return this.getPrototype(Object.getPrototypeOf(constructor));
    }
    static extractName(constructor) {
        let rawName = constructor.name;
        if (rawName == null) {
            rawName = constructor.constructor.name;
        }
        return rawName.substring(0, 1).toLowerCase() + rawName.substring(1, rawName.length);
    }
}
//# sourceMappingURL=anotationsCrudUtils.js.map