export class FlowFacadeImpl {
    constructor(flow, actions) {
        this.flow = flow;
        this.actions = actions;
        this.do = actions;
    }
    addReaction(statusName, reaction) {
        this.flow.addReaction(statusName, reaction);
        return this;
    }
    alwaysOn(stateName, def) {
        this.flow.alwaysOn(stateName, def);
        return this;
    }
    assertOn(status, then) {
        this.flow.assertOn(status, then);
        return this;
    }
    chainInto(statusFrom, statusTo, mutatorsCb, name) {
        this.flow.chainInto(statusFrom, statusTo, mutatorsCb, name);
        return undefined;
    }
    getCurrentStatusName() {
        return this.flow.getCurrentStatusName();
    }
    getEvents() {
        return this.flow.getEvents();
    }
    getName() {
        return this.flow.getName();
    }
    getState() {
        return this.flow.getState();
    }
    getStatusData() {
        return this.flow.getStatusData();
    }
    on(statusName) {
        return this.flow.on(statusName);
    }
    onceOn(stateName, def, name) {
        this.flow.onceOn(stateName, def, name);
        return this;
    }
    onceOnInit(def) {
        this.flow.onceOnInit(def);
        return this;
    }
    onceOnStop(def) {
        this.flow.onceOnStop(def);
        return this;
    }
    start(initialStatus) {
        this.flow.start(initialStatus);
        return this;
    }
    stop(eventsCb) {
        this.flow.stop(eventsCb);
        return this;
    }
    get isRunning() {
        return this.flow.isRunning;
    }
    onInit() {
        return this.flow.onInit();
    }
    reactOnStatusChanged(customReaction) {
        this.flow.reactOnStatusChanged(customReaction);
        return this;
    }
    deferInto(statusFrom, statusTo, mutatorsCbAsap) {
        return this.flow.deferInto(statusFrom, statusTo, mutatorsCbAsap);
    }
    removeReaction(statusName, reactionToRemove) {
        this.flow.removeReaction(statusName, reactionToRemove);
    }
    changeLoggingNature(nature) {
        this.flow.changeLoggingNature(nature);
    }
    log(msg) {
        this.flow.log(msg);
    }
    createRuntimeTracker(runtimeEvent, payload) {
        return this.flow.createRuntimeTracker(runtimeEvent, payload);
    }
    addReactionNext(statusDef, reaction) {
        this.flow.addReactionNext(statusDef, reaction);
        return this;
    }
    getDefinition() {
        return this.flow.getDefinition();
    }
    toState(statusName) {
        return this.flow.toState(statusName);
    }
    toStateAll() {
        return this.flow.toStateAll();
    }
}
//# sourceMappingURL=flowFacade.js.map