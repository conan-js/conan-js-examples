import { BaseRules } from "./baseRules";
class ObjectPredicates {
    static hasKey(keyName) {
        return (value) => keyName in value;
    }
    static isObject() {
        return (value) => typeof value === "object";
    }
}
export class ObjectRules {
    static ifObject() {
        return BaseRules.combineAnd('ifObject', BaseRules.ifInitialised(), ObjectPredicates.isObject());
    }
    static hasKey(name) {
        return BaseRules.combineAnd(`hasKey[${name}]`, ObjectRules.ifObject(), ObjectPredicates.hasKey(name));
    }
    static stringKey(keyName, stringRule) {
        return BaseRules.combineAnd(`key[${keyName}]->{${stringRule.name}`, ObjectRules.hasKey(keyName), BaseRules.join((value) => value[keyName], stringRule));
    }
}
//# sourceMappingURL=objectRules.js.map