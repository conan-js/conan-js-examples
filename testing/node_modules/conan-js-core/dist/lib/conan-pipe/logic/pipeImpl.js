import { Threads } from "../../conan-thread/factories/threads";
export class PipeImpl {
    constructor(name, pipeConnector, pipeThreadDef) {
        this.name = name;
        this.pipeConnector = pipeConnector;
        this.pipeThreadDef = pipeThreadDef;
    }
    addReaction(def) {
        return this.baseThread.addReaction(def);
    }
    chain(mutatorsCb) {
        return this.baseThread.chain(mutatorsCb);
    }
    getData() {
        return this.baseThread.getData();
    }
    getEvents() {
        return this.baseThread.getEvents();
    }
    getName() {
        return this.baseThread.getName();
    }
    next(cb) {
        this.baseThread.next(cb);
    }
    start() {
        if (this.baseThread == null) {
            let def = Object.assign({ name: this.name }, this.pipeThreadDef);
            this.baseThread = Threads.create(def);
            this.pipeConnector(this.baseThread);
        }
        else {
            this.baseThread.start();
        }
        return this;
    }
    stop(eventsConsumer) {
        this.baseThread.stop(undefined);
        return this;
    }
    get reducers() {
        return this.baseThread.reducers;
    }
    get isRunning() {
        return this.baseThread.isRunning;
    }
    get do() {
        return this.baseThread.do;
    }
    get actions() {
        return this.baseThread.actions;
    }
    get thread() {
        return this.baseThread.thread;
    }
    changeLoggingNature(nature) {
        return this.baseThread.changeLoggingNature(nature);
    }
    log(msg) {
        this.baseThread.log(msg);
    }
    once(reaction, name) {
        this.baseThread.once(reaction, name);
        return this;
    }
    createRuntimeTracker(runtimeEvent, payload) {
        return this.baseThread.createRuntimeTracker(runtimeEvent, payload);
    }
    monitor(toMonitor, thenCallback, name, payload) {
        return this.baseThread.monitor(toMonitor, thenCallback, name, payload);
    }
    addReactionNext(def) {
        this.baseThread.addReactionNext(def);
        return this;
    }
    getDefinition() {
        return this.baseThread.getDefinition();
    }
}
//# sourceMappingURL=pipeImpl.js.map