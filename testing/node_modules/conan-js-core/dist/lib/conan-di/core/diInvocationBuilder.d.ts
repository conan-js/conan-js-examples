import { DiInvocation, Injectable } from './diDomain';
import { DiAnnotationsMetadataFactory } from './annotations/diAnnotatinosMetadataFactory';
import { IConsumer, IKeyValuePairs, IProducer, IVarArgConstructor } from "../../conan-utils/typesHelper";
export declare class DiInvocationBuilderFactory {
    private readonly diAnnotationsMetadataFactory;
    constructor(diAnnotationsMetadataFactory: DiAnnotationsMetadataFactory);
    childrenOf<T, P>(parent: DiInvocation<any>, from: IVarArgConstructor<T>, propsProvider?: IProducer<P> | null): DiInvocationBuilder<T, P>;
    root<T, P>(from: Injectable<T>): DiInvocationBuilder<T, P>;
}
export declare class DiInvocationFactory {
    private readonly diInvocationBuilderFactory;
    constructor(diInvocationBuilderFactory: DiInvocationBuilderFactory);
    childrenOf<T>(parent: DiInvocation<any>, from: IVarArgConstructor<T>, propsProvider?: IProducer<T> | null): DiInvocation<T>;
}
export declare class DiInvocationBuilder<T, P> {
    private readonly diAnnotationsMetadataFactory;
    private readonly _constructor;
    inProcessDiInvocations: string[];
    transitiveBeans: IKeyValuePairs<any> | undefined;
    properties: P | null;
    constructor(diAnnotationsMetadataFactory: DiAnnotationsMetadataFactory, _constructor: Injectable<any>);
    if(condition: boolean, cb: IConsumer<DiInvocationBuilder<T, P>>): DiInvocationBuilder<T, P>;
    withInProcessDiInvocations(inProcessDiInvocations: string[]): DiInvocationBuilder<T, P>;
    withTransitiveBeans(transitiveBeans: IKeyValuePairs<any> | undefined): DiInvocationBuilder<T, P>;
    withProperties(properties: P): DiInvocationBuilder<T, P>;
    build(): DiInvocation<P>;
}
