{"ast":null,"code":"export function insertMentionLinks(markdown){return markdown.replace(/\\B(@([a-zA-Z0-9](-?[a-zA-Z0-9_])+))/g,\"**[$1](https://github.com/$2)**\");}export function shorten(){var text=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var maxLength=arguments.length>1&&arguments[1]!==undefined?arguments[1]:140;// Normalize newlines\nvar cleanText=text.replace(/\\\\r\\\\n/g,'\\n');// Return if short enough already\nif(cleanText.length<=maxLength){return cleanText;}var ellip=' ...';// Return the 140 chars as-is if they end in a non-word char\nvar oneTooLarge=cleanText.substr(0,141);if(/\\W$/.test(oneTooLarge)){return oneTooLarge.substr(0,140)+ellip;}// Walk backwards to the nearest non-word character\nvar i=oneTooLarge.length;while(--i){if(/\\W/.test(oneTooLarge[i])){return oneTooLarge.substr(0,i)+ellip;}}return oneTooLarge.substr(0,140)+ellip;}","map":{"version":3,"sources":["/Users/albertoalmansa/Projects/conan-js/tmp/conan-js-examples/issues-viewer/src/utils/stringUtils.ts"],"names":["insertMentionLinks","markdown","replace","shorten","text","maxLength","cleanText","length","ellip","oneTooLarge","substr","test","i"],"mappings":"AAAA,MAAO,SAASA,CAAAA,kBAAT,CAA4BC,QAA5B,CAAuD,CAC1D,MAAOA,CAAAA,QAAQ,CAACC,OAAT,CACH,sCADG,mCAAP,CAIH,CAED,MAAO,SAASC,CAAAA,OAAT,EAA6C,IAA5BC,CAAAA,IAA4B,2DAArB,EAAqB,IAAjBC,CAAAA,SAAiB,2DAAL,GAAK,CAChD;AACA,GAAIC,CAAAA,SAAS,CAAGF,IAAI,CAACF,OAAL,CAAa,SAAb,CAAwB,IAAxB,CAAhB,CAEA;AACA,GAAII,SAAS,CAACC,MAAV,EAAoBF,SAAxB,CAAmC,CAC/B,MAAOC,CAAAA,SAAP,CACH,CAED,GAAME,CAAAA,KAAK,CAAG,MAAd,CAEA;AACA,GAAMC,CAAAA,WAAW,CAAGH,SAAS,CAACI,MAAV,CAAiB,CAAjB,CAAoB,GAApB,CAApB,CACA,GAAI,MAAMC,IAAN,CAAWF,WAAX,CAAJ,CAA6B,CACzB,MAAOA,CAAAA,WAAW,CAACC,MAAZ,CAAmB,CAAnB,CAAsB,GAAtB,EAA6BF,KAApC,CACH,CAED;AACA,GAAII,CAAAA,CAAC,CAAGH,WAAW,CAACF,MAApB,CACA,MAAO,EAAEK,CAAT,CAAY,CACR,GAAI,KAAKD,IAAL,CAAUF,WAAW,CAACG,CAAD,CAArB,CAAJ,CAA+B,CAC3B,MAAOH,CAAAA,WAAW,CAACC,MAAZ,CAAmB,CAAnB,CAAsBE,CAAtB,EAA2BJ,KAAlC,CACH,CACJ,CAED,MAAOC,CAAAA,WAAW,CAACC,MAAZ,CAAmB,CAAnB,CAAsB,GAAtB,EAA6BF,KAApC,CACH","sourcesContent":["export function insertMentionLinks(markdown: string) : string {\n    return markdown.replace(\n        /\\B(@([a-zA-Z0-9](-?[a-zA-Z0-9_])+))/g,\n        `**[$1](https://github.com/$2)**`\n    )\n}\n\nexport function shorten(text = '', maxLength = 140) {\n    // Normalize newlines\n    let cleanText = text.replace(/\\\\r\\\\n/g, '\\n')\n\n    // Return if short enough already\n    if (cleanText.length <= maxLength) {\n        return cleanText\n    }\n\n    const ellip = ' ...'\n\n    // Return the 140 chars as-is if they end in a non-word char\n    const oneTooLarge = cleanText.substr(0, 141)\n    if (/\\W$/.test(oneTooLarge)) {\n        return oneTooLarge.substr(0, 140) + ellip\n    }\n\n    // Walk backwards to the nearest non-word character\n    let i = oneTooLarge.length\n    while (--i) {\n        if (/\\W/.test(oneTooLarge[i])) {\n            return oneTooLarge.substr(0, i) + ellip\n        }\n    }\n\n    return oneTooLarge.substr(0, 140) + ellip\n}\n"]},"metadata":{},"sourceType":"module"}