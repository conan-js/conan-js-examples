{"ast":null,"code":"import*as React from\"react\";function OrgRepo(_ref){var org=_ref.org,repo=_ref.repo;return/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"a\",{href:\"https://github.com/\".concat(org),className:\"header__org\"},org),' / ',/*#__PURE__*/React.createElement(\"a\",{href:\"https://github.com/\".concat(org,\"/\").concat(repo),className:\"header__repo\"},repo));}export function IssuesPageHeader(_ref2){var _ref2$openIssuesCount=_ref2.openIssuesCount,openIssuesCount=_ref2$openIssuesCount===void 0?-1:_ref2$openIssuesCount,org=_ref2.org,repo=_ref2.repo;if(openIssuesCount===-1){return/*#__PURE__*/React.createElement(\"h1\",null,\"Open issues for \",/*#__PURE__*/React.createElement(OrgRepo,{org:org,repo:repo}));}else{var pluralizedIssue=openIssuesCount===1?'issue':'issues';return/*#__PURE__*/React.createElement(\"h1\",null,/*#__PURE__*/React.createElement(\"span\",{className:\"header__openIssues\"},openIssuesCount),\" open\",' ',pluralizedIssue,\" for \",/*#__PURE__*/React.createElement(OrgRepo,{org:org,repo:repo}));}}","map":{"version":3,"sources":["/Users/albertoalmansa/Projects/conan-js/tmp/conan-js-examples/issues-viewer/src/features/issuesList/IssuesPageHeader.tsx"],"names":["React","OrgRepo","org","repo","IssuesPageHeader","openIssuesCount","pluralizedIssue"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CAWA,QAASC,CAAAA,OAAT,MAAwC,IAAtBC,CAAAA,GAAsB,MAAtBA,GAAsB,CAAjBC,IAAiB,MAAjBA,IAAiB,CACpC,mBACI,6CACF,yBAAG,IAAI,8BAAwBD,GAAxB,CAAP,CAAsC,SAAS,CAAC,aAAhD,EACGA,GADH,CADE,CAIK,KAJL,cAKI,yBAAG,IAAI,8BAAwBA,GAAxB,aAA+BC,IAA/B,CAAP,CAA8C,SAAS,CAAC,cAAxD,EACHA,IADG,CALJ,CADJ,CAWH,CAED,MAAO,SAASC,CAAAA,gBAAT,OAI0C,iCAHZC,eAGY,CAHZA,eAGY,gCAHM,CAAC,CAGP,uBAFZH,GAEY,OAFZA,GAEY,CADZC,IACY,OADZA,IACY,CAC7C,GAAIE,eAAe,GAAK,CAAC,CAAzB,CAA4B,CACxB,mBACI,8DACoB,oBAAC,OAAD,EAAS,GAAG,CAAEH,GAAd,CAAmB,IAAI,CAAEC,IAAzB,EADpB,CADJ,CAKH,CAND,IAMO,CACH,GAAMG,CAAAA,eAAe,CAAGD,eAAe,GAAK,CAApB,CAAwB,OAAxB,CAAkC,QAA1D,CACA,mBACI,2CACI,4BAAM,SAAS,CAAC,oBAAhB,EAAsCA,eAAtC,CADJ,SACuE,GADvE,CAEKC,eAFL,sBAE0B,oBAAC,OAAD,EAAS,GAAG,CAAEJ,GAAd,CAAmB,IAAI,CAAEC,IAAzB,EAF1B,CADJ,CAMH,CACJ","sourcesContent":["import * as React from \"react\";\n\ninterface OrgProps {\n    org: string\n    repo: string\n}\n\nexport type HeaderProps = {\n    openIssuesCount: number\n} & OrgProps\n\nfunction OrgRepo({org, repo}: OrgProps) {\n    return (\n        <span>\n      <a href={`https://github.com/${org}`} className=\"header__org\">\n        {org}\n      </a>\n            {' / '}\n            <a href={`https://github.com/${org}/${repo}`} className=\"header__repo\">\n        {repo}\n      </a>\n    </span>\n    )\n}\n\nexport function IssuesPageHeader({\n                                     openIssuesCount = -1,\n                                     org,\n                                     repo\n                                 }: HeaderProps) {\n    if (openIssuesCount === -1) {\n        return (\n            <h1>\n                Open issues for <OrgRepo org={org} repo={repo}/>\n            </h1>\n        )\n    } else {\n        const pluralizedIssue = openIssuesCount === 1 ? 'issue' : 'issues'\n        return (\n            <h1>\n                <span className=\"header__openIssues\">{openIssuesCount}</span> open{' '}\n                {pluralizedIssue} for <OrgRepo org={org} repo={repo}/>\n            </h1>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}