{"ast":null,"code":"import _slicedToArray from\"/Users/albertoalmansa/Projects/conan-js/tmp/conan-js-examples/issues-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import*as React from\"react\";import{useEffect}from\"react\";import{IssueMeta}from'./IssueMeta';import{insertMentionLinks}from\"../../utils/stringUtils\";import{IssueLabels}from\"../../components/IssueLabels\";import{issuesCommentsState$}from\"../../state/issuesCommentState$\";import{IssueComments}from\"./IssueComments\";import{useConanState}from\"conan-js-core\";export var IssueDetailsPage=function IssueDetailsPage(_ref){var issue=_ref.issue,showIssuesList=_ref.showIssuesList,fetchComments=_ref.fetchComments;var _useConanState=useConanState(issuesCommentsState$),_useConanState2=_slicedToArray(_useConanState,1),commentsState=_useConanState2[0];useEffect(function(){if(issue){fetchComments(issue);}},[]);var backToIssueListButton=/*#__PURE__*/React.createElement(\"button\",{onClick:showIssuesList},\"Back to Issues List\");var comments=commentsState.commentsByIssue[issue.id];var renderedComments;if(comments){renderedComments=/*#__PURE__*/React.createElement(IssueComments,{issue:issue,comments:comments});}var content=/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,issue.title),backToIssueListButton,/*#__PURE__*/React.createElement(IssueMeta,{issue:issue}),/*#__PURE__*/React.createElement(IssueLabels,{labels:issue.labels}),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",null,insertMentionLinks(issue.body)),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",null,\"Comments\"),/*#__PURE__*/React.createElement(\"ul\",null,renderedComments));return/*#__PURE__*/React.createElement(\"div\",null,content);};","map":{"version":3,"sources":["/Users/albertoalmansa/Projects/conan-js/tmp/conan-js-examples/issues-viewer/src/features/issueDetails/IssueDetailsPage.tsx"],"names":["React","useEffect","IssueMeta","insertMentionLinks","IssueLabels","issuesCommentsState$","IssueComments","useConanState","IssueDetailsPage","issue","showIssuesList","fetchComments","commentsState","backToIssueListButton","comments","commentsByIssue","id","renderedComments","content","title","labels","body"],"mappings":"kMAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAAQC,SAAR,KAAwB,OAAxB,CACA,OAAQC,SAAR,KAAwB,aAAxB,CACA,OAAQC,kBAAR,KAAiC,yBAAjC,CAEA,OAAQC,WAAR,KAA0B,8BAA1B,CAEA,OAA4BC,oBAA5B,KAAuD,iCAAvD,CACA,OAAQC,aAAR,KAA4B,iBAA5B,CACA,OAAQC,aAAR,KAA4B,eAA5B,CAgBA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,MAImB,IAHdC,CAAAA,KAGc,MAHdA,KAGc,CAFdC,cAEc,MAFdA,cAEc,CADdC,aACc,MADdA,aACc,oBAEvBJ,aAAa,CAA4CF,oBAA5C,CAFU,kDAExCO,aAFwC,oBAI/CX,SAAS,CAAC,UAAM,CACZ,GAAIQ,KAAJ,CAAW,CACPE,aAAa,CAACF,KAAD,CAAb,CACH,CACJ,CAJQ,CAIN,EAJM,CAAT,CAMA,GAAMI,CAAAA,qBAAqB,cACvB,8BAAQ,OAAO,CAAEH,cAAjB,wBADJ,CAOA,GAAMI,CAAAA,QAAQ,CAAGF,aAAa,CAACG,eAAd,CAA8BN,KAAK,CAACO,EAApC,CAAjB,CACA,GAAIC,CAAAA,gBAAJ,CACA,GAAIH,QAAJ,CAAc,CACVG,gBAAgB,cAAG,oBAAC,aAAD,EAAe,KAAK,CAAER,KAAtB,CAA6B,QAAQ,CAAEK,QAAvC,EAAnB,CACH,CAED,GAAII,CAAAA,OAAO,cACP,4CACI,8BAAKT,KAAK,CAACU,KAAX,CADJ,CAEKN,qBAFL,cAGI,oBAAC,SAAD,EAAW,KAAK,CAAEJ,KAAlB,EAHJ,cAII,oBAAC,WAAD,EAAa,MAAM,CAAEA,KAAK,CAACW,MAA3B,EAJJ,cAKI,8BALJ,cAMI,+BACKjB,kBAAkB,CAACM,KAAK,CAACY,IAAP,CADvB,CANJ,cASI,8BATJ,cAUI,0CAVJ,cAWI,8BAAKJ,gBAAL,CAXJ,CADJ,CAgBA,mBAAO,+BAAMC,OAAN,CAAP,CAEH,CA7CM","sourcesContent":["import * as React from \"react\";\nimport {useEffect} from \"react\";\nimport {IssueMeta} from './IssueMeta'\nimport {insertMentionLinks} from \"../../utils/stringUtils\";\nimport {Issue} from \"../../api/gitHub\";\nimport {IssueLabels} from \"../../components/IssueLabels\";\nimport {IFunction} from \"conan-js-core\";\nimport {IssuesCommentsData, issuesCommentsState$} from \"../../state/issuesCommentState$\";\nimport {IssueComments} from \"./IssueComments\";\nimport {useConanState} from \"conan-js-core\";\nimport {IssuesCommentsActions} from \"../../state/issueCommentsActionsFn\";\n\nexport interface IDProps {\n    org: string;\n    repo: string;\n    issue: Issue;\n}\n\nexport interface IDStateProps {\n    showIssuesList: () => void;\n    fetchComments: IFunction<Issue, any>\n}\n\nexport type IDAllProps = IDProps & IDStateProps;\n\nexport const IssueDetailsPage = ({\n                                     issue,\n                                     showIssuesList,\n                                     fetchComments\n                                 }: IDAllProps) => {\n\n    const [commentsState] = useConanState<IssuesCommentsData, IssuesCommentsActions>(issuesCommentsState$);\n\n    useEffect(() => {\n        if (issue) {\n            fetchComments(issue)\n        }\n    }, []);\n\n    const backToIssueListButton = (\n        <button onClick={showIssuesList}>\n            Back to Issues List\n        </button>\n    );\n\n\n    const comments = commentsState.commentsByIssue[issue.id];\n    let renderedComments;\n    if (comments) {\n        renderedComments = <IssueComments issue={issue} comments={comments}/>\n    }\n\n    let content = (\n        <div>\n            <h1>{issue.title}</h1>\n            {backToIssueListButton}\n            <IssueMeta issue={issue}/>\n            <IssueLabels labels={issue.labels}/>\n            <hr/>\n            <div>\n                {insertMentionLinks(issue.body)}\n            </div>\n            <hr/>\n            <div>Comments</div>\n            <ul>{renderedComments}\n            </ul>\n        </div>\n    )\n    return <div>{content}</div>\n\n}\n"]},"metadata":{},"sourceType":"module"}