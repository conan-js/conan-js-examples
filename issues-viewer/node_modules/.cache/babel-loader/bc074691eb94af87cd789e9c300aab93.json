{"ast":null,"code":"import _objectSpread from\"/Users/albertoalmansa/Projects/conan-js/tmp/conan-js-examples/issues-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";export var issuesReducersFn=function issuesReducersFn(getState){return{$fetch:function $fetch(issues){issues.forEach(function(issue){getState().issuesByNumber[issue.number]=issue;});return _objectSpread(_objectSpread({},getState()),{},{issues:issues,displayType:'issues'});},$fetchIssue:function $fetchIssue(issueId){return _objectSpread(_objectSpread({},getState()),{},{issueId:issueId,displayType:'comments'});},$switchDisplay:function $switchDisplay(displayType){return _objectSpread(_objectSpread({},getState()),{},{displayType:displayType});}};};","map":{"version":3,"sources":["/Users/albertoalmansa/Projects/conan-js/tmp/conan-js-examples/issues-viewer/src/state/issuesReducersFn.ts"],"names":["issuesReducersFn","getState","$fetch","issues","forEach","issue","issuesByNumber","number","displayType","$fetchIssue","issueId","$switchDisplay"],"mappings":"iMAaA,MAAO,IAAMA,CAAAA,gBAAwD,CAAG,QAA3DA,CAAAA,gBAA2D,CAACC,QAAD,QAAe,CACnFC,MAAM,CAAE,gBAACC,MAAD,CAAiC,CACrCA,MAAM,CAACC,OAAP,CAAe,SAAAC,KAAK,CAAI,CACpBJ,QAAQ,GAAGK,cAAX,CAA0BD,KAAK,CAACE,MAAhC,EAA0CF,KAA1C,CACH,CAFD,EAGA,sCACOJ,QAAQ,EADf,MAEIE,MAAM,CAAEA,MAFZ,CAGIK,WAAW,CAAE,QAHjB,GAKH,CAVkF,CAWnFC,WAAW,CAAE,qBAACC,OAAD,wCACNT,QAAQ,EADF,MAETS,OAAO,CAAEA,OAFA,CAGTF,WAAW,CAAE,UAHJ,IAXsE,CAgBnFG,cAhBmF,yBAgBpEH,WAhBoE,CAgB3C,CACpC,sCACOP,QAAQ,EADf,MAEIO,WAAW,CAAEA,WAFjB,GAIH,CArBkF,CAAf,EAAjE","sourcesContent":["import {Issue} from \"../api/gitHub\";\nimport {IssuesData} from \"./issuesState$\";\nimport {Reducers, ReducersFn} from \"conan-js-core\";\n\n\nexport interface IssuesReducers extends Reducers<IssuesData> {\n    $fetch(issues: Issue[]): IssuesData;\n\n    $fetchIssue(issueId: number): IssuesData;\n\n    $switchDisplay(displayType: 'issues' | 'comments'): IssuesData;\n}\n\nexport const issuesReducersFn: ReducersFn<IssuesData, IssuesReducers> = (getState) => ({\n    $fetch: (issues: Issue[]): IssuesData => {\n        issues.forEach(issue => {\n            getState().issuesByNumber[issue.number] = issue\n        })\n        return {\n            ...getState(),\n            issues: issues,\n            displayType: 'issues'\n        }\n    },\n    $fetchIssue: (issueId: number): IssuesData => ({\n        ...getState(),\n        issueId: issueId,\n        displayType: 'comments'\n    }),\n    $switchDisplay(displayType): IssuesData {\n        return {\n            ...getState(),\n            displayType: displayType\n        }\n    }\n})\n"]},"metadata":{},"sourceType":"module"}