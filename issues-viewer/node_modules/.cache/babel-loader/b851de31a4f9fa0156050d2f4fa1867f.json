{"ast":null,"code":"import{diContext}from\"../context\";import{Conan}from\"conan-js-core\";export var repoDetailsReducersFn=function repoDetailsReducersFn(){return{$fetchRepoDetails:function $fetchRepoDetails(openIssuesCount,error){return{error:error,openIssuesCount:openIssuesCount};}};};export var repoDetailsActionsFn=function repoDetailsActionsFn(thread){return{fetchRepoDetails:function fetchRepoDetails(repo,org){return thread.monitor(diContext.issuesService.fetchRepoDetails(repo,org).catch(function(){return thread.reducers.$fetchRepoDetails(-1,\"error loading\");}),function(repoDetails,reducers){return reducers.$fetchRepoDetails(repoDetails.open_issues_count,\"\");},'fetchRepoDetails',[repo,org]);}};};export var repoDetailsState$=Conan.state({name:'repo-details',initialData:{openIssuesCount:-1,error:null},reducers:repoDetailsReducersFn,actions:repoDetailsActionsFn});//\n//\n// export class RepoDetailsStateImpl{\n//     constructor(\n//         private readonly getData: IProducer<RepoDetailsData>,\n//         private readonly issuesService: IssuesService,\n//     ) {\n//     }\n//\n//     @Reducer\n//     $updateIssueCount( count: number): RepoDetailsData{\n//         return {\n//             ...this.getData(),\n//             openIssuesCount: count\n//         }\n//     }\n//\n//     @Reducer\n//     $fetchRepoDetails (openIssuesCount: number, error: string): RepoDetailsData{\n//         return {\n//             error: error,\n//             openIssuesCount: openIssuesCount\n//         }\n//     }\n//\n//     @MonitorAction\n//     updateIssueCount(repo, org): Asap<number> {\n//         return this.issuesService.fetchRepoDetails(repo, org)\n//             .catch(() => this.$fetchRepoDetails(-1, 'error loading'))\n//             .map(it=>it.open_issues_count);\n//     }\n//\n// }","map":{"version":3,"sources":["/Users/albertoalmansa/Projects/conan-js/tmp/conan-js-examples/issues-viewer/src/state/repoDetailsState$.ts"],"names":["diContext","Conan","repoDetailsReducersFn","$fetchRepoDetails","openIssuesCount","error","repoDetailsActionsFn","thread","fetchRepoDetails","repo","org","monitor","issuesService","catch","reducers","repoDetails","open_issues_count","repoDetailsState$","state","name","initialData","actions"],"mappings":"AAIA,OAAQA,SAAR,KAAwB,YAAxB,CACA,OAAQC,KAAR,KAAoB,eAApB,CAaA,MAAO,IAAMC,CAAAA,qBAAuE,CAAG,QAA1EA,CAAAA,qBAA0E,SAAO,CAC1FC,iBAAiB,CAAE,2BAACC,eAAD,CAA0BC,KAA1B,QAA8D,CAC7EA,KAAK,CAAEA,KADsE,CAE7ED,eAAe,CAAEA,eAF4D,CAA9D,EADuE,CAAP,EAAhF,CAWP,MAAO,IAAME,CAAAA,oBAAyF,CAAG,QAA5FA,CAAAA,oBAA4F,CAAAC,MAAM,QAAK,CAChHC,gBADgH,2BAC/FC,IAD+F,CACzFC,GADyF,CAC7D,CAC/C,MAAOH,CAAAA,MAAM,CAACI,OAAP,CACHX,SAAS,CAACY,aAAV,CAAwBJ,gBAAxB,CAAyCC,IAAzC,CAA+CC,GAA/C,EAAoDG,KAApD,CAA0D,iBAAMN,CAAAA,MAAM,CAACO,QAAP,CAAgBX,iBAAhB,CAAkC,CAAC,CAAnC,CAAsC,eAAtC,CAAN,EAA1D,CADG,CAEH,SAACY,WAAD,CAAcD,QAAd,QAA2BA,CAAAA,QAAQ,CAACX,iBAAT,CAA2BY,WAAW,CAACC,iBAAvC,CAA0D,EAA1D,CAA3B,EAFG,CAGH,kBAHG,CAIH,CAACP,IAAD,CAAOC,GAAP,CAJG,CAAP,CAMH,CAR+G,CAAL,EAAxG,CAWP,MAAO,IAAMO,CAAAA,iBAAmC,CAAGhB,KAAK,CAACiB,KAAN,CAA6B,CAC5EC,IAAI,CAAE,cADsE,CAE5EC,WAAW,CAAE,CAAChB,eAAe,CAAE,CAAC,CAAnB,CAAsBC,KAAK,CAAE,IAA7B,CAF+D,CAG5ES,QAAQ,CAAEZ,qBAHkE,CAI5EmB,OAAO,CAAEf,oBAJmE,CAA7B,CAA5C,CAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {ConanState} from \"conan-js-core\";\nimport {Reducers, ReducersFn} from \"conan-js-core\";\nimport {Asap} from \"conan-js-core\";\nimport {ActionsFn} from \"conan-js-core\";\nimport {diContext} from \"../context\";\nimport {Conan} from \"conan-js-core\";\n\nexport interface RepoDetailsData {\n    openIssuesCount: number\n    error: string | null\n}\n\nexport type RepoDetailsState = ConanState<RepoDetailsData, RepoDetailsActions>;\n\nexport interface RepoDetailsReducers extends Reducers<RepoDetailsData> {\n    $fetchRepoDetails(openIssuesCount: number, error: string): RepoDetailsData;\n}\n\nexport const repoDetailsReducersFn: ReducersFn<RepoDetailsData, RepoDetailsReducers> = () => ({\n    $fetchRepoDetails: (openIssuesCount: number, error: string): RepoDetailsData => ({\n        error: error,\n        openIssuesCount: openIssuesCount\n    })\n})\n\nexport interface RepoDetailsActions {\n    fetchRepoDetails(repo, org): Asap<RepoDetailsData>;\n}\n\nexport const repoDetailsActionsFn: ActionsFn<RepoDetailsData, RepoDetailsReducers, RepoDetailsActions> = thread => ({\n    fetchRepoDetails(repo, org): Asap<RepoDetailsData> {\n        return thread.monitor(\n            diContext.issuesService.fetchRepoDetails(repo, org).catch(() => thread.reducers.$fetchRepoDetails(-1, \"error loading\")),\n            (repoDetails, reducers) => reducers.$fetchRepoDetails(repoDetails.open_issues_count, \"\"),\n            'fetchRepoDetails',\n            [repo, org]\n        )\n    }\n});\n\nexport const repoDetailsState$: RepoDetailsState = Conan.state<RepoDetailsData>({\n    name: 'repo-details',\n    initialData: {openIssuesCount: -1, error: null},\n    reducers: repoDetailsReducersFn,\n    actions: repoDetailsActionsFn\n});\n\n//\n//\n// export class RepoDetailsStateImpl{\n//     constructor(\n//         private readonly getData: IProducer<RepoDetailsData>,\n//         private readonly issuesService: IssuesService,\n//     ) {\n//     }\n//\n//     @Reducer\n//     $updateIssueCount( count: number): RepoDetailsData{\n//         return {\n//             ...this.getData(),\n//             openIssuesCount: count\n//         }\n//     }\n//\n//     @Reducer\n//     $fetchRepoDetails (openIssuesCount: number, error: string): RepoDetailsData{\n//         return {\n//             error: error,\n//             openIssuesCount: openIssuesCount\n//         }\n//     }\n//\n//     @MonitorAction\n//     updateIssueCount(repo, org): Asap<number> {\n//         return this.issuesService.fetchRepoDetails(repo, org)\n//             .catch(() => this.$fetchRepoDetails(-1, 'error loading'))\n//             .map(it=>it.open_issues_count);\n//     }\n//\n// }\n"]},"metadata":{},"sourceType":"module"}