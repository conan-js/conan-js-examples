{"ast":null,"code":"import{diContext}from\"../context\";export var issueActionsFn=function issueActionsFn(thread){return{fetch:function fetch(repo,org,page){return thread.monitor(diContext.issuesService.fetch(repo,org,page).catch(function(){return thread.reducers.$fetch([]);}),function(issues,reducers){return reducers.$fetch(issues);},'fetch',[repo,org,page]);},fetchIssue:function fetchIssue(issueId){return thread.reducers.$fetchIssue(issueId);},showIssues:function showIssues(){return thread.reducers.$switchDisplay(\"issues\");}};};","map":{"version":3,"sources":["/Users/albertoalmansa/Projects/conan-js/tmp/conan-js-examples/issues-viewer/src/state/issueActionsFn.ts"],"names":["diContext","issueActionsFn","thread","fetch","repo","org","page","monitor","issuesService","catch","reducers","$fetch","issues","fetchIssue","issueId","$fetchIssue","showIssues","$switchDisplay"],"mappings":"AAGA,OAAQA,SAAR,KAAwB,YAAxB,CAaA,MAAO,IAAMC,CAAAA,cAAoE,CAAG,QAAvEA,CAAAA,cAAuE,CAAAC,MAAM,QAAK,CAC3FC,KAD2F,gBACrFC,IADqF,CAC/EC,GAD+E,CAC1EC,IAD0E,CAClD,CACrC,MAAOJ,CAAAA,MAAM,CAACK,OAAP,CACHP,SAAS,CAACQ,aAAV,CAAwBL,KAAxB,CAA8BC,IAA9B,CAAoCC,GAApC,CAAyCC,IAAzC,EAA+CG,KAA/C,CAAqD,iBAAMP,CAAAA,MAAM,CAACQ,QAAP,CAAgBC,MAAhB,CAAuB,EAAvB,CAAN,EAArD,CADG,CAEH,SAACC,MAAD,CAASF,QAAT,QAAsBA,CAAAA,QAAQ,CAACC,MAAT,CAAgBC,MAAhB,CAAtB,EAFG,CAGH,OAHG,CAIH,CAACR,IAAD,CAAOC,GAAP,CAAYC,IAAZ,CAJG,CAAP,CAMH,CAR0F,CAS3FO,UAT2F,qBAShFC,OATgF,CASnD,CACpC,MAAOZ,CAAAA,MAAM,CAACQ,QAAP,CAAgBK,WAAhB,CAA4BD,OAA5B,CAAP,CACH,CAX0F,CAY3FE,UAZ2F,sBAYlE,CACrB,MAAOd,CAAAA,MAAM,CAACQ,QAAP,CAAgBO,cAAhB,CAA+B,QAA/B,CAAP,CACH,CAd0F,CAAL,EAAnF","sourcesContent":["import {IssuesData} from \"./issuesState$\";\nimport {IssuesReducers} from \"./issuesReducersFn\";\nimport {ActionsFn} from \"conan-js-core\";\nimport {diContext} from \"../context\";\nimport {Asap} from \"conan-js-core\";\nimport {Issue} from \"../api/gitHub\";\n\nexport interface IssuesActions {\n    fetch(repo: string, org: string, page: number): Asap<IssuesData>;\n\n    fetchIssue(issueId: number): IssuesData;\n\n    showIssues(): IssuesData;\n}\n\n\nexport const issueActionsFn: ActionsFn<IssuesData, IssuesReducers, IssuesActions> = thread => ({\n    fetch(repo, org, page): Asap<IssuesData> {\n        return thread.monitor(\n            diContext.issuesService.fetch(repo, org, page).catch(() => thread.reducers.$fetch([])),\n            (issues, reducers) => reducers.$fetch(issues as Issue[]),\n            'fetch',\n            [repo, org, page]\n        )\n    },\n    fetchIssue(issueId: number): IssuesData {\n        return thread.reducers.$fetchIssue(issueId);\n    },\n    showIssues(): IssuesData {\n        return thread.reducers.$switchDisplay(\"issues\");\n    }\n})\n"]},"metadata":{},"sourceType":"module"}