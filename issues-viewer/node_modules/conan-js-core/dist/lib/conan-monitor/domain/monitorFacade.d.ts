import { Reducers } from "../../conan-thread/domain/reducers";
import { Monitor, MonitorImpl } from "../logic/monitorImpl";
import { DataReactionDef, DataReactionLock } from "../../conan-thread/domain/dataReaction";
import { MonitorInfo } from "./monitorInfo";
import { DefaultStepFn } from "../../conan-flow/domain/steps";
import { FlowEventsTracker } from "../../conan-flow/logic/flowEventsTracker";
import { Context } from "../../conan-flow/domain/context";
import { ThreadFlow } from "../../conan-thread/factories/threads";
import { ThreadFacade } from "../../conan-thread/domain/threadFacade";
import { MonitorActions } from "./monitorActions";
export declare class MonitorFacade<DATA, REDUCERS extends Reducers<DATA> = {}, ACTIONS = any> implements Monitor<DATA, REDUCERS, ACTIONS> {
    private readonly monitor;
    readonly actions: ACTIONS;
    constructor(monitor: MonitorImpl<DATA, REDUCERS, ACTIONS>, actions: ACTIONS);
    start(): this;
    addAsyncReaction(def: DataReactionDef<MonitorInfo>): DataReactionLock;
    addReaction(def: DataReactionDef<DATA>): DataReactionLock;
    get do(): REDUCERS & DefaultStepFn<DATA> & ACTIONS;
    getEvents(): FlowEventsTracker<{
        nextData: DATA;
    }>;
    getName(): string;
    stop(eventsConsumer?: (events: any) => void): void;
    getData(): DATA;
    next(cb: (onNext: Context<ThreadFlow<DATA>, "nextData", {
        nextData: REDUCERS;
    }>) => void): void;
    get asyncThread(): ThreadFacade<MonitorInfo, {}, MonitorActions>;
    get mainThread(): ThreadFacade<DATA, REDUCERS, ACTIONS>;
    activateAsyncLog(): void;
}
