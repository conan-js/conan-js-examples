import { ThreadFlow } from "../factories/threads";
import { Context } from "../../conan-flow/domain/context";
import { Reducers } from "../domain/reducers";
import { IBiConsumer, IConsumer } from "../..";
import { Flow } from "../../conan-flow/domain/flow";
import { DefaultStepFn } from "../../conan-flow/domain/steps";
import { Asap } from "../../conan-utils/asap";
import { DataReactionDef, DataReactionLock } from "../domain/dataReaction";
import { FlowEventsTracker } from "../../conan-flow/logic/flowEventsTracker";
import { FlowEventNature } from "../../conan-flow/domain/flowRuntimeEvents";
export interface Thread<DATA, REDUCERS extends Reducers<DATA> = {}> {
    isRunning: boolean;
    reducers: REDUCERS & DefaultStepFn<DATA>;
    getData(): DATA;
    start(): this;
    next(cb: (onNext: Context<ThreadFlow<DATA>, 'nextData', {
        nextData: REDUCERS;
    }>) => void): void;
    stop(eventsConsumer: (events: any) => void): void;
    addReaction(def: DataReactionDef<DATA>): DataReactionLock;
    chain(mutatorsCb: IConsumer<REDUCERS>): Asap<DATA>;
    getEvents(): FlowEventsTracker<{
        nextData: DATA;
    }>;
    stop(eventsConsumer: (events: any) => void): void;
    getName(): string;
    changeLoggingNature(nature: FlowEventNature): void;
}
export declare class ThreadImpl<DATA, REDUCERS extends Reducers<DATA> = {}> implements Thread<DATA, REDUCERS> {
    private readonly flow;
    constructor(flow: Flow<ThreadFlow<DATA>, {
        nextData: REDUCERS;
    }>);
    start(initialData?: DATA): this;
    next(cb: (onNumberUpdated: Context<ThreadFlow<DATA>, 'nextData', {
        nextData: REDUCERS;
    }>) => void): void;
    stop(eventsConsumer: (events: any) => void): void;
    chain(mutatorsCb: IConsumer<REDUCERS & DefaultStepFn<DATA>>): Asap<DATA>;
    monitor<T>(toMonitor: Asap<T>, thenCallback: IBiConsumer<T, REDUCERS & DefaultStepFn<T>>, name?: string, payload?: any): Asap<DATA>;
    get isRunning(): boolean;
    get reducers(): REDUCERS & DefaultStepFn<DATA>;
    addReaction(def: DataReactionDef<DATA>): DataReactionLock;
    getData(): DATA;
    getEvents(): FlowEventsTracker<{
        nextData: DATA;
    }>;
    getName(): string;
    changeLoggingNature(nature: FlowEventNature): void;
}
