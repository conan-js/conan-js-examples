import { Thread } from "../logic/thread";
import { DefaultStepFn } from "../../conan-flow/domain/steps";
import { Reducers } from "./reducers";
import { IConsumer } from "../..";
import { Context } from "../../conan-flow/domain/context";
import { ThreadFlow } from "../factories/threads";
import { Asap } from "../../conan-utils/asap";
import { DataReactionDef, DataReactionLock } from "./dataReaction";
import { FlowEventsTracker } from "../../conan-flow/logic/flowEventsTracker";
import { DefaultActionsFn } from "../../conan-flow/domain/actions";
import { FlowEventNature } from "../../conan-flow/domain/flowRuntimeEvents";
export declare class ThreadFacade<DATA, REDUCERS extends Reducers<DATA> = {}, ACTIONS = void> implements Thread<DATA, REDUCERS> {
    readonly thread: Thread<DATA, REDUCERS>;
    readonly actions: ACTIONS;
    constructor(thread: Thread<DATA, REDUCERS>, actions: ACTIONS);
    chain(mutatorsCb: IConsumer<REDUCERS>): Asap<DATA>;
    next(cb: (onNumberUpdated: Context<ThreadFlow<DATA>, "nextData", {
        nextData: REDUCERS;
    }>) => void): void;
    start(): this;
    stop(eventsConsumer: (events: any) => void): this;
    get do(): REDUCERS & DefaultActionsFn<DATA> & ACTIONS & DefaultStepFn<DATA>;
    get reducers(): REDUCERS & DefaultStepFn<DATA>;
    addReaction(def: DataReactionDef<DATA>): DataReactionLock;
    get isRunning(): boolean;
    getData(): DATA;
    getEvents(): FlowEventsTracker<{
        nextData: DATA;
    }>;
    getName(): string;
    changeLoggingNature(nature: FlowEventNature): void;
}
