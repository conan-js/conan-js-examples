export class ThreadFacade {
    constructor(thread, actions) {
        this.thread = thread;
        this.actions = actions;
    }
    chain(mutatorsCb) {
        this.thread.chain(mutatorsCb);
        return undefined;
    }
    next(cb) {
        this.thread.next(cb);
    }
    start() {
        this.thread.start();
        return this;
    }
    stop(eventsConsumer) {
        this.thread.stop(eventsConsumer);
        return this;
    }
    get do() {
        let steps = this.reducers;
        return Object.assign(Object.assign({}, steps), this.actions);
    }
    get reducers() {
        return this.thread.reducers;
    }
    addReaction(def) {
        return this.thread.addReaction(def);
    }
    get isRunning() {
        return this.thread.isRunning;
    }
    getData() {
        return this.thread.getData();
    }
    getEvents() {
        return this.thread.getEvents();
    }
    getName() {
        return this.thread.getName();
    }
    changeLoggingNature(nature) {
        this.thread.changeLoggingNature(nature);
    }
}
//# sourceMappingURL=threadFacade.js.map