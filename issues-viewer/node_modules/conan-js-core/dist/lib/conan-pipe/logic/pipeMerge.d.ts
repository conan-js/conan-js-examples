import { Thread } from "../../conan-thread/logic/thread";
import { ThreadFlow } from "../../conan-thread/factories/threads";
import { DataReactionDef, DataReactionLock } from "../../conan-thread/domain/dataReaction";
import { IConsumer } from "../..";
import { Asap } from "../../conan-utils/asap";
import { FlowEventsTracker } from "../../conan-flow/logic/flowEventsTracker";
import { Context } from "../../conan-flow/domain/context";
import { DefaultStepFn } from "../../conan-flow/domain/steps";
import { ITriFunction } from "../../conan-utils/typesHelper";
import { ThreadFacade } from "../../conan-thread/domain/threadFacade";
import { DefaultActionsFn } from "../../conan-flow/domain/actions";
import { PipeThreadDef } from "../domain/pipeThreadDef";
export declare class PipeMerge<LEFT, RIGHT, MERGED, ACTIONS = void> implements ThreadFacade<MERGED, {}, ACTIONS> {
    private readonly name;
    private readonly base;
    private readonly leftThread;
    private readonly leftMapper;
    private readonly rightThread;
    private readonly rightMapper;
    private readonly pipeThreadDef?;
    private baseThread;
    private lastLeftData;
    private lastRightData;
    constructor(name: string, base: MERGED, leftThread: Thread<LEFT>, leftMapper: ITriFunction<LEFT, RIGHT, MERGED, MERGED>, rightThread: Thread<RIGHT>, rightMapper: ITriFunction<RIGHT, LEFT, MERGED, MERGED>, pipeThreadDef?: PipeThreadDef<MERGED, ACTIONS>);
    addReaction(def: DataReactionDef<MERGED>): DataReactionLock;
    chain(mutatorsCb: IConsumer<{}>): Asap<MERGED>;
    getData(): MERGED;
    getEvents(): FlowEventsTracker<{
        nextData: MERGED;
    }>;
    getName(): string;
    next(cb: (onNext: Context<ThreadFlow<MERGED>, "nextData", {
        nextData: {};
    }>) => void): void;
    start(): this;
    stop(eventsConsumer: (events: any) => void): this;
    get reducers(): DefaultStepFn<MERGED>;
    get do(): DefaultActionsFn<MERGED> & ACTIONS & DefaultStepFn<MERGED>;
    get isRunning(): boolean;
    get actions(): ACTIONS;
    get thread(): Thread<MERGED>;
}
