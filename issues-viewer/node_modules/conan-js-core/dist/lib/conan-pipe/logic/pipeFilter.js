import { Threads } from "../../conan-thread/factories/threads";
export class PipeFilter {
    constructor(fromThread, filter, name, base) {
        this.fromThread = fromThread;
        this.filter = filter;
        this.name = name;
        this.base = base;
    }
    addReaction(def) {
        return this.baseThread.addReaction(def);
    }
    chain(mutatorsCb) {
        return this.baseThread.chain(mutatorsCb);
    }
    getData() {
        return this.baseThread.getData();
    }
    getEvents() {
        return this.baseThread.getEvents();
    }
    getName() {
        return this.baseThread.getName();
    }
    next(cb) {
        this.baseThread.next(cb);
    }
    start() {
        if (this.baseThread == null) {
            this.baseThread = Threads.create({
                name: this.name,
                initialData: this.base
            });
            this.fromThread.addReaction({
                name: undefined,
                dataConsumer: (data) => {
                    if (this.filter(data, this.lastState)) {
                        this.lastState = data;
                        this.reducers.$update(data);
                    }
                },
            });
        }
        else {
            this.baseThread.start();
        }
        return this;
    }
    stop(eventsConsumer) {
        this.baseThread.stop(undefined);
    }
    get reducers() {
        return this.baseThread.reducers;
    }
    get isRunning() {
        return this.baseThread.isRunning;
    }
}
//# sourceMappingURL=pipeFilter.js.map