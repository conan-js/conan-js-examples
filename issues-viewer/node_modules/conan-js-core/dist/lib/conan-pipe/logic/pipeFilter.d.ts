import { Thread } from "../../conan-thread/logic/thread";
import { DataReactionDef, DataReactionLock } from "../../conan-thread/domain/dataReaction";
import { IBiFunction, IConsumer } from "../..";
import { Asap } from "../../conan-utils/asap";
import { FlowEventsTracker } from "../../conan-flow/logic/flowEventsTracker";
import { Context } from "../../conan-flow/domain/context";
import { ThreadFlow } from "../../conan-thread/factories/threads";
import { DefaultStepFn } from "../../conan-flow/domain/steps";
export declare class PipeFilter<DATA> implements Thread<DATA> {
    private readonly fromThread;
    private readonly filter;
    private readonly name;
    private readonly base;
    private baseThread;
    private lastState;
    constructor(fromThread: Thread<DATA>, filter: IBiFunction<DATA, DATA, boolean>, name: string, base: DATA);
    addReaction(def: DataReactionDef<DATA>): DataReactionLock;
    chain(mutatorsCb: IConsumer<{}>): Asap<DATA>;
    getData(): DATA;
    getEvents(): FlowEventsTracker<{
        nextData: DATA;
    }>;
    getName(): string;
    next(cb: (onNext: Context<ThreadFlow<DATA>, "nextData", {
        nextData: {};
    }>) => void): void;
    start(): this;
    stop(eventsConsumer: (events: any) => void): void;
    get reducers(): DefaultStepFn<DATA>;
    get isRunning(): boolean;
}
