import * as React from "react";
import { StateConnect } from "../connect/stateConnect";
import { ContextStateConnect } from "../connect/contextStateConnectMap";
export const ContextStateLive = (props) => {
    const LiveRenderer = (propsLive) => {
        return props.renderer(propsLive.data, propsLive.actions);
    };
    return (React.createElement(ContextStateConnect, { into: LiveRenderer, fallbackValue: props.fallbackValue }));
};
export const StateLive = (props) => {
    const LiveRenderer = (propsLive) => {
        let result = props.renderer(propsLive.data, propsLive.actions);
        return Array.isArray(result) ? (React.createElement(React.Fragment, null, result)) : result;
    };
    return (React.createElement(StateConnect, { from: props.from, into: LiveRenderer, fallbackValue: props.fallbackValue }));
};
export const contextStateLive = (renderer, fallbackValue) => {
    const LiveRenderer = (props) => {
        let result = renderer(props.data, props.actions);
        return Array.isArray(result) ? (React.createElement(React.Fragment, null, result)) : result;
    };
    return React.createElement(ContextStateConnect, { into: LiveRenderer, fallbackValue: fallbackValue });
};
export const stateLive = (from, renderer, fallbackValue) => {
    const LiveRenderer = (props) => {
        let result = renderer(props.data, props.actions);
        return Array.isArray(result) ? (React.createElement(React.Fragment, null, result)) : result;
    };
    return React.createElement(StateConnect, { from: from, into: LiveRenderer, fallbackValue: fallbackValue });
};
//# sourceMappingURL=stateLive.js.map