import * as React from "react";
import { useContext, useEffect, useState } from "react";
import { ReactStateContext } from "./stateConnect";
export function useFlow(flow, setState, mapper) {
    useEffect(() => {
        flow.reactOnStatusChanged(status => {
            setState((previousUserState) => {
                return mapper ? mapper(status, previousUserState) : status.name;
            });
        });
    }, []);
}
export function useFlowStatus(flow, status, setState, mapper) {
    useEffect(() => {
        flow.alwaysOn(status, context => {
            setState(previousState => {
                return mapper ? mapper(context.getData(), previousState) : context.getData();
            });
        });
    }, []);
}
export function useConantState(state, fallbackValue) {
    let lastData = state.getData();
    const [compState, compStateSetter] = useState(lastData == null ? fallbackValue : lastData);
    useEffect(() => {
        const lock = state.addDataReaction({
            dataConsumer: compStateSetter,
            name: `useConanState[${state.getName()}]`
        });
        return () => lock.release();
    }, []);
    return [compState, state.actions, ({ children }) => {
            return React.createElement(ReactStateContext.Provider, { value: state }, children);
        }];
}
export function useContextConantState() {
    const state$ = useContext(ReactStateContext);
    let result = useConantState(state$);
    return [result[0], result[1]];
}
//# sourceMappingURL=conanHooks.js.map