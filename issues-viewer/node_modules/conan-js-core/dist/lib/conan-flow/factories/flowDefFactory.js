import { Objects } from "../../conan-utils/objects";
import { MutatorsFactory } from "./mutatorsFactory";
import { $INIT, $STOP } from "../domain/flow";
import { ReactionType } from "../domain/reactions";
import { ReactionDefLikeParser } from "../def/reactionDef";
import { FlowEventNature } from "../domain/flowRuntimeEvents";
export class FlowDefFactory {
    static create(userFlowDef, flowAnchor) {
        let statusesByStatusName = FlowDefFactory.statusesByName(userFlowDef.statuses, flowAnchor);
        statusesByStatusName[$INIT] = {
            name: $INIT,
            steps: MutatorsFactory.createDefaultSteps($INIT, flowAnchor),
            transitions: MutatorsFactory.createTransitions($INIT, flowAnchor),
            reactions: userFlowDef.$onInit ?
                userFlowDef.$onInit.map(it => (ReactionDefLikeParser.parse(it, ReactionType.ALWAYS, `on init`))) : [],
        };
        statusesByStatusName[$STOP] = {
            name: $STOP,
            steps: MutatorsFactory.createDefaultSteps($STOP, flowAnchor),
            transitions: MutatorsFactory.createTransitions($STOP, flowAnchor),
            reactions: userFlowDef.$onStop ?
                userFlowDef.$onStop.map(it => (ReactionDefLikeParser.parse(it, ReactionType.ALWAYS, `on stop`))) : [],
        };
        return Object.assign(Object.assign({ statusesByStatusName: statusesByStatusName, name: userFlowDef.name, nature: userFlowDef.nature ? userFlowDef.nature : FlowEventNature.MAIN }, userFlowDef.hasOwnProperty('initialStatus') ? { starter: () => userFlowDef.initialStatus } : undefined), userFlowDef.hasOwnProperty('logger') ? { logger: userFlowDef.logger } : undefined);
    }
    static statusesByName(userStatusesDefLike, flowAnchor) {
        let statusesByName = {};
        if (Array.isArray(userStatusesDefLike)) {
            userStatusesDefLike.forEach(it => {
                statusesByName[it] = {
                    name: it,
                    steps: [],
                    reactions: [],
                };
            });
        }
        else {
            Objects.foreachEntry(userStatusesDefLike, (value, key) => {
                statusesByName[key] = {
                    name: key,
                    steps: MutatorsFactory.createSteps(key, flowAnchor, value.steps),
                    transitions: MutatorsFactory.createTransitions(key, flowAnchor, value.transitions),
                    reactions: value.reactions ?
                        value.reactions.map(it => ReactionDefLikeParser.parse(it, ReactionType.ALWAYS, `on[${key}]`)) :
                        [],
                    getLastData: flowAnchor.getDataFn(key)
                };
            });
        }
        return statusesByName;
    }
}
//# sourceMappingURL=flowDefFactory.js.map