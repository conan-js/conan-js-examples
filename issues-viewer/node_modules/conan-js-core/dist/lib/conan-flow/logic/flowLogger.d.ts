import { FlowEvent, FlowEventType } from "../domain/flowRuntimeEvents";
import { Rule } from "../../conan-utils/rules/_rules";
import { IConsumer, IFunction, IProducer, IReducer } from "../..";
export declare class FlowLogger {
    private readonly Rule$;
    constructor(Rule$: IProducer<Rule<FlowEvent>>);
    log(event: FlowEvent): boolean;
}
export declare class LoggerFilters {
    static trace(): Rule<FlowEvent>;
    static debug(): Rule<FlowEvent>;
    static milestone(): Rule<FlowEvent>;
    static info(): Rule<FlowEvent>;
    static logName(logName: string): Rule<FlowEvent>;
    static mainLogName(logName: string): Rule<FlowEvent>;
    static asyncLogName(logName: string): Rule<FlowEvent>;
    static metaLogName(logName: string): Rule<FlowEvent>;
    static eventType(eventType: FlowEventType): Rule<FlowEvent>;
    static statusName(statusName: string): Rule<FlowEvent>;
    static notInitialising(): Rule<FlowEvent>;
    static initialising(): Rule<FlowEvent>;
    static nextData(): Rule<FlowEvent>;
    static aux(): Rule<FlowEvent>;
    static async(): Rule<FlowEvent>;
    static helper(): Rule<FlowEvent>;
    static main(): Rule<FlowEvent>;
    static all(): Rule<FlowEvent>;
    static fromInfo(): Rule<FlowEvent>;
    static allExceptTraces(): Rule<FlowEvent>;
    static never(): Rule<FlowEvent>;
    static default(): Rule<FlowEvent>;
}
export declare const FLOW_LOGGER: FlowLogger;
export declare const updateLoggingFilter: IFunction<IReducer<Rule<FlowEvent>>, Rule<FlowEvent>>;
export declare const setLoggingFilter: IConsumer<Rule<FlowEvent>>;
export declare const getLoggingFilter: IProducer<Rule<FlowEvent>>;
