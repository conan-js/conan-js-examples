import { StatusDataProducer } from "../domain/flowEvents";
import { Status } from "../domain/status";
import { IProducer } from "../../index";
import { FlowThread, OnContextProxyParams } from "./flowThread";
import { Mutators, VoidMutators } from "../domain/mutators";
import { FlowOrchestrator } from "./flowOrchestrator";
import { FlowImpl } from "./flowImpl";
import { FlowEventsTracker } from "./flowEventsTracker";
export declare enum BindBackType {
    STEP = "STEP",
    TRANSITION = "TRANSITION"
}
export interface CurrentThread<STATUSES, MUTATORS extends Mutators<STATUSES> = VoidMutators<STATUSES>> {
    flowEvents: FlowEventsTracker<STATUSES>;
    flowThread: FlowThread<STATUSES, MUTATORS>;
}
export declare class FlowAnchor<STATUSES, MUTATORS extends Mutators<STATUSES> = VoidMutators<STATUSES>> {
    currentThread: CurrentThread<STATUSES, MUTATORS>;
    createNewThread(flowController: FlowImpl<STATUSES, MUTATORS>, flowOrchestrator: FlowOrchestrator): FlowThread<STATUSES, MUTATORS>;
    getCurrentEvents(): FlowEventsTracker<STATUSES>;
    get currentStatus(): Status;
    getStatusDataProducerFn(): StatusDataProducer<STATUSES>;
    getDataFn<STATUS extends keyof STATUSES>(status: STATUS): IProducer<STATUSES[STATUS]>;
    bindBack<STATUS extends keyof STATUSES>(expectedStatusName: STATUS, param: OnContextProxyParams, type: BindBackType): void;
    getStatusData(): {
        [STATUS in keyof STATUSES]?: STATUSES[STATUS];
    };
}
