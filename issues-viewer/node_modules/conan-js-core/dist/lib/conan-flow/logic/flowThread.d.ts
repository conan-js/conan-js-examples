import { Status, StatusLike } from "../domain/status";
import { FlowRequest, StatusRequest } from "./flowRequest";
import { ICallback, IConsumer } from "../../index";
import { Transition } from "../domain/transitions";
import { Context } from "../domain/context";
import { ReactionDef } from "../def/reactionDef";
import { Mutators, VoidMutators } from "../domain/mutators";
import { FlowOrchestrator } from "./flowOrchestrator";
import { FlowImpl } from "./flowImpl";
import { FlowEventsTracker } from "./flowEventsTracker";
export interface OnContextProxyParams {
    statusName: string;
    methodName: string;
    payload: any;
    result: any;
}
export declare class FlowThread<STATUSES, MUTATORS extends Mutators<STATUSES> = VoidMutators<STATUSES>> {
    readonly flowController: FlowImpl<STATUSES, MUTATORS>;
    readonly flowOrchestrator: FlowOrchestrator;
    private readonly flowEvents;
    private ids;
    currentRequest: FlowRequest;
    constructor(flowController: FlowImpl<STATUSES, MUTATORS>, flowOrchestrator: FlowOrchestrator, flowEvents: FlowEventsTracker<STATUSES>);
    requestStatus(statusLike: StatusLike, isStep: boolean): void;
    requestTransition(transition: Transition, isStep: boolean): this;
    requestStep(statusName: string, reducerName: string, payload: any, data: any): void;
    requestState(statusName: string, data: any): void;
    tryToQueue(eventName: string, reaction: ReactionDef<any, any, any>): boolean;
    private onTransitionRequested;
    private getNextId;
    processStateAndReactions(statusRequest: StatusRequest, isStep: boolean): void;
    flagAsSettled(statusRequest: StatusRequest, isStep: boolean): void;
    onStateRequestCompleted(stateMachineRequest: FlowRequest, queuedReactions: [string, ReactionDef<any, any>][], queuedStatuses: Status[], queuedStates: Status[], queuedTransitions: Transition[], queuedSteps: Transition[]): void;
    createContext<STATUS extends keyof STATUSES>(statusLike: STATUS, doChain: IConsumer<ICallback>): Context<STATUSES, STATUS, MUTATORS>;
    getCurrentStatusName(): string;
    getCurrentState(): any;
    private assertValidStatus;
}
