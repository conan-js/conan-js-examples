import { DiMetadata } from './annotations/diAnnotationsDomain';
import { DiRuntime } from './diRuntime';
import { DiInvocation, Injectable, InvocationResult } from './diDomain';
import { DiInvocationFactory } from './diInvocationBuilder';
import { KeyValueCache } from "../../conan-utils/keyValueCache";
import { IBiFunction, IKeyValuePairs } from "../../conan-utils/typesHelper";
export declare class DiInvocationResolver {
    private readonly diInvocationFactory;
    private readonly diCache;
    private readonly diEnricher;
    constructor(diInvocationFactory: DiInvocationFactory, diCache: KeyValueCache, diEnricher: IBiFunction<DiMetadata, any, any> | null);
    resolve<T, P>(invocation: DiInvocation<P>, context: IKeyValuePairs<Injectable<any>>, diRuntime: DiRuntime): InvocationResult<T>;
    private causesCircularDependency;
    private doCreate;
    private static addValueToKeyValuePairs;
    private static addValuesToKeyValuePairs;
    private invokeChildren;
    private resolveParamDef;
    private invokeChild;
    private resolveChildProps;
    private resolveChildByType;
    private resolveDynamicChild;
    private resolveChildByName;
}
