import { Flows } from "../conan-flow/factories/flows";
export var AsapType;
(function (AsapType) {
    AsapType["NOW"] = "NOW";
    AsapType["LATER"] = "LATER";
})(AsapType || (AsapType = {}));
function isPromise(toParse) {
    if (toParse == null)
        return false;
    if (typeof toParse != "object")
        return false;
    return ('then' in toParse) && typeof (toParse.then) === 'function';
}
export function isAsap(toParse) {
    return (toParse instanceof NowImpl) || (toParse instanceof LaterImpl);
}
class NowImpl {
    constructor(rawValue) {
        this.rawValue = rawValue;
        this.type = AsapType.NOW;
    }
    cancel() {
        return false;
    }
    then(consumer) {
        consumer(this.rawValue);
        return this;
    }
    map(mapper) {
        return Asaps.now(mapper(this.rawValue));
    }
    merge(mapper) {
        const [next, asap] = Asaps.next();
        this.then(value => mapper(value).then(toMerge => next(toMerge)));
        return asap;
    }
    catch(error) {
        //Since is not async, it would never fail
        return this;
    }
    onCancel(consumer) {
        //Since is not async, it would never cancel
        return this;
    }
}
class LaterImpl {
    constructor(flow) {
        this.flow = flow;
        this.type = AsapType.LATER;
    }
    map(mapper) {
        let [setNext, nextAsap] = Asaps.next();
        this.then(value => setNext(mapper(value)));
        this.onCancel(() => nextAsap.cancel());
        return nextAsap;
    }
    then(consumer) {
        if (this.flow.getCurrentStatusName() === 'resolved') {
            consumer(this.flow.on('resolved').getLastData());
        }
        else {
            this.flow.on('resolving').steps.$update((current) => (Object.assign(Object.assign({}, current), { then: [...current.then, consumer] })));
        }
        return this;
    }
    resolve(value) {
        if (this.flow.getCurrentStatusName() === 'cancelled')
            return;
        try {
            this.flow.assertOn('resolving', (onResolving) => {
                onResolving.getData().then.forEach(subscriber => {
                    subscriber(value);
                });
                this.flow.on('resolving').transitions.$toStatus({
                    name: "resolved",
                    data: value
                });
            });
        }
        catch (e) {
            console.error(e);
            this.flow.assertOn('resolving', (onResolving) => {
                onResolving.getData().catch.forEach(subscriber => {
                    subscriber(e, value);
                });
                onResolving.do.$toStatus({ name: "errored", data: value });
            });
        }
    }
    onCancel(consumer) {
        if (this.flow.getCurrentStatusName() === 'cancelled') {
            consumer();
            return;
        }
        if (this.flow.getCurrentStatusName() === 'resolving') {
            this.flow.on('resolving').steps.$update((current) => (Object.assign(Object.assign({}, current), { onCancel: [...current.onCancel, consumer] })));
        }
        return this;
    }
    cancel() {
        if (this.flow.getCurrentStatusName() !== 'resolving') {
            return false;
        }
        this.flow.assertOn('resolving', onResolving => {
            onResolving.getData().onCancel.forEach(subscriber => {
                subscriber();
            });
            this.flow.on('resolving').transitions.$toStatus({ name: "cancelled", });
        });
        return true;
    }
    merge(mapper) {
        const [next, asap] = Asaps.next();
        this.then(value => mapper(value)
            .then(toMerge => next(toMerge))
            .onCancel(() => asap.cancel())).onCancel(() => asap.cancel());
        return asap;
    }
    catch(consumer) {
        if (this.flow.getCurrentStatusName() === 'resolving') {
            this.flow.on('resolving').steps.$update((current) => (Object.assign(Object.assign({}, current), { catch: [...current.catch, consumer] })));
        }
        return this;
    }
}
export class AsapParser {
    static from(toParse) {
        return isAsap(toParse) ?
            toParse :
            isPromise(toParse) ?
                Asaps.fromPromise(toParse) :
                Asaps.now(toParse);
    }
}
export class Asaps {
    static now(value) {
        return new NowImpl(value);
    }
    static fromPromise(promise) {
        let promiseImpl = new LaterImpl(Flows.createController({
            name: 'next-promise',
            statuses: {
                resolving: {},
                resolved: {},
                errored: {},
                cancelled: {}
            },
            initialStatus: {
                name: 'resolving',
                data: {
                    then: [],
                    catch: [],
                    onCancel: [],
                }
            }
        }).start());
        promise.then(value => promiseImpl.resolve(value));
        promise.catch(e => promiseImpl.catch(e));
        return promiseImpl;
    }
    static delayed(value, ms) {
        return Asaps.fromPromise(new Promise((done) => setTimeout(() => done(value), ms)));
    }
    static fetch(url) {
        return Asaps.fromPromise(new Promise((done) => {
            fetch(url)
                .then((resp) => resp.json()) // Transform the data into json
                .then(function (data) {
                done(data);
            });
        }));
    }
    static next() {
        let laterImpl = new LaterImpl(Flows.createController({
            name: 'next-promise',
            statuses: {
                resolving: {},
                resolved: {},
                errored: {},
                cancelled: {}
            },
            initialStatus: {
                name: 'resolving',
                data: {
                    then: [],
                    catch: [],
                    onCancel: []
                }
            }
        }).start());
        return [(value) => laterImpl.resolve(value), laterImpl];
    }
}
//# sourceMappingURL=asap.js.map