import { IFunction, IPredicate } from "../typesHelper";
import { Rule, RuleLike } from "./_rules";
export declare class BaseRules {
    static if<T>(name: string, predicate: IPredicate<T>): Rule<T>;
    static ifNot<T>(name: string, predicate: IPredicate<T>): Rule<T>;
    static ifUndefined(): Rule;
    static ifNull(): Rule;
    static ifNullUn(): Rule;
    static ifInitialised(): Rule;
    static compareByReference(name: string, toCompareWith: any): Rule;
    static combineAnd<T>(name: string, ...rules: RuleLike<T>[]): Rule<T>;
    static combineOr<T>(name: string, ...rules: RuleLike<T>[]): Rule<T>;
    static join<FROM, INTO>(mapper: IFunction<FROM, INTO>, joiner: Rule<INTO>): Rule<FROM>;
}
