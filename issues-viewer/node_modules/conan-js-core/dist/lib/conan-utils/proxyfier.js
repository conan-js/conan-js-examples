export class Proxyfier {
    static proxy(from, enricher) {
        let proxy = {};
        let prototype = Object.getPrototypeOf(from);
        let methodHost = prototype.constructor.name === 'Object' ? from : prototype;
        let ownPropertyNames = Object.getOwnPropertyNames(methodHost);
        ownPropertyNames.forEach(key => {
            if (key === 'constructor')
                return;
            let toProxy = methodHost[key];
            if (typeof toProxy !== 'function')
                return;
            proxy[key] = (...payload) => {
                let originalCall = () => from[key](...payload);
                return enricher(originalCall, {
                    methodName: key,
                    payload
                });
            };
        });
        return proxy;
    }
}
//# sourceMappingURL=proxyfier.js.map