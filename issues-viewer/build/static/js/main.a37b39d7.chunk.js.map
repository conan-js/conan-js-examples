{"version":3,"sources":["components/RepoSearchForm.tsx","components/UserWithAvatar.tsx","components/IssueLabels.tsx","components/IssueListItem.tsx","components/IssuesList.tsx","state/issuesState$.ts","state/issuesReducersFn.ts","state/issueActionsFn.ts","services/issuesService.ts","state/issuesCommentState$.ts","state/issuesCommentsReducersFn.ts","state/issueCommentsActionsFn.ts","state/repoState$.ts","state/repoDetailsState$.ts","context.ts","features/issuesList/IssuesPageHeader.tsx","features/issuesList/IssuesListPage.tsx","features/issueDetails/IssueMeta.tsx","features/issueDetails/IssueComments.tsx","features/issueDetails/IssueDetailsPage.tsx","utils/stringUtils.ts","app.tsx","index.tsx"],"names":["RepoSearchForm","org","repo","page","setOrgAndRepo","setJumpToPage","useState","currentOrg","setCurrentOrg","currentRepo","setCurrentRepo","currentPageText","setCurrentPageText","htmlFor","style","marginRight","name","value","onChange","e","target","marginLeft","type","onClick","marginTop","newPage","parseInt","UserWithAvatar","user","orientation","link","contents","classes","src","avatar_url","alt","login","href","IssueLabels","labels","className","map","label","key","id","boxShadow","color","borderColor","IssueListItem","number","title","comments","body","showIssueComments","pluralizedComments","preventDefault","stopPropagation","IssuesList","data","actions","issues","renderedIssues","issue","fetchIssue","issuesState$","Conan","state","initialData","issuesByNumber","displayType","reducers","getState","$fetch","forEach","$fetchIssue","issueId","$switchDisplay","thread","fetch","monitor","diContext","issuesService","catch","chain","showIssues","IssuesServiceImpl","Asaps","commentsUrl","issuesCommentsState$","commentsByIssue","$fetchComments","fetchComments","comments_url","repoState$","light","repoDetailsState$","openIssuesCount","error","$fetchRepoDetails","fetchRepoDetails","repoDetails","open_issues_count","DiContextFactory","createContext","issuesCommentsState","issuesState","repoState","repoDetailsState","OrgRepo","IssuesPageHeader","pluralizedIssue","IssuesListPage","fetchIssues","useEffect","connectMap","connect","IssueState","IssueNumber","IssueMeta","IssueCommentDisplay","comment","IssueComments","length","IssueDetailsPage","showIssuesList","useConanState","commentsState","renderedComments","backToIssueListButton","content","replace","IssuesViewerApp","connectData","IssuesViewer","repoData","do","update","current","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a37b39d7.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {ChangeEvent, useState} from \"react\";\n\ninterface Props {\n    org: string\n    repo: string\n    page: number\n    setOrgAndRepo: (org: string, repo: string) => void\n    setJumpToPage: (page: number) => void\n}\n\ntype InputEvent = ChangeEvent<HTMLInputElement>\ntype ChangeHandler = (e: InputEvent) => void\n\nexport const RepoSearchForm = ({\n                                   org,\n                                   repo,\n                                   page,\n                                   setOrgAndRepo,\n                                   setJumpToPage,\n                               }: Props) => {\n    const [currentOrg, setCurrentOrg] = useState(org)\n    const [currentRepo, setCurrentRepo] = useState(repo)\n    const [currentPageText, setCurrentPageText] = useState('' + page)\n\n    const onOrgChanged: ChangeHandler = e => {\n        setCurrentOrg(e.target.value)\n    }\n\n    const onRepoChanged: ChangeHandler = e => {\n        setCurrentRepo(e.target.value)\n    }\n\n    const onCurrentPageChanged: ChangeHandler = e => {\n        setCurrentPageText(e.target.value)\n    }\n\n    const onLoadRepoClicked = () => {\n        setOrgAndRepo(currentOrg, currentRepo)\n    }\n\n    const onJumpToPageClicked = () => {\n        const newPage = parseInt(currentPageText)\n\n        if (newPage >= 1) {\n            setJumpToPage(newPage)\n        }\n    }\n\n    return (\n        <form>\n            <div>\n                <label htmlFor=\"org\" style={{marginRight: 5}}>\n                    Org:\n                </label>\n                <input name=\"org\" value={currentOrg} onChange={onOrgChanged}/>\n                <label htmlFor=\"repo\" style={{marginRight: 5, marginLeft: 10}}>\n                    Repo:\n                </label>\n                <input name=\"repo\" value={currentRepo} onChange={onRepoChanged}/>\n                <button\n                    type=\"button\"\n                    style={{marginLeft: 5}}\n                    onClick={onLoadRepoClicked}\n                >\n                    Load Repo\n                </button>\n            </div>\n            <div style={{marginTop: 5}}>\n                <label htmlFor=\"jumpToPage\" style={{marginRight: 5}}>\n                    Issues Page:\n                </label>\n                <input\n                    name=\"jumpToPage\"\n                    value={currentPageText}\n                    onChange={onCurrentPageChanged}\n                />\n                <button\n                    type=\"button\"\n                    style={{marginLeft: 5}}\n                    onClick={onJumpToPageClicked}\n                >\n                    Jump to Page\n                </button>\n            </div>\n        </form>\n    )\n}\n","import * as React from \"react\";\nimport {User} from \"../api/gitHub\";\n\n\ninterface UserAvatarProps {\n  user: User\n  orientation?: 'vertical' | 'horizontal'\n  link?: boolean\n  classes?: { [key: string]: string }\n}\n\nexport const UserWithAvatar = ({\n                                 user,\n                                 orientation = 'vertical',\n                                 link = true,\n                                 classes = {}\n                               }: UserAvatarProps) => {\n\n\n  const contents = (\n      <React.Fragment>\n        <img src={user.avatar_url} alt=\"\"/>\n        <div>{user.login}</div>\n      </React.Fragment>\n  )\n\n  if (link) {\n    return (\n        <a href={`https://github.com/${user.login}`}>\n          {contents}\n        </a>\n    )\n  } else {\n    return <span>{contents}</span>\n  }\n}\n","import * as React from \"react\";\nimport {Label} from \"../api/gitHub\";\n\ninterface IssueLabelsProps {\n  labels: Label[]\n  className?: string\n}\n\nexport const IssueLabels = ({labels, className}: IssueLabelsProps) => (\n    <div>\n      {labels.map(label => (\n          <span\n              key={label.id}\n              className=\"issue__label\"\n              style={{\n                boxShadow: `0 0 2px #${label.color}`,\n                borderColor: `#${label.color}`\n              }}\n          >\n        {label.name}\n      </span>\n      ))}\n    </div>\n)\n","import * as React from \"react\";\nimport {Issue} from \"../api/gitHub\";\nimport {UserWithAvatar} from \"./UserWithAvatar\";\nimport {IssueLabels} from \"./IssueLabels\";\n\n\ntype Props = Issue & {\n  showIssueComments: (issueId: number) => void\n}\n\nexport const IssueListItem = ({\n                                number,\n                                title,\n                                labels,\n                                user,\n                                comments,\n                                body = '',\n                                showIssueComments\n                              }: Props) => {\n  const onIssueClicked = (e: any) => {\n    e.preventDefault()\n    e.stopPropagation()\n    showIssueComments(number)\n  }\n\n  const pluralizedComments = comments === 1 ? 'comment' : 'comments'\n\n  return (\n      <div>\n        <UserWithAvatar user={user}/>\n        <div className=\"issue__body\">\n          <a href=\"#comments\" onClick={onIssueClicked}>\n            <span>#{number}</span>\n            <span>{title}</span>\n          </a>\n          <br/> ({comments} {pluralizedComments})\n          <p className=\"issue__summary\">{body}</p>\n            <IssueLabels labels={labels}/>\n        </div>\n      </div>\n  )\n}\n","import * as React from \"react\";\nimport {IssueListItem} from \"./IssueListItem\";\nimport {ConnectedState} from \"conan-js-core\";\nimport {IssuesData} from \"../state/issuesState$\";\nimport {IssuesActions} from \"../state/issueActionsFn\";\n\n\nexport const IssuesList = ({data, actions}: ConnectedState<IssuesData, IssuesActions>) => {\n    if (data.issues != null && data.issues.map != null) {\n        let renderedIssues = data.issues.map(issue => (\n            <li key={issue.id}>\n                <IssueListItem {...issue} showIssueComments={actions.fetchIssue}/>\n            </li>\n        ))\n        return <ul>{renderedIssues}</ul>\n    } else {\n        return <></>;\n    }\n}\n","import {Issue} from \"../api/gitHub\";\nimport {Conan} from \"conan-js-core\";\nimport {ConanState} from \"conan-js-core\";\nimport {IssuesReducers, issuesReducersFn} from \"./issuesReducersFn\";\nimport {issueActionsFn, IssuesActions} from \"./issueActionsFn\";\n\n\nexport type IssuesState = ConanState<IssuesData, IssuesActions>;\n\nexport interface IssuesData {\n    issuesByNumber: Record<number, Issue>;\n    issues: Issue[];\n    issueId?: number;\n    displayType: 'issues' | 'comments';\n}\n\nexport const issuesState$: IssuesState = Conan.state<IssuesData, IssuesReducers, IssuesActions>({\n    name: 'issues',\n    initialData: {\n        issuesByNumber: {} as Record<number, Issue>,\n        issues: [],\n        displayType: \"issues\"\n    },\n    reducers: issuesReducersFn,\n    actions: issueActionsFn\n})\n","import {Issue} from \"../api/gitHub\";\nimport {IssuesData} from \"./issuesState$\";\nimport {Reducers, ReducersFn} from \"conan-js-core\";\n\n\nexport interface IssuesReducers extends Reducers<IssuesData> {\n    $fetch(issues: Issue[]): IssuesData;\n\n    $fetchIssue(issueId: number): IssuesData;\n\n    $switchDisplay(displayType: 'issues' | 'comments'): IssuesData;\n}\n\nexport const issuesReducersFn: ReducersFn<IssuesData, IssuesReducers> = (getState) => ({\n    $fetch: (issues: Issue[]): IssuesData => {\n        issues.forEach(issue => {\n            getState().issuesByNumber[issue.number] = issue\n        })\n        return {\n            ...getState(),\n            issues: issues,\n            displayType: 'issues'\n        }\n    },\n    $fetchIssue: (issueId: number): IssuesData => ({\n        ...getState(),\n        issueId: issueId,\n        displayType: 'comments'\n    }),\n    $switchDisplay(displayType): IssuesData {\n        return {\n            ...getState(),\n            displayType: displayType\n        }\n    }\n})\n","import {IssuesData} from \"./issuesState$\";\nimport {IssuesReducers} from \"./issuesReducersFn\";\nimport {ActionsFn} from \"conan-js-core\";\nimport {diContext} from \"../context\";\nimport {Asap} from \"conan-js-core\";\nimport {Issue} from \"../api/gitHub\";\n\nexport interface IssuesActions {\n    fetch(repo: string, org: string, page: number): Asap<IssuesData>;\n\n    fetchIssue(issueId: number): Asap<IssuesData>;\n\n    showIssues(): Asap<IssuesData>;\n}\n\n\nexport const issueActionsFn: ActionsFn<IssuesData, IssuesReducers, IssuesActions> = thread => ({\n    fetch(repo, org, page): Asap<IssuesData> {\n        return thread.monitor(\n            diContext.issuesService.fetch(repo, org, page).catch(() => thread.reducers.$fetch([])),\n            (issues, reducers) => reducers.$fetch(issues as Issue[]),\n            'fetch',\n            [repo, org, page]\n        )\n    },\n    fetchIssue(issueId: number): Asap<IssuesData> {\n        return thread.chain(reducers=>reducers.$fetchIssue(issueId))\n    },\n    showIssues(): Asap<IssuesData> {\n        return thread.chain(reducers=>reducers.$switchDisplay(\"issues\"))\n    }\n})\n","import {Issue, IssueComment, RepoDetails} from \"../api/gitHub\";\nimport {Asap, Asaps} from \"conan-js-core\";\n\nexport interface IssuesService {\n    fetch(repo: string, org: string, page: number): Asap<Issue[]>;\n\n    fetchComments(commentsUrl: string): Asap<IssueComment[]>;\n\n    fetchRepoDetails(org: string, repo: string): Asap<RepoDetails>;\n}\n\nexport class IssuesServiceImpl implements IssuesService {\n    fetch(repo: string, org: string, page: number = 1): Asap<Issue[]> {\n        return Asaps.fetch<Issue[]>(`https://api.github.com/repos/${org}/${repo}/issues?per_page=25&page=${page}`);\n    }\n\n    fetchComments(commentsUrl: string): Asap<IssueComment[]> {\n        return Asaps.fetch<IssueComment[]>(commentsUrl);\n    }\n\n    fetchRepoDetails(org: string, repo: string): Asap<RepoDetails> {\n        return Asaps.fetch(`https://api.github.com/repos/${org}/${repo}`);\n    }\n}\n\n","import {ConanState} from \"conan-js-core\";\nimport {IssueComment} from \"../api/gitHub\";\nimport {issuesCommentsReducers, IssuesCommentsReducersFn} from \"./issuesCommentsReducersFn\";\nimport {issueCommentsActionsFn, IssuesCommentsActions} from \"./issueCommentsActionsFn\";\nimport {Conan} from \"conan-js-core\";\n\nexport interface IssuesCommentsData {\n    commentsByIssue: Record<number, IssueComment[] | undefined>\n}\n\nexport type IssuesCommentsState = ConanState<IssuesCommentsData, IssuesCommentsActions>;\n\nexport const issuesCommentsState$: IssuesCommentsState = Conan.state<IssuesCommentsData, IssuesCommentsReducersFn, IssuesCommentsActions>({\n    name: 'issues-comments',\n    initialData: {\n        commentsByIssue: {} as Record<number, IssueComment[]>,\n    },\n    reducers: issuesCommentsReducers,\n    actions: issueCommentsActionsFn\n})\n","import {Reducers, ReducersFn} from \"conan-js-core\";\nimport {IssuesCommentsData} from \"./issuesCommentState$\";\nimport {IssueComment} from \"../api/gitHub\";\n\nexport interface IssuesCommentsReducersFn extends Reducers<IssuesCommentsData> {\n    $fetchComments(issueId: number, comments: IssueComment[]): IssuesCommentsData;\n}\n\nexport const issuesCommentsReducers: ReducersFn<IssuesCommentsData, IssuesCommentsReducersFn> = (getState) => ({\n    $fetchComments: (issueId: number, comments: IssueComment[]): IssuesCommentsData => {\n        getState().commentsByIssue[issueId] = comments;\n        return {\n            ...getState(),\n        }\n    }\n});\n\n","import {diContext} from \"../context\";\nimport {Asap} from \"conan-js-core\";\nimport {IssuesCommentsData} from \"./issuesCommentState$\";\nimport {IssuesCommentsReducersFn} from \"./issuesCommentsReducersFn\";\nimport {Issue, IssueComment} from \"../api/gitHub\";\nimport {ActionsFn} from \"conan-js-core\";\n\nexport interface IssuesCommentsActions {\n    fetchComments(issue: Issue): Asap<IssuesCommentsData>;\n}\n\nexport const issueCommentsActionsFn: ActionsFn<IssuesCommentsData, IssuesCommentsReducersFn, IssuesCommentsActions> = thread => ({\n    fetchComments(issue: Issue): Asap<IssuesCommentsData> {\n        return thread.monitor(\n            diContext.issuesService.fetchComments(issue.comments_url).catch(() => thread.reducers.$fetch([])),\n            (comments, reducers) => reducers.$fetchComments(issue.id, comments as IssueComment[]),\n            'fetchComments',\n            issue.comments_url\n        )\n    }\n})\n","import {Conan} from \"conan-js-core\";\nimport {ConanState} from \"conan-js-core\";\n\nexport interface RepoData {\n    org: string;\n    repo: string;\n    page: number;\n}\n\nexport type RepoState = ConanState<RepoData>;\nexport const repoState$: RepoState = Conan.light<RepoData>('repo', {org: \"rails\", repo: \"rails\", page: 1})\n\n","import {ConanState} from \"conan-js-core\";\nimport {Reducers, ReducersFn} from \"conan-js-core\";\nimport {Asap} from \"conan-js-core\";\nimport {ActionsFn} from \"conan-js-core\";\nimport {diContext} from \"../context\";\nimport {Conan} from \"conan-js-core\";\n\nexport interface RepoDetailsData {\n    openIssuesCount: number\n    error: string | null\n}\n\nexport type RepoDetailsState = ConanState<RepoDetailsData, RepoDetailsActions>;\n\nexport interface RepoDetailsReducers extends Reducers<RepoDetailsData> {\n    $fetchRepoDetails(openIssuesCount: number, error: string): RepoDetailsData;\n}\n\nexport const repoDetailsReducersFn: ReducersFn<RepoDetailsData, RepoDetailsReducers> = () => ({\n    $fetchRepoDetails: (openIssuesCount: number, error: string): RepoDetailsData => ({\n        error: error,\n        openIssuesCount: openIssuesCount\n    })\n})\n\nexport interface RepoDetailsActions {\n    fetchRepoDetails(repo, org): Asap<RepoDetailsData>;\n}\n\nexport const repoDetailsActionsFn: ActionsFn<RepoDetailsData, RepoDetailsReducers, RepoDetailsActions> = thread => ({\n    fetchRepoDetails(repo, org): Asap<RepoDetailsData> {\n        return thread.monitor(\n            diContext.issuesService.fetchRepoDetails(repo, org).catch(() => thread.reducers.$fetchRepoDetails(-1, \"error loading\")),\n            (repoDetails, reducers) => reducers.$fetchRepoDetails(repoDetails.open_issues_count, \"\"),\n            'fetchRepoDetails',\n            [repo, org]\n        )\n    }\n});\n\nexport const repoDetailsState$: RepoDetailsState = Conan.state<RepoDetailsData>({\n    name: 'repo-details',\n    initialData: {openIssuesCount: -1, error: null},\n    reducers: repoDetailsReducersFn,\n    actions: repoDetailsActionsFn\n});\n\n//\n//\n// export class RepoDetailsStateImpl{\n//     constructor(\n//         private readonly getData: IProducer<RepoDetailsData>,\n//         private readonly issuesService: IssuesService,\n//     ) {\n//     }\n//\n//     @Reducer\n//     $updateIssueCount( count: number): RepoDetailsData{\n//         return {\n//             ...this.getData(),\n//             openIssuesCount: count\n//         }\n//     }\n//\n//     @Reducer\n//     $fetchRepoDetails (openIssuesCount: number, error: string): RepoDetailsData{\n//         return {\n//             error: error,\n//             openIssuesCount: openIssuesCount\n//         }\n//     }\n//\n//     @MonitorAction\n//     updateIssueCount(repo, org): Asap<number> {\n//         return this.issuesService.fetchRepoDetails(repo, org)\n//             .catch(() => this.$fetchRepoDetails(-1, 'error loading'))\n//             .map(it=>it.open_issues_count);\n//     }\n//\n// }\n","import {DiContextFactory} from \"conan-js-core\";\nimport {IssuesState, issuesState$} from \"./state/issuesState$\";\nimport {IssuesService, IssuesServiceImpl} from \"./services/issuesService\";\nimport {IssuesCommentsState, issuesCommentsState$} from \"./state/issuesCommentState$\";\nimport {RepoState, repoState$} from \"./state/repoState$\";\nimport {RepoDetailsState, repoDetailsState$} from \"./state/repoDetailsState$\";\n\ninterface AuxDependencies {\n    issuesService: IssuesService\n}\n\nexport let diContext = DiContextFactory.createContext<App, AuxDependencies>(\n    {\n        issuesCommentsState: issuesCommentsState$,\n        issuesState: issuesState$,\n        repoState: repoState$,\n        repoDetailsState: repoDetailsState$\n    }, {\n        issuesService: IssuesServiceImpl\n    }\n);\n\nexport interface App {\n    issuesState: IssuesState;\n    issuesCommentsState: IssuesCommentsState;\n    repoState: RepoState;\n    repoDetailsState: RepoDetailsState;\n}\n","import * as React from \"react\";\n\ninterface OrgProps {\n    org: string\n    repo: string\n}\n\nexport type HeaderProps = {\n    openIssuesCount: number\n} & OrgProps\n\nfunction OrgRepo({org, repo}: OrgProps) {\n    return (\n        <span>\n      <a href={`https://github.com/${org}`} className=\"header__org\">\n        {org}\n      </a>\n            {' / '}\n            <a href={`https://github.com/${org}/${repo}`} className=\"header__repo\">\n        {repo}\n      </a>\n    </span>\n    )\n}\n\nexport function IssuesPageHeader({\n                                     openIssuesCount = -1,\n                                     org,\n                                     repo\n                                 }: HeaderProps) {\n    if (openIssuesCount === -1) {\n        return (\n            <h1>\n                Open issues for <OrgRepo org={org} repo={repo}/>\n            </h1>\n        )\n    } else {\n        const pluralizedIssue = openIssuesCount === 1 ? 'issue' : 'issues'\n        return (\n            <h1>\n                <span className=\"header__openIssues\">{openIssuesCount}</span> open{' '}\n                {pluralizedIssue} for <OrgRepo org={org} repo={repo}/>\n            </h1>\n        )\n    }\n}\n","import * as React from \"react\";\nimport {useEffect} from \"react\";\nimport {IBiConsumer, ITriConsumer} from \"conan-js-core\";\nimport {Issue} from \"../../api/gitHub\";\nimport {IssuesList} from \"../../components/IssuesList\";\nimport {diContext} from \"../../context\";\nimport {HeaderProps, IssuesPageHeader} from \"./IssuesPageHeader\";\nimport {repoDetailsState$} from \"../../state/repoDetailsState$\";\n\nexport interface ILPageProps {\n    org: string\n    repo: string\n    page: number\n}\n\nexport interface ILPageStateProps {\n    fetchIssues: ITriConsumer<string, string, number>;\n    issues: Issue[];\n    fetchRepoDetails: IBiConsumer<string, string>;\n}\n\nexport const IssuesListPage = ({\n                                   org,\n                                   repo,\n                                   page = 1,\n                                   fetchIssues,\n                                   fetchRepoDetails,\n                               }: ILPageProps & ILPageStateProps) => {\n\n    useEffect(() => {\n        fetchIssues(org, repo, page);\n        fetchRepoDetails(org, repo);\n    }, [org, repo, page]);\n\n    return (\n        <div id=\"issue-list-page\">\n            {repoDetailsState$.connectMap<HeaderProps>(\n                IssuesPageHeader,\n                data => ({\n                    org: org,\n                    repo: repo,\n                    openIssuesCount: data.openIssuesCount\n                })\n            )\n            }\n            {diContext.issuesState.connect(IssuesList)}\n        </div>\n    )\n}\n","import * as React from \"react\";\nimport {Issue} from \"../../api/gitHub\";\nimport {UserWithAvatar} from \"../../components/UserWithAvatar\";\n\ninterface IssueProps {\n    issue: Issue\n}\n\nconst IssueState = ({issue: {state}}: IssueProps) => (\n    <span>\n    {state}\n  </span>\n)\n\nconst IssueNumber = ({issue}: IssueProps) => (\n    <span>\n    #{issue.number}\n  </span>\n)\n\nexport const IssueMeta = ({issue}: IssueProps) => {\n    return (\n        <div>\n            <IssueNumber issue={issue}/>\n            <IssueState issue={issue}/>\n            <UserWithAvatar user={issue.user} orientation=\"horizontal\"/>\n        </div>\n    )\n}\n","import * as React from \"react\";\nimport {Issue, IssueComment} from \"../../api/gitHub\";\nimport {UserWithAvatar} from \"../../components/UserWithAvatar\";\n\n\ninterface ICLProps {\n    issue: Issue\n    comments: IssueComment[]\n}\n\ninterface ICProps {\n    comment: IssueComment\n}\n\nfunction IssueCommentDisplay({comment}: ICProps) {\n    return (\n        <div>\n            <UserWithAvatar\n                user={comment.user}\n                orientation=\"horizontal\"\n            />\n\n            <div>\n                {comment.body}\n            </div>\n      </div>\n  )\n}\n\nexport function IssueComments({comments = [], issue}: ICLProps) {\n  // The issue has no comments\n  if (issue.comments === 0) {\n    return <div className=\"issue-detail--no-comments\">No comments</div>\n  }\n\n  // The issue has comments, but they're not loaded yet\n  if (!comments || comments.length === 0) {\n    return (\n        <div className=\"issue-detail--comments-loading\">Comments loading...</div>\n    )\n  }\n\n  // Comments are loaded\n  return (\n      <ul>\n          {comments.map(comment => (\n              <li key={comment.id}>\n                  <IssueCommentDisplay comment={comment}/>\n              </li>\n          ))}\n      </ul>\n  )\n}\n","import * as React from \"react\";\nimport {useEffect} from \"react\";\nimport {IssueMeta} from './IssueMeta'\nimport {insertMentionLinks} from \"../../utils/stringUtils\";\nimport {Issue} from \"../../api/gitHub\";\nimport {IssueLabels} from \"../../components/IssueLabels\";\nimport {IFunction} from \"conan-js-core\";\nimport {IssuesCommentsData, issuesCommentsState$} from \"../../state/issuesCommentState$\";\nimport {IssueComments} from \"./IssueComments\";\nimport {useConanState} from \"conan-js-core\";\nimport {IssuesCommentsActions} from \"../../state/issueCommentsActionsFn\";\n\nexport interface IDProps {\n    org: string;\n    repo: string;\n    issue: Issue;\n}\n\nexport interface IDStateProps {\n    showIssuesList: () => void;\n    fetchComments: IFunction<Issue, any>\n}\n\nexport type IDAllProps = IDProps & IDStateProps;\n\nexport const IssueDetailsPage = ({\n                                     issue,\n                                     showIssuesList,\n                                     fetchComments\n                                 }: IDAllProps) => {\n\n    const [commentsState] = useConanState<IssuesCommentsData, IssuesCommentsActions>(issuesCommentsState$);\n\n    useEffect(() => {\n        if (issue) {\n            fetchComments(issue)\n        }\n    }, []);\n\n    const backToIssueListButton = (\n        <button onClick={showIssuesList}>\n            Back to Issues List\n        </button>\n    );\n\n\n    const comments = commentsState.commentsByIssue[issue.id];\n    let renderedComments;\n    if (comments) {\n        renderedComments = <IssueComments issue={issue} comments={comments}/>\n    }\n\n    let content = (\n        <div>\n            <h1>{issue.title}</h1>\n            {backToIssueListButton}\n            <IssueMeta issue={issue}/>\n            <IssueLabels labels={issue.labels}/>\n            <hr/>\n            <div>\n                {insertMentionLinks(issue.body)}\n            </div>\n            <hr/>\n            <div>Comments</div>\n            <ul>{renderedComments}\n            </ul>\n        </div>\n    )\n    return <div>{content}</div>\n\n}\n","export function insertMentionLinks(markdown: string) {\n    return markdown.replace(\n        /\\B(@([a-zA-Z0-9](-?[a-zA-Z0-9_])+))/g,\n        `**[$1](https://github.com/$2)**`\n    )\n}\n\nexport function shorten(text = '', maxLength = 140) {\n    // Normalize newlines\n    let cleanText = text.replace(/\\\\r\\\\n/g, '\\n')\n\n    // Return if short enough already\n    if (cleanText.length <= maxLength) {\n        return cleanText\n    }\n\n    const ellip = ' ...'\n\n    // Return the 140 chars as-is if they end in a non-word char\n    const oneTooLarge = cleanText.substr(0, 141)\n    if (/\\W$/.test(oneTooLarge)) {\n        return oneTooLarge.substr(0, 140) + ellip\n    }\n\n    // Walk backwards to the nearest non-word character\n    let i = oneTooLarge.length\n    while (--i) {\n        if (/\\W/.test(oneTooLarge[i])) {\n            return oneTooLarge.substr(0, i) + ellip\n        }\n    }\n\n    return oneTooLarge.substr(0, 140) + ellip\n}\n","import * as React from \"react\";\nimport {RepoSearchForm} from \"./components/RepoSearchForm\";\nimport {IssuesListPage} from \"./features/issuesList/IssuesListPage\";\nimport {diContext} from \"./context\";\nimport {IssueDetailsPage} from \"./features/issueDetails/IssueDetailsPage\";\nimport {IssuesData} from \"./state/issuesState$\";\nimport {useConanState} from \"conan-js-core\";\nimport {RepoData, repoState$} from \"./state/repoState$\";\n\nexport type IssuesViewerProps = IssuesData\n\nexport const IssuesViewerApp: React.FC = (): React.ReactElement => {\n    return diContext.issuesState.connectData(\n        IssuesViewer\n    )\n}\n\nexport const IssuesViewer: React.FC<IssuesViewerProps> = ({displayType, issuesByNumber, issueId, issues}: IssuesData) => {\n\n    const [repoData] = useConanState<RepoData>(repoState$);\n\n    const setOrgAndRepo = (org: string, repo: string) => {\n        diContext.repoState.do.update(current => ({...current, org: org, repo: repo}));\n    }\n\n    const setJumpToPage = (page: number) => {\n        diContext.repoState.do.update(current => ({...current, page: page}));\n    }\n\n    let content\n\n    if (displayType === 'issues') {\n        content = (\n            <React.Fragment>\n                <RepoSearchForm\n                    org={repoData.org}\n                    repo={repoData.repo}\n                    page={repoData.page}\n                    setOrgAndRepo={setOrgAndRepo}\n                    setJumpToPage={setJumpToPage}\n                />\n                <IssuesListPage\n                    org={repoData.org}\n                    repo={repoData.repo}\n                    page={repoData.page}\n                    fetchIssues={diContext.issuesState.do.fetch}\n                    fetchRepoDetails={diContext.repoDetailsState.do.fetchRepoDetails}\n                    issues={issues}\n                />\n            </React.Fragment>\n        )\n    } else {\n        content = <IssueDetailsPage\n            issue={issuesByNumber[issueId]}\n            org={repoData.org}\n            repo={repoData.repo}\n            showIssuesList={diContext.issuesState.do.showIssues}\n            fetchComments={diContext.issuesCommentsState.do.fetchComments}\n        />;\n    }\n\n    return <div className=\"App\">{content}</div>\n}\n\nexport default IssuesViewer\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {IssuesViewerApp} from \"./app\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <IssuesViewerApp/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}