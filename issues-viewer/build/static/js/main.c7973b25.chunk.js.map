{"version":3,"sources":["components/RepoSearchForm.tsx","components/IssueLabels.tsx","components/IssueListItem.tsx","utils/stringUtils.ts","components/IssuesList.tsx","state/issuesState$.ts","state/issuesReducersFn.ts","state/issueActionsFn.ts","services/issuesService.ts","state/issuesCommentState$.ts","state/issuesCommentsReducersFn.ts","state/issueCommentsActionsFn.ts","state/repoState$.ts","state/repoDetailsState$.ts","context.ts","features/issuesList/IssuesPageHeader.tsx","features/issuesList/IssuesListPage.tsx","features/issueDetails/IssueMeta.tsx","features/issueDetails/IssueComments.tsx","utils/markDown.tsx","features/issueDetails/IssueDetailsPage.tsx","styles/styles.ts","app.tsx","index.tsx"],"names":["RepoSearchForm","org","repo","page","setOrgAndRepo","setJumpToPage","useState","currentOrg","setCurrentOrg","currentRepo","setCurrentRepo","currentPageText","setCurrentPageText","Grid","item","container","xs","direction","Typography","variant","sm","TextField","name","size","onChange","e","target","value","Button","style","marginLeft","onClick","newPage","parseInt","IssueLabels","labels","className","map","label","key","id","boxShadow","color","borderColor","IssueListItem","number","title","user","comments","body","showIssueComments","pluralizedComments","justify","Avatar","src","avatar_url","login","href","preventDefault","stopPropagation","text","maxLength","cleanText","replace","length","ellip","oneTooLarge","substr","test","i","shorten","Divider","IssuesList","data","actions","issues","renderedIssues","issue","ListItem","fetchIssue","List","issuesState$","Conan","state","initialData","issuesByNumber","displayType","reducers","getState","$fetch","forEach","$fetchIssue","issueId","$switchDisplay","thread","fetch","monitor","diContext","issuesService","catch","showIssues","IssuesServiceImpl","Asaps","commentsUrl","issuesCommentsState$","commentsByIssue","$fetchComments","fetchComments","comments_url","repoState$","light","repoDetailsState$","openIssuesCount","error","$fetchRepoDetails","fetchRepoDetails","repoDetails","open_issues_count","DiContextFactory","createContext","issuesCommentsState","issuesState","repoState","repoDetailsState","OrgRepo","IssuesPageHeader","pluralizedIssue","IssuesListPage","fetchIssues","useEffect","connectMap","connect","IssueState","IssueNumber","IssueMeta","spacing","IssueCommentDisplay","comment","IssueComments","Markdown","md","Remarkable","dangerouslySetInnerHTML","__html","render","IssueDetailsPage","showIssuesList","useConanState","commentsState","renderedComments","backToIssueListButton","markdown","content","theme","createMuiTheme","palette","primary","main","blueGrey","secondary","IssuesViewerApp","connectData","IssuesViewer","repoData","lg","do","update","current","ThemeProvider","ReactDOM","StrictMode","document","getElementById"],"mappings":"iSAeaA,EAAiB,SAAC,GAMc,IALVC,EAKS,EALTA,IACAC,EAIS,EAJTA,KACAC,EAGS,EAHTA,KACAC,EAES,EAFTA,cACAC,EACS,EADTA,cACS,EACJC,mBAASL,GADL,mBACjCM,EADiC,KACrBC,EADqB,OAEFF,mBAASJ,GAFP,mBAEjCO,EAFiC,KAEpBC,EAFoB,OAGMJ,mBAAS,GAAKH,GAHpB,mBAGjCQ,EAHiC,KAGhBC,EAHgB,KA6BxC,OACI,4BACI,gBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,WAAS,EAACC,GAAI,GAAIC,UAAW,OACpC,gBAACJ,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,gBAACE,EAAA,EAAD,CAAYC,QAAS,MAArB,SAEJ,gBAACN,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GAAII,GAAI,GACnB,gBAACC,EAAA,EAAD,CAAWC,KAAK,MAAMC,KAAK,QAAQJ,QAAS,WAAYK,SA/BpC,SAAAC,GAChCjB,EAAciB,EAAEC,OAAOC,QA8BqEA,MAAOpB,KAE3F,gBAACM,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,gBAACE,EAAA,EAAD,CAAYC,QAAS,MAArB,UAEJ,gBAACN,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,EAAGI,GAAI,GAClB,gBAACC,EAAA,EAAD,CAAWC,KAAK,OAAOC,KAAK,QAAQJ,QAAS,WAAYK,SAjCpC,SAAAC,GACjCf,EAAee,EAAEC,OAAOC,QAiCDA,MAAOlB,KAEtB,gBAACI,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,gBAACY,EAAA,EAAD,CAAQT,QAAS,WACTU,MAAO,CAACC,WAAY,GACpBC,QA/BE,WACtB3B,EAAcG,EAAYE,KA4Bd,eAQR,gBAACI,EAAA,EAAD,CAAMC,MAAI,EAACC,WAAS,EAACC,GAAI,GAAIC,UAAW,OACpC,gBAACJ,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,gBAACE,EAAA,EAAD,CAAYC,QAAS,MAArB,UAEJ,gBAACN,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,EAAGI,GAAI,GAClB,gBAACC,EAAA,EAAD,CAAWC,KAAK,aAAaC,KAAK,QAAQJ,QAAS,WAAYK,SA9CnC,SAAAC,GACxCb,EAAmBa,EAAEC,OAAOC,QA8CLA,MAAOhB,KAEtB,gBAACE,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,gBAACY,EAAA,EAAD,CAAQT,QAAS,WACTU,MAAO,CAACC,WAAY,GACpBC,QA5CI,WACxB,IAAMC,EAAUC,SAAStB,GAErBqB,GAAW,GACX3B,EAAc2B,KAsCN,oBC5EPE,EAAc,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,EAAUC,UAAV,OACvB,gCACGD,EAAOE,KAAI,SAAAC,GAAK,OACb,wBACIC,IAAKD,EAAME,GACXJ,UAAU,eACVP,MAAO,CACLY,UAAU,YAAD,OAAcH,EAAMI,OAC7BC,YAAY,IAAD,OAAML,EAAMI,SAG9BJ,EAAMhB,W,kBCMR,IAAMsB,EAAgB,SAAC,GAQc,IAPVC,EAOS,EAPTA,OACAC,EAMS,EANTA,MACAX,EAKS,EALTA,OACAY,EAIS,EAJTA,KACAC,EAGS,EAHTA,SAGS,IAFTC,YAES,MAFF,GAEE,EADTC,EACS,EADTA,kBAQxBC,EAAkC,IAAbH,EAAiB,UAAY,WAExD,OACI,gBAACnC,EAAA,EAAD,CAAMC,MAAI,EAACC,WAAS,EAACE,UAAW,MAAOmC,QAAS,gBAC5C,gBAACvC,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,gBAACqC,EAAA,EAAD,CAAQC,IAAKP,EAAKQ,aAClB,gBAACrC,EAAA,EAAD,CAAYwB,MAAO,iBACdK,EAAKS,QAGd,gBAAC3C,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,qBAAGyC,KAAK,YAAY1B,QAjBT,SAACN,GACpBA,EAAEiC,iBACFjC,EAAEkC,kBACFT,EAAkBL,KAeN,gBAAC3B,EAAA,EAAD,CAAYwB,MAAO,WAAW,gCAAQG,IACtC,gBAAC3B,EAAA,EAAD,CAAYwB,MAAO,aAAa,gCAAQI,KAE5C,gBAAC5B,EAAA,EAAD,CAAYwB,MAAO,aAAnB,IAAkCM,EAAlC,IAA6CG,EAA7C,KACA,gBAACjC,EAAA,EAAD,CAAYwB,MAAO,WCjD5B,WAA8C,IAA7BkB,EAA4B,uDAArB,GAAIC,EAAiB,uDAAL,IAEvCC,EAAYF,EAAKG,QAAQ,UAAW,MAGxC,GAAID,EAAUE,QAAUH,EACpB,OAAOC,EAGX,IAAMG,EAAQ,OAGRC,EAAcJ,EAAUK,OAAO,EAAG,KACxC,GAAI,MAAMC,KAAKF,GACX,OAAOA,EAAYC,OAAO,EAAG,KAAOF,EAKxC,IADA,IAAII,EAAIH,EAAYF,SACXK,GACL,GAAI,KAAKD,KAAKF,EAAYG,IACtB,OAAOH,EAAYC,OAAO,EAAGE,GAAKJ,EAI1C,OAAOC,EAAYC,OAAO,EAAG,KAAOF,EDwBOK,CAAQrB,IACvC,gBAAC,EAAD,CAAad,OAAQA,IACrB,gBAACoC,EAAA,EAAD,S,kBElDHC,EAAa,SAAC,GAAgE,IAA/DC,EAA8D,EAA9DA,KAAMC,EAAwD,EAAxDA,QAC9B,GAAmB,MAAfD,EAAKE,QAAqC,MAAnBF,EAAKE,OAAOtC,IAAa,CAChD,IAAIuC,EAAiBH,EAAKE,OAAOtC,KAAI,SAAAwC,GAAK,OACtC,gBAACC,EAAA,EAAD,CAAUvC,IAAKsC,EAAMrC,IACjB,gBAAC,EAAD,iBAAmBqC,EAAnB,CAA0B3B,kBAAmBwB,EAAQK,kBAG7D,OAAO,gBAACC,EAAA,EAAD,KAAOJ,GAEd,OAAO,kC,QCDFK,EAA4BC,QAAMC,MAAiD,CAC5F7D,KAAM,SACN8D,YAAa,CACTC,eAAgB,GAChBV,OAAQ,GACRW,YAAa,UAEjBC,SCVoE,SAACC,GAAD,MAAe,CACnFC,OAAQ,SAACd,GAIL,OAHAA,EAAOe,SAAQ,SAAAb,GACXW,IAAWH,eAAeR,EAAMhC,QAAUgC,KAEvC,2BACAW,KADP,IAEIb,OAAQA,EACRW,YAAa,YAGrBK,YAAa,SAACC,GAAD,mBAAC,eACPJ,KADM,IAETI,QAASA,EACTN,YAAa,cAEjBO,eAhBmF,SAgBpEP,GACX,OAAO,2BACAE,KADP,IAEIF,YAAaA,ODRrBZ,QERgF,SAAAoB,GAAM,MAAK,CAC3FC,MAD2F,SACrF7F,EAAMD,EAAKE,GACb,OAAO2F,EAAOE,QACVC,EAAUC,cAAcH,MAAM7F,EAAMD,EAAKE,GAAMgG,OAAM,kBAAML,EAAOP,SAASE,OAAO,QAClF,SAACd,EAAQY,GAAT,OAAsBA,EAASE,OAAOd,KACtC,QACA,CAACzE,EAAMD,EAAKE,KAGpB4E,WAT2F,SAShFa,GACP,OAAOE,EAAOP,SAASI,YAAYC,IAEvCQ,WAZ2F,WAavF,OAAON,EAAOP,SAASM,eAAe,e,gBClBjCQ,EAAb,8FACUnG,EAAcD,GAA+C,IAAlCE,EAAiC,uDAAlB,EAC5C,OAAOmG,QAAMP,MAAN,uCAAqD9F,EAArD,YAA4DC,EAA5D,oCAA4FC,MAF3G,oCAKkBoG,GACV,OAAOD,QAAMP,MAAsBQ,KAN3C,uCASqBtG,EAAaC,GAC1B,OAAOoG,QAAMP,MAAN,uCAA4C9F,EAA5C,YAAmDC,QAVlE,KCCasG,EAA4CtB,QAAMC,MAA2E,CACtI7D,KAAM,kBACN8D,YAAa,CACTqB,gBAAiB,IAErBlB,SCT4F,SAACC,GAAD,MAAe,CAC3GkB,eAAgB,SAACd,EAAiB5C,GAE9B,OADAwC,IAAWiB,gBAAgBb,GAAW5C,EAC/B,eACAwC,QDMXd,QEPkH,SAAAoB,GAAM,MAAK,CAC7Ha,cAD6H,SAC/G9B,GACV,OAAOiB,EAAOE,QACVC,EAAUC,cAAcS,cAAc9B,EAAM+B,cAAcT,OAAM,kBAAML,EAAOP,SAASE,OAAO,QAC7F,SAACzC,EAAUuC,GAAX,OAAwBA,EAASmB,eAAe7B,EAAMrC,GAAIQ,KAC1D,gBACA6B,EAAM+B,mBCPLC,EAAwB3B,QAAM4B,MAAgB,OAAQ,CAAC7G,IAAK,QAASC,KAAM,QAASC,KAAM,IC8B1F4G,EAAsC7B,QAAMC,MAAuB,CAC5E7D,KAAM,eACN8D,YAAa,CAAC4B,iBAAkB,EAAGC,MAAO,MAC1C1B,SAzBmF,iBAAO,CAC1F2B,kBAAmB,SAACF,EAAyBC,GAA1B,MAA8D,CAC7EA,MAAOA,EACPD,gBAAiBA,MAuBrBtC,QAfqG,SAAAoB,GAAM,MAAK,CAChHqB,iBADgH,SAC/FjH,EAAMD,GACnB,OAAO6F,EAAOE,QACVC,EAAUC,cAAciB,iBAAiBjH,EAAMD,GAAKkG,OAAM,kBAAML,EAAOP,SAAS2B,mBAAmB,EAAG,qBACtG,SAACE,EAAa7B,GAAd,OAA2BA,EAAS2B,kBAAkBE,EAAYC,kBAAmB,MACrF,mBACA,CAACnH,EAAMD,SCxBRgG,EAAYqB,mBAAiBC,cACpC,CACIC,oBAAqBhB,EACrBiB,YAAaxC,EACbyC,UAAWb,EACXc,iBAAkBZ,GACnB,CACCb,cAAeG,ICNvB,SAASuB,EAAT,GAAyC,IAAvB3H,EAAsB,EAAtBA,IAAKC,EAAiB,EAAjBA,KACnB,OACI,4BACF,qBAAGuD,KAAI,6BAAwBxD,GAAOmC,UAAU,eAC7CnC,GAEI,MACD,qBAAGwD,KAAI,6BAAwBxD,EAAxB,YAA+BC,GAAQkC,UAAU,gBAC3DlC,IAMF,SAAS2H,EAAT,GAI2C,IAAD,IAHZb,uBAGY,OAHO,EAGP,EAFZ/G,EAEY,EAFZA,IACAC,EACY,EADZA,KAEjC,IAAyB,IAArB8G,EACA,OACE,gCAAE,gBAAC9F,EAAA,EAAD,CAAYC,QAAS,MAArB,gBAAoD,gBAACyG,EAAD,CAAS3H,IAAKA,EAAKC,KAAMA,KAGjF,IAAM4H,EAAsC,IAApBd,EAAwB,QAAU,SAC1D,OACI,gCACI,gBAAC9F,EAAA,EAAD,CAAYC,QAAS,MAAM,wBAAMiB,UAAU,sBAAsB4E,GAAjE,QAA8F,IAC7Fc,EADD,QACsB,gBAACF,EAAD,CAAS3H,IAAKA,EAAKC,KAAMA,MCnBxD,IAAM6H,EAAiB,SAAC,GAMuC,IALnC9H,EAKkC,EALlCA,IACAC,EAIkC,EAJlCA,KAIkC,IAHlCC,YAGkC,MAH3B,EAG2B,EAFlC6H,EAEkC,EAFlCA,YACAb,EACkC,EADlCA,iBAQ/B,OALAc,qBAAU,WACND,EAAY/H,EAAKC,EAAMC,GACvBgH,EAAiBlH,EAAKC,KACvB,CAACD,EAAKC,EAAMC,IAGX,uBAAKqC,GAAG,mBACHuE,EAAkBmB,WACfL,GACA,SAAApD,GAAI,MAAK,CACLxE,IAAKA,EACLC,KAAMA,EACN8G,gBAAiBvC,EAAKuC,oBAI7Bf,EAAUwB,YAAYU,QAAQ3D,KCpCrC4D,EAAa,SAAC,GAAD,IAAUjD,EAAV,EAAEN,MAAQM,MAAV,OACf,gBAACjE,EAAA,EAAD,CAAYC,QAAS,KAAMuB,MAAO,aAC7ByC,IAIHkD,EAAc,SAAC,GAAD,IAAExD,EAAF,EAAEA,MAAF,OAChB,gBAAC3D,EAAA,EAAD,CAAYC,QAAS,KAAMuB,MAAO,aAAlC,IACMmC,EAAMhC,SAIHyF,EAAY,SAAC,GAAyB,IAAxBzD,EAAuB,EAAvBA,MACvB,OACI,gBAAChE,EAAA,EAAD,CAAME,WAAS,EAACwH,QAAS,GACrB,gBAAC1H,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GAAG,gBAAC,EAAD,CAAa6D,MAAOA,KACtC,gBAAChE,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GAAG,gBAAC,EAAD,CAAY6D,MAAOA,KACrC,gBAAChE,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GAAG,gBAACqC,EAAA,EAAD,CAAQC,IAAKuB,EAAM9B,KAAKQ,aACtC,gBAACrC,EAAA,EAAD,CAAYwB,MAAO,iBACdmC,EAAM9B,KAAKS,UCdhC,SAASgF,EAAT,GAAkD,IAApBC,EAAmB,EAAnBA,QAC1B,OACI,gBAAC5H,EAAA,EAAD,CAAMC,MAAI,EAACC,WAAS,EAACE,UAAW,SAAUsH,QAAS,EAAGnF,QAAS,gBAC3D,gBAACvC,EAAA,EAAD,CAAMC,MAAI,EAACC,WAAS,EAACC,GAAI,EAAGuH,QAAS,GACjC,gBAAC1H,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,gBAACqC,EAAA,EAAD,CAAQC,IAAKmF,EAAQ1F,KAAKQ,cAE9B,gBAAC1C,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GACX,gBAACE,EAAA,EAAD,CAAYwB,MAAO,iBACd+F,EAAQ1F,KAAKS,SAI1B,gBAAC3C,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,KACf,gBAACH,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACX,gBAACE,EAAA,EAAD,CAAYwB,MAAO,eACd+F,EAAQxF,OAGjB,gBAACpC,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACX,gBAACuD,EAAA,EAAD,CAASuC,OAAK,MAMvB,SAAS4B,EAAT,GAA0D,IAAD,IAAjC1F,gBAAiC,MAAtB,GAAsB,EAE5D,OAAuB,IAFqC,EAAlB6B,MAEhC7B,SACC,uBAAKZ,UAAU,6BAAf,eAINY,GAAgC,IAApBA,EAASgB,OAQtB,gBAACgB,EAAA,EAAD,KACKhC,EAASX,KAAI,SAAAoG,GAAO,OACjB,gBAAC3D,EAAA,EAAD,CAAUvC,IAAKkG,EAAQjG,IACnB,gBAACgG,EAAD,CAAqBC,QAASA,SATtC,uBAAKrG,UAAU,kCAAf,uB,YCzCCuG,EAAW,SAAC,GAA2B,IAA1B/E,EAAyB,EAAzBA,KAChBgF,EAAK,IAAIC,IACf,OAAO,uBAAKC,wBAAyB,CAACC,OAAQH,EAAGI,OAAOpF,OCmB/CqF,EAAmB,SAAC,GAImB,IAHfpE,EAGc,EAHdA,MACAqE,EAEc,EAFdA,eACAvC,EACc,EADdA,cACc,EAEvBwC,wBAAyD3C,GAA1E4C,EAFwC,oBAI/CnB,qBAAU,WACFpD,GACA8B,EAAc9B,KAEnB,IAEH,IAQIwE,EAREC,EACF,gBAAC1H,EAAA,EAAD,CAAQG,QAASmH,EAAgB/H,QAAS,WAAYuB,MAAO,aAA7D,uBAMEM,GADK,IAAI6F,IACEO,EAAc3C,gBAAgB5B,EAAMrC,KAEjDQ,IACAqG,EAAmB,gBAACX,EAAD,CAAe7D,MAAOA,EAAO7B,SAAUA,KAG9D,IjBxD+BuG,EiBwD3BC,EACA,gBAAC3I,EAAA,EAAD,CAAME,WAAS,EAACwH,QAAS,GACrB,gBAAC1H,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACX,gBAACE,EAAA,EAAD,CAAYC,QAAS,KAAMuB,MAAO,WAAYmC,EAAM/B,QAExD,gBAACjC,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACVsI,GAEL,gBAACzI,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACX,gBAAC,EAAD,CAAW6D,MAAOA,KAEtB,gBAAChE,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACX,gBAAC,EAAD,CAAamB,OAAQ0C,EAAM1C,UAE/B,gBAACtB,EAAA,EAAD,CAAMC,MAAI,EAACC,WAAS,EAACC,GAAI,GAAIuH,QAAS,GAClC,gBAAC1H,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACf,gBAACH,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACX,gBAACE,EAAA,EAAD,CAAYC,QAAS,QAASuB,MAAO,WACjC,gBAAC,EAAD,CAAUkB,MjB1EC2F,EiB0EwB1E,EAAM5B,KjBzEtDsG,EAASxF,QACZ,uCADG,yCiB6EC,gBAAClD,EAAA,EAAD,CAAMC,MAAI,EAACC,WAAS,EAACC,GAAI,GAAIuH,QAAS,GAClC,gBAAC1H,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACf,gBAACH,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACX,gBAACuD,EAAA,EAAD,CAASuC,OAAK,KAElB,gBAACjG,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,KAEnB,gBAACH,EAAA,EAAD,CAAMC,MAAI,EAACC,WAAS,EAACC,GAAI,GAAIuH,QAAS,GAClC,gBAAC1H,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACf,gBAACH,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,IACVqI,KAKjB,OAAO,2BAAMG,I,0BC1FJC,EAAQC,YAAe,CAChCC,QAAS,CACLC,QAAS,CACLC,KAAMC,IAAS,MAEnBC,UAAW,CACPF,KAAMC,IAAS,SCIdE,EAA4B,WACrC,OAAO/D,EAAUwB,YAAYwC,YACzBC,IAIKA,EAA4C,SAAC,GAAgE,IAYlHV,EAZmDlE,EAA8D,EAA9DA,YAAaD,EAAiD,EAAjDA,eAAgBO,EAAiC,EAAjCA,QAASjB,EAAwB,EAAxBA,OAAwB,EAElGwE,wBAAwBtC,GAApCsD,EAF8G,oBAgDrH,OAjCIX,EADgB,WAAhBlE,EAEI,gBAACzE,EAAA,EAAD,CAAME,WAAS,EAACwH,QAAS,EAAGtH,UAAW,UACnC,gBAACJ,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GAAIoJ,GAAI,GACnB,gBAAC,EAAD,CACInK,IAAKkK,EAASlK,IACdC,KAAMiK,EAASjK,KACfC,KAAMgK,EAAShK,KACfC,cAlBE,SAACH,EAAaC,GAChC+F,EAAUyB,UAAU2C,GAAGC,QAAO,SAAAC,GAAO,kCAASA,GAAT,IAAkBtK,IAAKA,EAAKC,KAAMA,QAkBvDG,cAfE,SAACF,GACnB8F,EAAUyB,UAAU2C,GAAGC,QAAO,SAAAC,GAAO,kCAASA,GAAT,IAAkBpK,KAAMA,WAiBrD,gBAACU,EAAA,EAAD,CAAMC,MAAI,EAACE,GAAI,GAAIoJ,GAAI,GACnB,gBAAC,EAAD,CACInK,IAAKkK,EAASlK,IACdC,KAAMiK,EAASjK,KACfC,KAAMgK,EAAShK,KACf6H,YAAa/B,EAAUwB,YAAY4C,GAAGtE,MACtCoB,iBAAkBlB,EAAU0B,iBAAiB0C,GAAGlD,iBAChDxC,OAAQA,MAMd,gBAAC,EAAD,CACNE,MAAOQ,EAAeO,GACtB3F,IAAKkK,EAASlK,IACdC,KAAMiK,EAASjK,KACfgJ,eAAgBjD,EAAUwB,YAAY4C,GAAGjE,WACzCO,cAAeV,EAAUuB,oBAAoB6C,GAAG1D,gBAIjD,uBAAKvE,UAAU,OAAM,gBAACoI,EAAA,EAAD,CAAef,MAAOA,GAAQD,KC9D9DiB,IAASzB,OACL,kBAAC,IAAM0B,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.c7973b25.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {ChangeEvent, useState} from \"react\";\nimport {Button, Grid, TextField, Typography} from \"@material-ui/core\";\n\ninterface Props {\n    org: string\n    repo: string\n    page: number\n    setOrgAndRepo: (org: string, repo: string) => void\n    setJumpToPage: (page: number) => void\n}\n\ntype InputEvent = ChangeEvent<HTMLInputElement>\ntype ChangeHandler = (e: InputEvent) => void\n\nexport const RepoSearchForm = ({\n                                   org,\n                                   repo,\n                                   page,\n                                   setOrgAndRepo,\n                                   setJumpToPage,\n                               }: Props) => {\n    const [currentOrg, setCurrentOrg] = useState(org)\n    const [currentRepo, setCurrentRepo] = useState(repo)\n    const [currentPageText, setCurrentPageText] = useState('' + page)\n\n    const onOrgChanged: ChangeHandler = e => {\n        setCurrentOrg(e.target.value)\n    }\n\n    const onRepoChanged: ChangeHandler = e => {\n        setCurrentRepo(e.target.value)\n    }\n\n    const onCurrentPageChanged: ChangeHandler = e => {\n        setCurrentPageText(e.target.value)\n    }\n\n    const onLoadRepoClicked = () => {\n        setOrgAndRepo(currentOrg, currentRepo)\n    }\n\n    const onJumpToPageClicked = () => {\n        const newPage = parseInt(currentPageText)\n\n        if (newPage >= 1) {\n            setJumpToPage(newPage)\n        }\n    }\n\n    return (\n        <form>\n            <Grid item container xs={12} direction={\"row\"}>\n                <Grid item xs={1} >\n                    <Typography variant={\"h6\"}>Org:</Typography>\n                </Grid>\n                <Grid item xs={11} sm={2}>\n                    <TextField name=\"org\" size=\"small\" variant={\"outlined\"} onChange={onOrgChanged} value={currentOrg}/>\n                </Grid>\n                <Grid item xs={1} >\n                    <Typography variant={\"h6\"}>Repo:</Typography>\n                </Grid>\n                <Grid item xs={5} sm={2}>\n                    <TextField name=\"repo\" size=\"small\" variant={\"outlined\"} onChange={onRepoChanged}\n                               value={currentRepo}/>\n                </Grid>\n                <Grid item xs={6}>\n                    <Button variant={\"outlined\"}\n                            style={{marginLeft: 5}}\n                            onClick={onLoadRepoClicked}\n                    >\n                        Load Repo\n                    </Button>\n                </Grid>\n            </Grid>\n            <Grid item container xs={12} direction={\"row\"}>\n                <Grid item xs={1}>\n                    <Typography variant={\"h6\"}>Page:</Typography>\n                </Grid>\n                <Grid item xs={5} sm={2}>\n                    <TextField name=\"jumpToPage\" size=\"small\" variant={\"outlined\"} onChange={onCurrentPageChanged}\n                               value={currentPageText}/>\n                </Grid>\n                <Grid item xs={6}>\n                    <Button variant={\"outlined\"}\n                            style={{marginLeft: 5}}\n                            onClick={onJumpToPageClicked}\n                    >\n                        Jump to Page\n                    </Button>\n                </Grid>\n            </Grid>\n        </form>\n    )\n}\n","import * as React from \"react\";\nimport {Label} from \"../api/gitHub\";\n\ninterface IssueLabelsProps {\n  labels: Label[]\n  className?: string\n}\n\nexport const IssueLabels = ({labels, className}: IssueLabelsProps) => (\n    <>\n      {labels.map(label => (\n          <span\n              key={label.id}\n              className=\"issue__label\"\n              style={{\n                boxShadow: `0 0 2px #${label.color}`,\n                borderColor: `#${label.color}`\n              }}\n          >\n        {label.name}\n      </span>\n      ))}\n    </>\n)\n","import * as React from \"react\";\nimport {Issue} from \"../api/gitHub\";\nimport {UserWithAvatar} from \"./UserWithAvatar\";\nimport {IssueLabels} from \"./IssueLabels\";\nimport {\n    Avatar,\n    Box,\n    Card,\n    CardContent,\n    CardMedia,\n    createStyles,\n    Divider,\n    Grid,\n    Theme,\n    Typography\n} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {red} from \"@material-ui/core/colors\";\nimport {shorten} from \"../utils/stringUtils\";\n\n\ntype Props = Issue & {\n    showIssueComments: (issueId: number) => void\n}\n\nexport const IssueListItem = ({\n                                  number,\n                                  title,\n                                  labels,\n                                  user,\n                                  comments,\n                                  body = '',\n                                  showIssueComments\n                              }: Props) => {\n    const onIssueClicked = (e: any) => {\n        e.preventDefault()\n        e.stopPropagation()\n        showIssueComments(number)\n    }\n\n    const pluralizedComments = comments === 1 ? 'comment' : 'comments'\n\n    return (\n        <Grid item container direction={\"row\"} justify={\"space-around\"}>\n            <Grid item xs={3} >\n                <Avatar src={user.avatar_url}></Avatar>\n                <Typography color={\"textSecondary\"}>\n                    {user.login}\n                </Typography>\n            </Grid>\n            <Grid item xs={9}>\n                <a href=\"#comments\" onClick={onIssueClicked}>\n                    <Typography color={\"primary\"}><span>#{number}</span></Typography>\n                    <Typography color={\"secondary\"}><span> {title}</span></Typography>\n                </a>\n                <Typography color={\"secondary\"}>({comments} {pluralizedComments})</Typography>\n                <Typography color={\"primary\"}>{shorten(body)}</Typography>\n                <IssueLabels labels={labels}/>\n                <Divider />\n            </Grid>\n        </Grid>\n    )\n}\n","export function insertMentionLinks(markdown: string) : string {\n    return markdown.replace(\n        /\\B(@([a-zA-Z0-9](-?[a-zA-Z0-9_])+))/g,\n        `**[$1](https://github.com/$2)**`\n    )\n}\n\nexport function shorten(text = '', maxLength = 140) {\n    // Normalize newlines\n    let cleanText = text.replace(/\\\\r\\\\n/g, '\\n')\n\n    // Return if short enough already\n    if (cleanText.length <= maxLength) {\n        return cleanText\n    }\n\n    const ellip = ' ...'\n\n    // Return the 140 chars as-is if they end in a non-word char\n    const oneTooLarge = cleanText.substr(0, 141)\n    if (/\\W$/.test(oneTooLarge)) {\n        return oneTooLarge.substr(0, 140) + ellip\n    }\n\n    // Walk backwards to the nearest non-word character\n    let i = oneTooLarge.length\n    while (--i) {\n        if (/\\W/.test(oneTooLarge[i])) {\n            return oneTooLarge.substr(0, i) + ellip\n        }\n    }\n\n    return oneTooLarge.substr(0, 140) + ellip\n}\n","import * as React from \"react\";\nimport {IssueListItem} from \"./IssueListItem\";\nimport {ConnectedState} from \"conan-js-core\";\nimport {IssuesData} from \"../state/issuesState$\";\nimport {IssuesActions} from \"../state/issueActionsFn\";\nimport {List, ListItem} from \"@material-ui/core\";\n\n\nexport const IssuesList = ({data, actions}: ConnectedState<IssuesData, IssuesActions>) => {\n    if (data.issues != null && data.issues.map != null) {\n        let renderedIssues = data.issues.map(issue => (\n            <ListItem key={issue.id}>\n                <IssueListItem {...issue} showIssueComments={actions.fetchIssue}/>\n            </ListItem>\n        ))\n        return <List>{renderedIssues}</List>\n    } else {\n        return <></>;\n    }\n}\n","import {Issue} from \"../api/gitHub\";\nimport {Conan} from \"conan-js-core\";\nimport {ConanState} from \"conan-js-core\";\nimport {IssuesReducers, issuesReducersFn} from \"./issuesReducersFn\";\nimport {issueActionsFn, IssuesActions} from \"./issueActionsFn\";\n\n\nexport type IssuesState = ConanState<IssuesData, IssuesActions>;\n\nexport interface IssuesData {\n    issuesByNumber: Record<number, Issue>;\n    issues: Issue[];\n    issueId?: number;\n    displayType: 'issues' | 'comments';\n}\n\nexport const issuesState$: IssuesState = Conan.state<IssuesData, IssuesReducers, IssuesActions>({\n    name: 'issues',\n    initialData: {\n        issuesByNumber: {} as Record<number, Issue>,\n        issues: [],\n        displayType: \"issues\"\n    },\n    reducers: issuesReducersFn,\n    actions: issueActionsFn\n})\n","import {Issue} from \"../api/gitHub\";\nimport {IssuesData} from \"./issuesState$\";\nimport {Reducers, ReducersFn} from \"conan-js-core\";\n\n\nexport interface IssuesReducers extends Reducers<IssuesData> {\n    $fetch(issues: Issue[]): IssuesData;\n\n    $fetchIssue(issueId: number): IssuesData;\n\n    $switchDisplay(displayType: 'issues' | 'comments'): IssuesData;\n}\n\nexport const issuesReducersFn: ReducersFn<IssuesData, IssuesReducers> = (getState) => ({\n    $fetch: (issues: Issue[]): IssuesData => {\n        issues.forEach(issue => {\n            getState().issuesByNumber[issue.number] = issue\n        })\n        return {\n            ...getState(),\n            issues: issues,\n            displayType: 'issues'\n        }\n    },\n    $fetchIssue: (issueId: number): IssuesData => ({\n        ...getState(),\n        issueId: issueId,\n        displayType: 'comments'\n    }),\n    $switchDisplay(displayType): IssuesData {\n        return {\n            ...getState(),\n            displayType: displayType\n        }\n    }\n})\n","import {IssuesData} from \"./issuesState$\";\nimport {IssuesReducers} from \"./issuesReducersFn\";\nimport {ActionsFn} from \"conan-js-core\";\nimport {diContext} from \"../context\";\nimport {Asap} from \"conan-js-core\";\nimport {Issue} from \"../api/gitHub\";\n\nexport interface IssuesActions {\n    fetch(repo: string, org: string, page: number): Asap<IssuesData>;\n\n    fetchIssue(issueId: number): IssuesData;\n\n    showIssues(): IssuesData;\n}\n\n\nexport const issueActionsFn: ActionsFn<IssuesData, IssuesReducers, IssuesActions> = thread => ({\n    fetch(repo, org, page): Asap<IssuesData> {\n        return thread.monitor(\n            diContext.issuesService.fetch(repo, org, page).catch(() => thread.reducers.$fetch([])),\n            (issues, reducers) => reducers.$fetch(issues as Issue[]),\n            'fetch',\n            [repo, org, page]\n        )\n    },\n    fetchIssue(issueId: number): IssuesData {\n        return thread.reducers.$fetchIssue(issueId);\n    },\n    showIssues(): IssuesData {\n        return thread.reducers.$switchDisplay(\"issues\");\n    }\n})\n","import {Issue, IssueComment, RepoDetails} from \"../api/gitHub\";\nimport {Asap, Asaps} from \"conan-js-core\";\n\nexport interface IssuesService {\n    fetch(repo: string, org: string, page: number): Asap<Issue[]>;\n\n    fetchComments(commentsUrl: string): Asap<IssueComment[]>;\n\n    fetchRepoDetails(org: string, repo: string): Asap<RepoDetails>;\n}\n\nexport class IssuesServiceImpl implements IssuesService {\n    fetch(repo: string, org: string, page: number = 1): Asap<Issue[]> {\n        return Asaps.fetch<Issue[]>(`https://api.github.com/repos/${org}/${repo}/issues?per_page=25&page=${page}`);\n    }\n\n    fetchComments(commentsUrl: string): Asap<IssueComment[]> {\n        return Asaps.fetch<IssueComment[]>(commentsUrl);\n    }\n\n    fetchRepoDetails(org: string, repo: string): Asap<RepoDetails> {\n        return Asaps.fetch(`https://api.github.com/repos/${org}/${repo}`);\n    }\n}\n\n","import {ConanState} from \"conan-js-core\";\nimport {IssueComment} from \"../api/gitHub\";\nimport {issuesCommentsReducers, IssuesCommentsReducersFn} from \"./issuesCommentsReducersFn\";\nimport {issueCommentsActionsFn, IssuesCommentsActions} from \"./issueCommentsActionsFn\";\nimport {Conan} from \"conan-js-core\";\n\nexport interface IssuesCommentsData {\n    commentsByIssue: Record<number, IssueComment[] | undefined>\n}\n\nexport type IssuesCommentsState = ConanState<IssuesCommentsData, IssuesCommentsActions>;\n\nexport const issuesCommentsState$: IssuesCommentsState = Conan.state<IssuesCommentsData, IssuesCommentsReducersFn, IssuesCommentsActions>({\n    name: 'issues-comments',\n    initialData: {\n        commentsByIssue: {} as Record<number, IssueComment[]>,\n    },\n    reducers: issuesCommentsReducers,\n    actions: issueCommentsActionsFn\n})\n","import {Reducers, ReducersFn} from \"conan-js-core\";\nimport {IssuesCommentsData} from \"./issuesCommentState$\";\nimport {IssueComment} from \"../api/gitHub\";\n\nexport interface IssuesCommentsReducersFn extends Reducers<IssuesCommentsData> {\n    $fetchComments(issueId: number, comments: IssueComment[]): IssuesCommentsData;\n}\n\nexport const issuesCommentsReducers: ReducersFn<IssuesCommentsData, IssuesCommentsReducersFn> = (getState) => ({\n    $fetchComments: (issueId: number, comments: IssueComment[]): IssuesCommentsData => {\n        getState().commentsByIssue[issueId] = comments;\n        return {\n            ...getState(),\n        }\n    }\n});\n\n","import {diContext} from \"../context\";\nimport {Asap} from \"conan-js-core\";\nimport {IssuesCommentsData} from \"./issuesCommentState$\";\nimport {IssuesCommentsReducersFn} from \"./issuesCommentsReducersFn\";\nimport {Issue, IssueComment} from \"../api/gitHub\";\nimport {ActionsFn} from \"conan-js-core\";\n\nexport interface IssuesCommentsActions {\n    fetchComments(issue: Issue): Asap<IssuesCommentsData>;\n}\n\nexport const issueCommentsActionsFn: ActionsFn<IssuesCommentsData, IssuesCommentsReducersFn, IssuesCommentsActions> = thread => ({\n    fetchComments(issue: Issue): Asap<IssuesCommentsData> {\n        return thread.monitor(\n            diContext.issuesService.fetchComments(issue.comments_url).catch(() => thread.reducers.$fetch([])),\n            (comments, reducers) => reducers.$fetchComments(issue.id, comments as IssueComment[]),\n            'fetchComments',\n            issue.comments_url\n        )\n    }\n})\n","import {Conan} from \"conan-js-core\";\nimport {ConanState} from \"conan-js-core\";\n\nexport interface RepoData {\n    org: string;\n    repo: string;\n    page: number;\n}\n\nexport type RepoState = ConanState<RepoData>;\nexport const repoState$: RepoState = Conan.light<RepoData>('repo', {org: \"rails\", repo: \"rails\", page: 1})\n\n","import {ConanState} from \"conan-js-core\";\nimport {Reducers, ReducersFn} from \"conan-js-core\";\nimport {Asap} from \"conan-js-core\";\nimport {ActionsFn} from \"conan-js-core\";\nimport {diContext} from \"../context\";\nimport {Conan} from \"conan-js-core\";\n\nexport interface RepoDetailsData {\n    openIssuesCount: number\n    error: string | null\n}\n\nexport type RepoDetailsState = ConanState<RepoDetailsData, RepoDetailsActions>;\n\nexport interface RepoDetailsReducers extends Reducers<RepoDetailsData> {\n    $fetchRepoDetails(openIssuesCount: number, error: string): RepoDetailsData;\n}\n\nexport const repoDetailsReducersFn: ReducersFn<RepoDetailsData, RepoDetailsReducers> = () => ({\n    $fetchRepoDetails: (openIssuesCount: number, error: string): RepoDetailsData => ({\n        error: error,\n        openIssuesCount: openIssuesCount\n    })\n})\n\nexport interface RepoDetailsActions {\n    fetchRepoDetails(repo, org): Asap<RepoDetailsData>;\n}\n\nexport const repoDetailsActionsFn: ActionsFn<RepoDetailsData, RepoDetailsReducers, RepoDetailsActions> = thread => ({\n    fetchRepoDetails(repo, org): Asap<RepoDetailsData> {\n        return thread.monitor(\n            diContext.issuesService.fetchRepoDetails(repo, org).catch(() => thread.reducers.$fetchRepoDetails(-1, \"error loading\")),\n            (repoDetails, reducers) => reducers.$fetchRepoDetails(repoDetails.open_issues_count, \"\"),\n            'fetchRepoDetails',\n            [repo, org]\n        )\n    }\n});\n\nexport const repoDetailsState$: RepoDetailsState = Conan.state<RepoDetailsData>({\n    name: 'repo-details',\n    initialData: {openIssuesCount: -1, error: null},\n    reducers: repoDetailsReducersFn,\n    actions: repoDetailsActionsFn\n});\n\n//\n//\n// export class RepoDetailsStateImpl{\n//     constructor(\n//         private readonly getData: IProducer<RepoDetailsData>,\n//         private readonly issuesService: IssuesService,\n//     ) {\n//     }\n//\n//     @Reducer\n//     $updateIssueCount( count: number): RepoDetailsData{\n//         return {\n//             ...this.getData(),\n//             openIssuesCount: count\n//         }\n//     }\n//\n//     @Reducer\n//     $fetchRepoDetails (openIssuesCount: number, error: string): RepoDetailsData{\n//         return {\n//             error: error,\n//             openIssuesCount: openIssuesCount\n//         }\n//     }\n//\n//     @MonitorAction\n//     updateIssueCount(repo, org): Asap<number> {\n//         return this.issuesService.fetchRepoDetails(repo, org)\n//             .catch(() => this.$fetchRepoDetails(-1, 'error loading'))\n//             .map(it=>it.open_issues_count);\n//     }\n//\n// }\n","import {DiContextFactory} from \"conan-js-core\";\nimport {IssuesState, issuesState$} from \"./state/issuesState$\";\nimport {IssuesService, IssuesServiceImpl} from \"./services/issuesService\";\nimport {IssuesCommentsState, issuesCommentsState$} from \"./state/issuesCommentState$\";\nimport {RepoState, repoState$} from \"./state/repoState$\";\nimport {RepoDetailsState, repoDetailsState$} from \"./state/repoDetailsState$\";\n\ninterface AuxDependencies {\n    issuesService: IssuesService\n}\n\nexport let diContext = DiContextFactory.createContext<App, AuxDependencies>(\n    {\n        issuesCommentsState: issuesCommentsState$,\n        issuesState: issuesState$,\n        repoState: repoState$,\n        repoDetailsState: repoDetailsState$\n    }, {\n        issuesService: IssuesServiceImpl\n    }\n);\n\nexport interface App {\n    issuesState: IssuesState;\n    issuesCommentsState: IssuesCommentsState;\n    repoState: RepoState;\n    repoDetailsState: RepoDetailsState;\n}\n","import * as React from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\ninterface OrgProps {\n    org: string\n    repo: string\n}\n\nexport type HeaderProps = {\n    openIssuesCount: number\n} & OrgProps\n\nfunction OrgRepo({org, repo}: OrgProps) {\n    return (\n        <span>\n      <a href={`https://github.com/${org}`} className=\"header__org\">\n        {org}\n      </a>\n            {' / '}\n            <a href={`https://github.com/${org}/${repo}`} className=\"header__repo\">\n        {repo}\n      </a>\n    </span>\n    )\n}\n\nexport function IssuesPageHeader({\n                                     openIssuesCount = -1,\n                                     org,\n                                     repo\n                                 }: HeaderProps) {\n    if (openIssuesCount === -1) {\n        return (\n          <><Typography variant={\"h4\"}> issues for </Typography><OrgRepo org={org} repo={repo}/></>\n        )\n    } else {\n        const pluralizedIssue = openIssuesCount === 1 ? 'issue' : 'issues'\n        return (\n            <>\n                <Typography variant={\"h4\"}><span className=\"header__openIssues\">{openIssuesCount}</span> open{' '}\n                {pluralizedIssue} for <OrgRepo org={org} repo={repo}/></Typography>\n            </>\n        )\n    }\n}\n","import * as React from \"react\";\nimport {useEffect} from \"react\";\nimport {IBiConsumer, ITriConsumer} from \"conan-js-core\";\nimport {Issue} from \"../../api/gitHub\";\nimport {IssuesList} from \"../../components/IssuesList\";\nimport {diContext} from \"../../context\";\nimport {HeaderProps, IssuesPageHeader} from \"./IssuesPageHeader\";\nimport {repoDetailsState$} from \"../../state/repoDetailsState$\";\n\nexport interface ILPageProps {\n    org: string\n    repo: string\n    page: number\n}\n\nexport interface ILPageStateProps {\n    fetchIssues: ITriConsumer<string, string, number>;\n    issues: Issue[];\n    fetchRepoDetails: IBiConsumer<string, string>;\n}\n\nexport const IssuesListPage = ({\n                                   org,\n                                   repo,\n                                   page = 1,\n                                   fetchIssues,\n                                   fetchRepoDetails,\n                               }: ILPageProps & ILPageStateProps) => {\n\n    useEffect(() => {\n        fetchIssues(org, repo, page);\n        fetchRepoDetails(org, repo);\n    }, [org, repo, page]);\n\n    return (\n        <div id=\"issue-list-page\">\n            {repoDetailsState$.connectMap<HeaderProps>(\n                IssuesPageHeader,\n                data => ({\n                    org: org,\n                    repo: repo,\n                    openIssuesCount: data.openIssuesCount\n                })\n            )\n            }\n            {diContext.issuesState.connect(IssuesList)}\n        </div>\n    )\n}\n","import * as React from \"react\";\nimport {Issue} from \"../../api/gitHub\";\nimport {UserWithAvatar} from \"../../components/UserWithAvatar\";\nimport {Avatar, Grid, Typography} from \"@material-ui/core\";\n\ninterface IssueProps {\n    issue: Issue\n}\n\nconst IssueState = ({issue: {state}}: IssueProps) => (\n    <Typography variant={\"h6\"} color={\"secondary\"} >\n        {state}\n    </Typography>\n)\n\nconst IssueNumber = ({issue}: IssueProps) => (\n    <Typography variant={\"h6\"} color={\"secondary\"}>\n        #{issue.number}\n    </Typography>\n)\n\nexport const IssueMeta = ({issue}: IssueProps) => {\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={2}><IssueNumber issue={issue}/></Grid>\n            <Grid item xs={2}><IssueState issue={issue}/></Grid>\n            <Grid item xs={2}><Avatar src={issue.user.avatar_url}/>\n                <Typography color={\"textSecondary\"}>\n                    {issue.user.login}\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}\n","import * as React from \"react\";\nimport {Issue, IssueComment} from \"../../api/gitHub\";\nimport {Avatar, Divider, Grid, List, ListItem, Typography} from \"@material-ui/core\";\n\n\ninterface ICLProps {\n    issue: Issue\n    comments: IssueComment[]\n}\n\ninterface ICProps {\n    comment: IssueComment\n}\n\nfunction IssueCommentDisplay({comment}: ICProps) {\n    return (\n        <Grid item container direction={\"column\"} spacing={1} justify={\"space-around\"}>\n            <Grid item container xs={4} spacing={1}>\n                <Grid item xs={1}>\n                    <Avatar src={comment.user.avatar_url}/>\n                </Grid>\n                <Grid item xs={1}>\n                    <Typography color={\"textSecondary\"}>\n                        {comment.user.login}\n                    </Typography>\n                </Grid>\n            </Grid>\n            <Grid item xs={12}/>\n            <Grid item xs={10}>\n                <Typography color={\"textPrimary\"}>\n                    {comment.body}\n                </Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <Divider light/>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport function IssueComments({comments = [], issue}: ICLProps) {\n    // The issue has no comments\n    if (issue.comments === 0) {\n        return <div className=\"issue-detail--no-comments\">No comments</div>\n    }\n\n    // The issue has comments, but they're not loaded yet\n    if (!comments || comments.length === 0) {\n        return (\n            <div className=\"issue-detail--comments-loading\">Comments loading...</div>\n        )\n    }\n\n    // Comments are loaded\n    return (\n        <List>\n            {comments.map(comment => (\n                <ListItem key={comment.id}>\n                    <IssueCommentDisplay comment={comment}/>\n                </ListItem>\n            ))}\n        </List>\n    )\n}\n","import * as React from \"react\";\nimport {Remarkable} from 'remarkable';\nimport {Issue} from \"../api/gitHub\";\n\ninterface MarkDownProps {\n    text: string\n}\n\nexport const Markdown = ({text}: MarkDownProps) => {\n    const md = new Remarkable();\n    return <div dangerouslySetInnerHTML={{__html: md.render(text)}}/>;\n}\n","import * as React from \"react\";\nimport {useEffect} from \"react\";\nimport {IssueMeta} from './IssueMeta'\nimport {insertMentionLinks} from \"../../utils/stringUtils\";\nimport {Issue} from \"../../api/gitHub\";\nimport {IssueLabels} from \"../../components/IssueLabels\";\nimport {IFunction} from \"conan-js-core\";\nimport {IssuesCommentsData, issuesCommentsState$} from \"../../state/issuesCommentState$\";\nimport {IssueComments} from \"./IssueComments\";\nimport {useConanState} from \"conan-js-core\";\nimport {IssuesCommentsActions} from \"../../state/issueCommentsActionsFn\";\nimport {Button, Divider, Grid, Typography} from \"@material-ui/core\";\nimport {Remarkable} from 'remarkable';\nimport {Markdown} from \"../../utils/markDown\";\n\n\nexport interface IDProps {\n    org: string;\n    repo: string;\n    issue: Issue;\n}\n\nexport interface IDStateProps {\n    showIssuesList: () => void;\n    fetchComments: IFunction<Issue, any>\n}\n\nexport type IDAllProps = IDProps & IDStateProps;\n\nexport const IssueDetailsPage = ({\n                                     issue,\n                                     showIssuesList,\n                                     fetchComments\n                                 }: IDAllProps) => {\n\n    const [commentsState] = useConanState<IssuesCommentsData, IssuesCommentsActions>(issuesCommentsState$);\n\n    useEffect(() => {\n        if (issue) {\n            fetchComments(issue)\n        }\n    }, []);\n\n    const backToIssueListButton = (\n        <Button onClick={showIssuesList} variant={\"outlined\"} color={\"secondary\"}>\n            Back to Issues List\n        </Button>\n    );\n\n    const md = new Remarkable();\n    const comments = commentsState.commentsByIssue[issue.id];\n    let renderedComments;\n    if (comments) {\n        renderedComments = <IssueComments issue={issue} comments={comments}/>\n    }\n\n    let content = (\n        <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <Typography variant={\"h3\"} color={\"primary\"}>{issue.title}</Typography>\n            </Grid>\n            <Grid item xs={12}>\n                {backToIssueListButton}\n            </Grid>\n            <Grid item xs={12}>\n                <IssueMeta issue={issue}/>\n            </Grid>\n            <Grid item xs={12}>\n                <IssueLabels labels={issue.labels}/>\n            </Grid>\n            <Grid item container xs={12} spacing={1}>\n                <Grid item xs={1}/>\n                <Grid item xs={11}>\n                    <Typography variant={\"body1\"} color={\"primary\"}>\n                        <Markdown text={insertMentionLinks(issue.body)}/>\n                    </Typography>\n                </Grid>\n            </Grid>\n            <Grid item container xs={12} spacing={1}>\n                <Grid item xs={1} />\n                <Grid item xs={10}>\n                    <Divider light/>\n                </Grid>\n                <Grid item xs={1} />\n            </Grid>\n            <Grid item container xs={12} spacing={1}>\n                <Grid item xs={2}/>\n                <Grid item xs={10}>\n                    {renderedComments}\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n    return <div>{content}</div>\n\n}\n","import {createMuiTheme} from \"@material-ui/core\";\nimport {blue, blueGrey, green, grey, lightBlue} from \"@material-ui/core/colors\";\n\nexport const theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: blueGrey[800],\n        },\n        secondary: {\n            main: blueGrey[500],\n        },\n    },\n});\n","import * as React from \"react\";\nimport {RepoSearchForm} from \"./components/RepoSearchForm\";\nimport {IssuesListPage} from \"./features/issuesList/IssuesListPage\";\nimport {diContext} from \"./context\";\nimport {IssueDetailsPage} from \"./features/issueDetails/IssueDetailsPage\";\nimport {IssuesData} from \"./state/issuesState$\";\nimport {useConanState} from \"conan-js-core\";\nimport {RepoData, repoState$} from \"./state/repoState$\";\nimport {Grid, ThemeProvider} from \"@material-ui/core\";\nimport {theme} from \"./styles/styles\";\n\nexport type IssuesViewerProps = IssuesData\n\nexport const IssuesViewerApp: React.FC = (): React.ReactElement => {\n    return diContext.issuesState.connectData(\n        IssuesViewer\n    )\n}\n\nexport const IssuesViewer: React.FC<IssuesViewerProps> = ({displayType, issuesByNumber, issueId, issues}: IssuesData) => {\n\n    const [repoData] = useConanState<RepoData>(repoState$);\n\n    const setOrgAndRepo = (org: string, repo: string) => {\n        diContext.repoState.do.update(current => ({...current, org: org, repo: repo}));\n    }\n\n    const setJumpToPage = (page: number) => {\n        diContext.repoState.do.update(current => ({...current, page: page}));\n    }\n\n    let content\n\n    if (displayType === 'issues') {\n        content = (\n            <Grid container spacing={1} direction={\"column\"}>\n                <Grid item xs={12} lg={4}>\n                    <RepoSearchForm\n                        org={repoData.org}\n                        repo={repoData.repo}\n                        page={repoData.page}\n                        setOrgAndRepo={setOrgAndRepo}\n                        setJumpToPage={setJumpToPage}\n                    />\n                </Grid>\n                <Grid item xs={12} lg={4}>\n                    <IssuesListPage\n                        org={repoData.org}\n                        repo={repoData.repo}\n                        page={repoData.page}\n                        fetchIssues={diContext.issuesState.do.fetch}\n                        fetchRepoDetails={diContext.repoDetailsState.do.fetchRepoDetails}\n                        issues={issues}\n                    />\n                </Grid>\n            </Grid>\n        )\n    } else {\n        content = <IssueDetailsPage\n            issue={issuesByNumber[issueId]}\n            org={repoData.org}\n            repo={repoData.repo}\n            showIssuesList={diContext.issuesState.do.showIssues}\n            fetchComments={diContext.issuesCommentsState.do.fetchComments}\n        />;\n    }\n\n    return <div className=\"App\"><ThemeProvider theme={theme}>{content}</ThemeProvider></div>\n}\n\nexport default IssuesViewer\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {IssuesViewerApp} from \"./app\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <IssuesViewerApp/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}