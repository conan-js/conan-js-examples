{"version":3,"sources":["components/lineComponents.tsx","app.tsx","index.tsx"],"names":["exampleBox","border","margin","padding","width","flexRows","BoxComponent","props","style","description","method1","method2","counterElement","LineComponent","boxes","desc","desc2","map","boxProps","i","key","CreateStateApp","Conan","light","connectLive","number","actions","onClick","update","current","state","name","reducers","getData","$decrement","$increment","initialData","increment","decrement","thread","$update","$delta","delta","incrementTwice","decrementTwice","autoBind","Asaps","delayed","undefined","incrementAsync","then","value","decrementAsync","monitor","result","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af065c8d.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {CSSProperties} from \"react\";\n\nconst exampleBox: CSSProperties = {\n    border: `2px solid black`,\n    margin: `5px`,\n    padding: `10px`,\n    width: `300px`,\n}\n\nconst flexRows: CSSProperties = {\n    \"display\": \"flex\",\n    \"flexDirection\": \"row\",\n    \"flexWrap\": \"wrap\",\n    \"justifyContent\": \"flex-start\",\n    \"alignItems\": \"stretch\",\n    \"alignContent\": \"stretch\",\n}\n\ninterface BoxProperties {\n    description: string,\n    method1: string,\n    method2: string,\n    counterElement: React.ReactElement,\n}\n\nconst BoxComponent = (props: BoxProperties): React.ReactElement => (\n    <div style={exampleBox}>\n        <span>{props.description}</span>\n        <ul>\n            <li><code>{props.method1}</code></li>\n            <li><code>{props.method2}</code></li>\n        </ul>\n\n        {props.counterElement}\n    </div>\n);\n\n\ninterface LineProperties {\n    desc?: string;\n    desc2?: string;\n    boxes: BoxProperties[];\n}\n\nexport const LineComponent = ({boxes, desc, desc2}: LineProperties): React.ReactElement<LineProperties> => (\n    <div>\n        {desc && <h3><b>{desc}</b></h3>}\n        {desc2 && <h4>{desc2}</h4>}\n        <div style={flexRows}>\n            {boxes.map((boxProps, i) => <BoxComponent {...boxProps} key={i}/>)}\n        </div>\n    </div>\n)\n","import * as React from \"react\";\nimport {Reducers} from \"conan-js-core\";\nimport {Asap, Asaps} from \"conan-js-core\";\nimport {Conan} from \"conan-js-core\";\nimport {LineComponent} from \"./components/lineComponents\";\n\nexport interface CounterReducers extends Reducers<number> {\n    $increment(): number;\n\n    $decrement(): number;\n}\n\nexport interface CounterAsapActions {\n    increment(): Asap<number>;\n\n    decrement(): Asap<number>;\n}\n\nexport interface CounterSimpleActions {\n    increment(): void;\n\n    decrement(): void;\n}\n\nexport interface CounterDeltaReducers extends Reducers<number> {\n    $delta(delta: number): number;\n}\n\nexport interface CounterDeltaActions {\n    delta(delta: number): void;\n\n    decrementTwice(): void;\n\n    incrementTwice(): void;\n}\n\nexport interface CustomAsyncActions {\n    incrementAsync(): Asap<number>;\n\n    decrementAsync(): Asap<number>;\n\n    delta(delta: number): void;\n}\n\nexport function CreateStateApp(): React.ReactElement {\n    return (<div>\n        <h1>Best for quick state all in memory</h1>\n        <LineComponent\n            desc={`Conan.light`}\n            boxes={[{\n                description: `Conan.light`,\n                method1: `Conan.light<number>('conan.light', 0)`,\n                method2: `actions.update`,\n                counterElement: Conan.light<number>('conan.light', 0).connectLive(\n                    (number, actions) => (<div>\n                        <button onClick={() => actions.update(current => ++current)}>Increment!</button>\n                        <button onClick={() => actions.update(current => --current)}>Decrement!</button>\n                        <h1>{number}</h1>\n                    </div>)\n                )\n            },]\n            }/>\n\n        <h1>Best for complex reducers/simple actions. All in memory</h1>\n        <LineComponent\n            desc={`Conan.state`}\n            boxes={[\n                {\n                    description: `Only reducers (Auto actions)`,\n                    method1: `Conan.state<number, CounterReducers, CounterAutoActions>`,\n                    method2: `actions.increment() / actions.decrement() `,\n                    counterElement: Conan.state<number, CounterReducers, CounterAsapActions>({\n                        name: 'conan.state[reducers only]',\n                        reducers: getData => ({\n                            $decrement(): number {\n                                return getData() - 1;\n                            },\n                            $increment(): number {\n                                return getData() + 1;\n                            }\n                        }),\n                        initialData: 0\n                    })\n                        .connectLive(\n                            (number, actions) => (<div>\n                                <button onClick={() => actions.increment()}>Increment!</button>\n                                <button onClick={() => actions.decrement()}>Decrement!</button>\n                                <h1>{number}</h1>\n                            </div>)\n                        )\n                }, {\n                    description: `Only actions (Custom Actions)`,\n                    method1: `Conan.state<number, {}, CounterSimpleActions>`,\n                    method2: `actions.increment() / actions.decrement() `,\n                    counterElement: Conan.state<number, {}, CounterSimpleActions>({\n                        name: 'conan.state[reducers only]',\n                        actions: thread => ({\n                            decrement(): void {\n                                thread.reducers.$update(current => --current)\n                            },\n                            increment(): void {\n                                thread.reducers.$update(current => ++current)\n                            }\n                        }),\n                        initialData: 0\n                    })\n                        .connectLive(\n                            (number, actions) => (<div>\n                                <button onClick={() => actions.increment()}>Increment!</button>\n                                <button onClick={() => actions.decrement()}>Decrement!</button>\n                                <h1>{number}</h1>\n                            </div>)\n                        )\n                }, {\n                    description: `Auto & Custom Actions`,\n                    method1: `Conan.state<number, CounterDeltaReducers, CounterDeltaActions>`,\n                    method2: `actions.incrementTwice() / actions.decrementTwice() `,\n                    counterElement: Conan.state<number, CounterDeltaReducers, CounterDeltaActions>({\n                        name: 'conan.state[reducers only]',\n                        reducers: getData => ({\n                            $delta(delta: number): number {\n                                return getData() + delta;\n                            }\n                        }),\n                        actions: thread => ({\n                            incrementTwice(): void {\n                                thread.reducers.$delta(2);\n                            },\n                            decrementTwice(): void {\n                                thread.reducers.$delta(-2);\n                            }\n                        }),\n                        initialData: 0\n                    })\n                        .connectLive(\n                            (number, actions) => (<div>\n                                <button onClick={() => actions.incrementTwice()}>Increment!</button>\n                                <button onClick={() => actions.decrementTwice()}>Decrement!</button>\n                                <button onClick={() => actions.delta(5)}>Delta +5</button>\n                                <h1>{number}</h1>\n                            </div>)\n                        )\n                },\n\n            ]}\n        />\n\n\n        <h1>Best for simple async state</h1>\n        <LineComponent\n            desc={`Conan.state - async`}\n            boxes={[{\n                description: `Conan.state [bind]`,\n                method1: `Conan.state<number, CounterReducers, CounterAsapActions>`,\n                method2: `actions.increment / actions.decrement`,\n                counterElement: Conan.state<number, CounterReducers, CounterAsapActions>({\n                    name: 'conan.state[reducers only]',\n                    reducers: getData => ({\n                        $decrement(): number {\n                            return getData() - 1;\n                        },\n                        $increment(): number {\n                            return getData() + 1;\n                        }\n                    }),\n                    autoBind: {\n                        increment(): Asap<void> {\n                            return Asaps.delayed(undefined, 2000, 'increment');\n                        },\n                        decrement(): Asap<void> {\n                            return Asaps.delayed(undefined, 2000, 'decrement');\n                        }\n                    },\n                    initialData: 0\n                })\n                    .connectLive(\n                        (number, actions) => (<div>\n                            <button onClick={() => actions.increment()}>Increment!</button>\n                            <button onClick={() => actions.decrement()}>Decrement!</button>\n                            <h1>{number}</h1>\n                        </div>)\n                    )\n\n            }, {\n                description: `Conan.state [ASAP]`,\n                method1: `Conan.state<number, CounterDeltaReducers, CustomAsyncActions>`,\n                method2: `actions.incrementAsync / actions.decrementAsync`,\n                counterElement: Conan.state<number, CounterDeltaReducers, CustomAsyncActions>({\n                    name: 'conan.state[monitor]',\n                    reducers: getData => ({\n                            $delta(delta: number): number {\n                                return getData() + delta;\n                            }\n                        }\n                    ),\n                    actions: thread => ({\n                        incrementAsync(): void {\n                            Asaps.delayed<number>(5, 2000, 'incrementAsync').then(value => thread.reducers.$delta(value));\n                        },\n                        decrementAsync(): void {\n                            Asaps.delayed<number>(-5, 2000, 'decrementAsync').then(value => thread.reducers.$delta(value));\n                        }\n                    }),\n                    initialData: 0\n                })\n                    .connectLive(\n                        (number, actions) => (<div>\n                            <button onClick={() => actions.incrementAsync()}>Increment!</button>\n                            <button onClick={() => actions.decrementAsync()}>Decrement!</button>\n                            <button onClick={() => actions.delta(-5)}>Delta -5</button>\n                            <h1>{number}</h1>\n                        </div>)\n                    )\n\n            }, {\n                description: `Conan.state [monitor]`,\n                method1: `Conan.state<number, CounterDeltaReducers, CustomAsyncActions>`,\n                method2: `actions.incrementAsync / actions.decrementAsync / actions.delta`,\n                counterElement: Conan.state<number, CounterDeltaReducers, CustomAsyncActions>({\n                    name: 'conan.state[monitor]',\n                    reducers: getData => ({\n                            $delta(delta: number): number {\n                                return getData() + delta;\n                            }\n                        }\n                    ),\n                    actions: thread => ({\n                        incrementAsync(): Asap<number> {\n                            return thread.monitor<number>(\n                                Asaps.delayed<number>(5, 2000, 'incrementAsync'),\n                                (result, reducers) => reducers.$delta(result),\n                            );\n                        },\n                        decrementAsync(): Asap<number> {\n                            return thread.monitor<number>(\n                                Asaps.delayed<number>(-5, 2000, 'decrementAsync'),\n                                (result, reducers) => reducers.$delta(result),\n                            );\n\n                        }\n                    }),\n                    initialData: 0\n                })\n                    .connectLive(\n                        (number, actions) => (<div>\n                            <button onClick={() => actions.incrementAsync()}>Increment!</button>\n                            <button onClick={() => actions.decrementAsync()}>Decrement!</button>\n                            <button onClick={() => actions.delta(-5)}>Delta -5</button>\n                            <h1>{number}</h1>\n                        </div>)\n                    )\n\n            }]\n            }/>\n\n        <h1>Best for complex state/async/orchestration</h1>\n        <LineComponent\n            desc={`Conan.controller`}\n            boxes={[{\n                description: `Conan.controller`,\n                method1: `Conan.light<number>('conan.light', 0)`,\n                method2: `actions.update`,\n                counterElement: <span>TBI</span>\n            },]\n            }/>\n\n    </div>)\n}\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport {CreateStateApp} from \"./app\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <CreateStateApp/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}