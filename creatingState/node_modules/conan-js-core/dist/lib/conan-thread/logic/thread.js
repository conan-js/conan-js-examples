import { ReactionType } from "../../conan-flow/domain/reactions";
export class ThreadImpl {
    constructor(flow) {
        this.flow = flow;
    }
    start(initialData) {
        this.flow.start(initialData ? { name: 'nextData', data: initialData } : undefined);
        return this;
    }
    next(cb) {
        this.flow.onceOn("nextData", cb);
    }
    stop(eventsConsumer) {
        this.flow.stop(eventsConsumer);
    }
    chain(mutatorsCb) {
        return this.flow.chainInto('nextData', 'nextData', mutatorsCb).map(context => context.getData());
    }
    monitor(toMonitor, thenCallback, name, payload) {
        let mutatorsCbAsap = toMonitor.map(data => reducers => thenCallback(data, reducers));
        let defer = {
            payload: payload,
            name: name == null ? 'anonymous' : name,
            action: mutatorsCbAsap
        };
        return this.flow.deferInto('nextData', 'nextData', defer).map(context => context.getData());
    }
    get isRunning() {
        return this.flow.isRunning;
    }
    get reducers() {
        return this.flow.on('nextData').steps;
    }
    addReaction(def) {
        let reactionDef = {
            name: def.name,
            reactionType: ReactionType.ALWAYS,
            action: oNextData => def.dataConsumer(oNextData.getData()),
        };
        this.flow.addReaction('nextData', reactionDef);
        return {
            release: () => {
                this.flow.removeReaction('nextData', reactionDef);
            }
        };
    }
    getData() {
        return this.flow.getStatusData()['nextData'];
    }
    getEvents() {
        return this.flow.getEvents();
    }
    getName() {
        return this.flow.getName();
    }
}
//# sourceMappingURL=thread.js.map