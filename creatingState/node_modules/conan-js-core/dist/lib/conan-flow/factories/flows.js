import { FlowDefFactory } from "./flowDefFactory";
import { FlowAnchor } from "../logic/flowAnchor";
import { FlowOrchestrator } from "../logic/flowOrchestrator";
import { FlowEventSource, FlowEventType } from "../domain/flowRuntimeEvents";
import { FLOW_LOGGER } from "../logic/flowLogger";
import { FlowImpl } from "../logic/flowImpl";
import { FlowFacadeImpl } from "../domain/flowFacade";
const FlowOrchestrator$ = (pipeline) => new FlowOrchestrator([
    (event) => FLOW_LOGGER.log(event),
    ...pipeline,
]);
export class Flows {
    static create(flowDef) {
        let flowController = this.createController(flowDef);
        return this.createFacade(flowController, flowDef.actions);
    }
    static createFacade(flowController, actionsDef) {
        return new FlowFacadeImpl(flowController, actionsDef ? actionsDef(flowController) : undefined);
    }
    static createController(flowDef) {
        let flowAnchor = new FlowAnchor();
        let flowOrchestrator = FlowOrchestrator$(flowDef.pipelineListener ? [flowDef.pipelineListener] : []);
        let flowImpl = new FlowImpl(FlowDefFactory.create(flowDef, flowAnchor), flowAnchor, flowOrchestrator);
        let tracker = flowOrchestrator.createRuntimeTracker(flowImpl, FlowEventSource.FLOW_FACTORY, FlowEventType.CREATING, flowDef).start();
        tracker.end();
        return flowImpl;
    }
}
//# sourceMappingURL=flows.js.map