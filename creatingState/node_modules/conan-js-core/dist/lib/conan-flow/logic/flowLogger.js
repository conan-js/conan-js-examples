import { FlowRuntimeEventTiming } from "../domain/flowRuntimeEvents";
import { Strings } from "../../conan-utils/strings";
export class FlowLogger {
    constructor(filters) {
        this.filters = filters;
    }
    log(event, loggingOptions) {
        for (let filter of this.filters) {
            if (!filter(event)) {
                return;
            }
        }
        let currentStatusName = event.flowController.getCurrentStatusName();
        currentStatusName = currentStatusName ? currentStatusName : '-';
        if (loggingOptions.highlight) {
            console.log(Strings.padEnd(`${event.flowController.getName()}`, 30), Strings.padEnd(`${currentStatusName}`, 20), Strings.padEnd(`${event.runtimeEvent}`, 20), Strings.padEnd(`${event.timing}`, 20));
            if (event.payload || event.shortDesc) {
                if (event.shortDesc) {
                    console.log(`  =>[${event.shortDesc}]`);
                    if (event.payload) {
                        console.log(' ', event.payload);
                    }
                }
                else {
                    console.log(`  =>[${event.payload}]`);
                }
            }
            console.log('------------------------------------------------------------------------------------------------------------------------------------------------');
        }
        else if (event.shortDesc) {
            console.log(Strings.padEnd(`${event.flowController.getName()}`, 30), Strings.padEnd(`${currentStatusName}`, 20), Strings.padEnd(`${event.runtimeEvent}`, 20), Strings.padEnd(`${event.timing}`, 20), Strings.padEnd(`=>${event.shortDesc}`, 30));
        }
    }
}
export class LoggerFilters {
    static excludeByLogName(nameToExclude) {
        return (logEvent) => logEvent.flowController.getName() !== nameToExclude;
    }
    static excludeByEventTiming(eventTiming) {
        return (logEvent) => logEvent.timing !== eventTiming;
    }
}
export const FLOW_LOGGER = new FlowLogger([
    LoggerFilters.excludeByEventTiming(FlowRuntimeEventTiming.REQUEST_END),
    LoggerFilters.excludeByEventTiming(FlowRuntimeEventTiming.REQUEST_START),
    LoggerFilters.excludeByLogName('next-promise'),
]);
//# sourceMappingURL=flowLogger.js.map