import * as React from "react";
import { ReactElement } from "react";
import { DataReactionDef, DataReactionLock } from "../conan-thread/domain/dataReaction";
import { ConnectedState } from "./connect/stateConnect";
import { IBiFunction } from "..";
import { DefaultActionsFn } from "../conan-flow/domain/actions";
import { MonitorFacade } from "../conan-monitor/domain/monitorFacade";
import { MonitorInfo } from "../conan-monitor/domain/monitorInfo";
import { ThreadFacade } from "../conan-thread/domain/threadFacade";
export declare class ConanState<DATA, ACTIONS = DefaultActionsFn<DATA>> {
    private readonly state;
    constructor(state: MonitorFacade<DATA, any, ACTIONS> | ThreadFacade<DATA, any, ACTIONS>);
    getName(): string;
    connectMap<PROPS>(toConnect: React.ComponentType<PROPS>, mapper: IBiFunction<DATA, ACTIONS, PROPS>): ReactElement<PROPS>;
    connectLive(renderer: IBiFunction<DATA, ACTIONS, ReactElement | ReactElement[]>, fallbackValue?: DATA): ReactElement;
    connectData(toConnect: React.ComponentType<DATA>): ReactElement<DATA>;
    connect(toConnect: React.ComponentType<ConnectedState<DATA, ACTIONS>>): ReactElement<ConnectedState<DATA, ACTIONS>>;
    addAsyncReaction(def: DataReactionDef<DATA>): DataReactionLock;
    addDataReaction(def: DataReactionDef<DATA>): DataReactionLock;
    get do(): ACTIONS & DefaultActionsFn<DATA>;
    start(): this;
    stop(eventsConsumer: (events: any) => void): this;
    get actions(): ACTIONS & DefaultActionsFn<DATA>;
    getData(): DATA;
    asyncMerge<T>(baseValue: T, monitorMerger: (IBiFunction<MonitorInfo, T, T>), dataMerger: IBiFunction<DATA, T, T>): ConanState<T, ACTIONS>;
}
