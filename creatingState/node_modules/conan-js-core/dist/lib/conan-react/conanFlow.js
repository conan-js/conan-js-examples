import { Conan } from "..";
export class ConanFlow {
    constructor(flow) {
        this.flow = flow;
    }
    on(statusName) {
        return this.flow.on(statusName);
    }
    reactOnStatusChanged(customReaction) {
        this.flow.reactOnStatusChanged(customReaction);
        return this;
    }
    alwaysOn(stateName, def) {
        this.flow.alwaysOn(stateName, def);
        return this;
    }
    start(initialStatus) {
        this.flow.start(initialStatus);
        return this;
    }
    toStateAll() {
        let conanState = Conan.state({
            name: `${this.flow.getName()}=>[all statuses]`
        });
        this.reactOnStatusChanged(status => conanState.do.update(status));
        return conanState;
    }
    toState(statusName) {
        let conanState = Conan.light(`${this.flow.getName()}=>[states:${statusName}]`);
        this.alwaysOn(statusName, (state) => conanState.do.update(state.getData()));
        return conanState;
    }
}
//# sourceMappingURL=conanFlow.js.map