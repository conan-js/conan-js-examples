import { ConanState } from "./conanState";
import { Flows } from "..";
import { Monitors } from "../conan-monitor/factories/monitors";
import { FlowEventNature } from "../conan-flow/domain/flowRuntimeEvents";
import { ConanFlow } from "./conanFlow";
export class Conan {
    static light(name, initialData, nature = FlowEventNature.MAIN) {
        return new ConanState(Monitors.create(Object.assign({ name,
            initialData }, (nature ? { nature } : undefined))));
    }
    static state(data) {
        return new ConanState(Monitors.create(data));
    }
    static fromThread(thread) {
        let conanState = Conan.state(thread.getDefinition());
        thread.addReaction({
            name: `pipe`,
            dataConsumer: (data) => conanState.do.update(data)
        });
        return conanState;
    }
    static flow(flowDef) {
        let conanFlow = new ConanFlow(Flows.create(flowDef));
        conanFlow.start();
        return conanFlow;
    }
    static fromFlow(flow) {
        return new ConanFlow(flow);
    }
}
//# sourceMappingURL=conan.js.map