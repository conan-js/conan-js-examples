import { ConanState } from "./conanState";
import { Reducers } from "../conan-thread/domain/reducers";
import { StateDef } from "../conan-thread/domain/stateDef";
import { IReducer, IVarArgConstructor } from "../index";
import { Asap } from "../conan-utils/asap";
import { DefaultActionsFn } from "../conan-flow/domain/actions";
import { FlowEventNature } from "../conan-flow/domain/flowRuntimeEvents";
import { ThreadFacade } from "../conan-thread/domain/threadFacade";
import { ConanFlow } from "./conanFlow";
import { Mutators, VoidMutators } from "../conan-flow/domain/mutators";
import { UserFlowDef } from "../conan-flow/def/flow/userFlowDef";
import { FlowFacade } from "../conan-flow/domain/flowFacade";
export declare type DefaultActions<DATA> = {
    update(reducer: IReducer<DATA> | DATA): Asap<DATA>;
};
export declare type DefaultReducers<DATA> = {
    $update(reducer: IReducer<DATA> | DATA): DATA;
};
export declare class Conan {
    static light<DATA>(name: string, initialData?: DATA, nature?: FlowEventNature): ConanState<DATA, DefaultActionsFn<DATA>>;
    static state<DATA, REDUCERS extends Reducers<DATA> = {}, ACTIONS = any>(data: StateDef<DATA, REDUCERS, ACTIONS> | IVarArgConstructor<any>): ConanState<DATA, ACTIONS>;
    static fromThread<DATA, ACTIONS = any>(thread: ThreadFacade<DATA, {}, ACTIONS>): ConanState<DATA, ACTIONS>;
    static flow<USER_STATUSES, USER_MUTATORS extends Mutators<USER_STATUSES> = VoidMutators<USER_STATUSES>, ACTIONS = void>(flowDef: UserFlowDef<USER_STATUSES, USER_MUTATORS, ACTIONS>): ConanFlow<USER_STATUSES, USER_MUTATORS, ACTIONS>;
    static fromFlow<STATUSES, MUTATORS extends Mutators<STATUSES> = VoidMutators<STATUSES>, ACTIONS = void>(flow: FlowFacade<STATUSES, MUTATORS, ACTIONS>): ConanFlow<STATUSES, MUTATORS, ACTIONS>;
}
