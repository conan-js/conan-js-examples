import { IConsumer, IKeyValuePairs, IProducer, IVarArgConstructor } from "./typesHelper";
export interface AnnotationsMetadataBySpaceAndPrototypeHolder<T> {
    $a: AnnotationsMetadataBySpaceAndPrototype<T>;
}
export declare type AnnotationsMetadataBySpaceAndPrototype<T> = IKeyValuePairs<AnnotationsMetadataByPrototype<T>>;
export declare type AnnotationsMetadataByPrototype<T> = IKeyValuePairs<T>;
export declare class MetadataCrudUtils<T> {
    private readonly spaceName;
    private readonly defaultProvider;
    constructor(spaceName: string, defaultProvider: IProducer<T>);
    updateMetadata(constructor: IVarArgConstructor<any>, updater: IConsumer<T>): T;
    assignMetaDataToConstructor(constructor: any, metaData: T): void;
    getAnnotationsMetaData(constructorOrInstance: any): T | null;
    getOrCreateMetadata(constructor: any): T | null;
    getPrototype(constructor: any): AnnotationsMetadataBySpaceAndPrototypeHolder<T>;
    static extractName<T, D>(constructor: IVarArgConstructor<any>): string;
}
