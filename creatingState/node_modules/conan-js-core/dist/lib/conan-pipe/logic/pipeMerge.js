import { Threads } from "../../conan-thread/factories/threads";
export class PipeMerge {
    constructor(name, base, leftThread, leftMapper, rightThread, rightMapper, pipeThreadDef) {
        this.name = name;
        this.base = base;
        this.leftThread = leftThread;
        this.leftMapper = leftMapper;
        this.rightThread = rightThread;
        this.rightMapper = rightMapper;
        this.pipeThreadDef = pipeThreadDef;
    }
    addReaction(def) {
        return this.baseThread.addReaction(def);
    }
    chain(mutatorsCb) {
        return this.baseThread.chain(mutatorsCb);
    }
    getData() {
        return this.baseThread.getData();
    }
    getEvents() {
        return this.baseThread.getEvents();
    }
    getName() {
        return this.baseThread.getName();
    }
    next(cb) {
        this.baseThread.next(cb);
    }
    start() {
        if (this.baseThread == null) {
            this.baseThread = Threads.create(Object.assign({ name: this.name, initialData: this.base }, this.pipeThreadDef));
            this.leftThread.addReaction({
                name: undefined,
                dataConsumer: (data) => {
                    this.lastLeftData = data;
                    this.baseThread.reducers.$update((current) => {
                        return this.leftMapper(data, this.lastRightData, current);
                    });
                },
            });
            this.rightThread.addReaction({
                name: undefined,
                dataConsumer: (data) => {
                    this.lastRightData = data;
                    this.baseThread.reducers.$update((current) => {
                        return this.rightMapper(data, this.lastLeftData, current);
                    });
                },
            });
        }
        else {
            this.baseThread.start();
        }
        return this;
    }
    stop(eventsConsumer) {
        this.baseThread.stop(undefined);
        return this;
    }
    get reducers() {
        return this.baseThread.reducers;
    }
    get do() {
        return this.baseThread.do;
    }
    get isRunning() {
        return this.baseThread.isRunning;
    }
    get actions() {
        return this.baseThread.actions;
    }
    get thread() {
        return this.baseThread.thread;
    }
}
//# sourceMappingURL=pipeMerge.js.map