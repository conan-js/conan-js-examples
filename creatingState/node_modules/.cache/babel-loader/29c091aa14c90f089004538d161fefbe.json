{"ast":null,"code":"import*as React from\"react\";import{Asaps}from\"conan-js-core\";import{Conan}from\"conan-js-core\";import{LineComponent}from\"./components/lineComponents\";export function CreateStateApp(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"Best for quick state all in memory\"),/*#__PURE__*/React.createElement(LineComponent,{desc:\"Conan.light\",boxes:[{description:\"Conan.light\",method1:\"Conan.light<number>('conan.light', 0)\",method2:\"actions.update\",counterElement:Conan.light('conan.light',0).connectLive(function(number,actions){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.update(function(current){return++current;});}},\"Increment!\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.update(function(current){return--current;});}},\"Decrement!\"),/*#__PURE__*/React.createElement(\"h1\",null,number));})}]}),/*#__PURE__*/React.createElement(\"h1\",null,\"Best for complex reducers/simple actions. All in memory\"),/*#__PURE__*/React.createElement(LineComponent,{desc:\"Conan.state\",boxes:[{description:\"Only reducers (Auto actions)\",method1:\"Conan.state<number, CounterReducers, CounterAutoActions>\",method2:\"actions.increment() / actions.decrement() \",counterElement:Conan.state({name:'conan.state[reducers only]',reducers:function reducers(getData){return{$decrement:function $decrement(){return getData()-1;},$increment:function $increment(){return getData()+1;}};},initialData:0}).connectLive(function(number,actions){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.increment();}},\"Increment!\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.decrement();}},\"Decrement!\"),/*#__PURE__*/React.createElement(\"h1\",null,number));})},{description:\"Only actions (Custom Actions)\",method1:\"Conan.state<number, {}, CounterSimpleActions>\",method2:\"actions.increment() / actions.decrement() \",counterElement:Conan.state({name:'conan.state[reducers only]',actions:function actions(thread){return{decrement:function decrement(){thread.reducers.$update(function(current){return--current;});},increment:function increment(){thread.reducers.$update(function(current){return++current;});}};},initialData:0}).connectLive(function(number,actions){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.increment();}},\"Increment!\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.decrement();}},\"Decrement!\"),/*#__PURE__*/React.createElement(\"h1\",null,number));})},{description:\"Auto & Custom Actions\",method1:\"Conan.state<number, CounterDeltaReducers, CounterDeltaActions>\",method2:\"actions.incrementTwice() / actions.decrementTwice() \",counterElement:Conan.state({name:'conan.state[reducers only]',reducers:function reducers(getData){return{$delta:function $delta(delta){return getData()+delta;}};},actions:function actions(thread){return{incrementTwice:function incrementTwice(){thread.reducers.$delta(2);},decrementTwice:function decrementTwice(){thread.reducers.$delta(-2);}};},initialData:0}).connectLive(function(number,actions){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.incrementTwice();}},\"Increment!\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.decrementTwice();}},\"Decrement!\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.delta(5);}},\"Delta +5\"),/*#__PURE__*/React.createElement(\"h1\",null,number));})}]}),/*#__PURE__*/React.createElement(\"h1\",null,\"Best for simple async state\"),/*#__PURE__*/React.createElement(LineComponent,{desc:\"Conan.state - async\",boxes:[{description:\"Conan.state [bind]\",method1:\"Conan.state<number, CounterReducers, CounterAsapActions>\",method2:\"actions.increment / actions.decrement\",counterElement:Conan.state({name:'conan.state[reducers only]',reducers:function reducers(getData){return{$decrement:function $decrement(){return getData()-1;},$increment:function $increment(){return getData()+1;}};},autoBind:{increment:function increment(){return Asaps.delayed(undefined,2000,'increment');},decrement:function decrement(){return Asaps.delayed(undefined,2000,'decrement');}},initialData:0}).connectLive(function(number,actions){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.increment();}},\"Increment!\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.decrement();}},\"Decrement!\"),/*#__PURE__*/React.createElement(\"h1\",null,number));})},{description:\"Conan.state [ASAP]\",method1:\"Conan.state<number, CounterDeltaReducers, CustomAsyncActions>\",method2:\"actions.incrementAsync / actions.decrementAsync\",counterElement:Conan.state({name:'conan.state[monitor]',reducers:function reducers(getData){return{$delta:function $delta(delta){return getData()+delta;}};},actions:function actions(thread){return{incrementAsync:function incrementAsync(){Asaps.delayed(5,2000,'incrementAsync').then(function(value){return thread.reducers.$delta(value);});},decrementAsync:function decrementAsync(){Asaps.delayed(-5,2000,'decrementAsync').then(function(value){return thread.reducers.$delta(value);});}};},initialData:0}).connectLive(function(number,actions){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.incrementAsync();}},\"Increment!\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.decrementAsync();}},\"Decrement!\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.delta(-5);}},\"Delta -5\"),/*#__PURE__*/React.createElement(\"h1\",null,number));})},{description:\"Conan.state [monitor]\",method1:\"Conan.state<number, CounterDeltaReducers, CustomAsyncActions>\",method2:\"actions.incrementAsync / actions.decrementAsync / actions.delta\",counterElement:Conan.state({name:'conan.state[monitor]',reducers:function reducers(getData){return{$delta:function $delta(delta){return getData()+delta;}};},actions:function actions(thread){return{incrementAsync:function incrementAsync(){return thread.monitor(Asaps.delayed(5,2000,'incrementAsync'),function(result,reducers){return reducers.$delta(result);});},decrementAsync:function decrementAsync(){return thread.monitor(Asaps.delayed(-5,2000,'decrementAsync'),function(result,reducers){return reducers.$delta(result);});}};},initialData:0}).connectLive(function(number,actions){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.incrementAsync();}},\"Increment!\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.decrementAsync();}},\"Decrement!\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return actions.delta(-5);}},\"Delta -5\"),/*#__PURE__*/React.createElement(\"h1\",null,number));})}]}),/*#__PURE__*/React.createElement(\"h1\",null,\"Best for complex state/async/orchestration\"),/*#__PURE__*/React.createElement(LineComponent,{desc:\"Conan.controller\",boxes:[{description:\"Conan.controller\",method1:\"Conan.light<number>('conan.light', 0)\",method2:\"actions.update\",counterElement:/*#__PURE__*/React.createElement(\"span\",null,\"TBI\")}]}));}","map":{"version":3,"sources":["/Users/albertoalmansa/Projects/conan-js/tmp/conan-js-examples/creatingState/src/app.tsx"],"names":["React","Asaps","Conan","LineComponent","CreateStateApp","description","method1","method2","counterElement","light","connectLive","number","actions","update","current","state","name","reducers","getData","$decrement","$increment","initialData","increment","decrement","thread","$update","$delta","delta","incrementTwice","decrementTwice","autoBind","delayed","undefined","incrementAsync","then","value","decrementAsync","monitor","result"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {Reducers} from \"conan-js-core\";\nimport {Asap, Asaps} from \"conan-js-core\";\nimport {Conan} from \"conan-js-core\";\nimport {LineComponent} from \"./components/lineComponents\";\n\nexport interface CounterReducers extends Reducers<number> {\n    $increment(): number;\n\n    $decrement(): number;\n}\n\nexport interface CounterAsapActions {\n    increment(): Asap<number>;\n\n    decrement(): Asap<number>;\n}\n\nexport interface CounterSimpleActions {\n    increment(): void;\n\n    decrement(): void;\n}\n\nexport interface CounterDeltaReducers extends Reducers<number> {\n    $delta(delta: number): number;\n}\n\nexport interface CounterDeltaActions {\n    delta(delta: number): void;\n\n    decrementTwice(): void;\n\n    incrementTwice(): void;\n}\n\nexport interface CustomAsyncActions {\n    incrementAsync(): Asap<number>;\n\n    decrementAsync(): Asap<number>;\n\n    delta(delta: number): void;\n}\n\nexport function CreateStateApp(): React.ReactElement {\n    return (<div>\n        <h1>Best for quick state all in memory</h1>\n        <LineComponent\n            desc={`Conan.light`}\n            boxes={[{\n                description: `Conan.light`,\n                method1: `Conan.light<number>('conan.light', 0)`,\n                method2: `actions.update`,\n                counterElement: Conan.light<number>('conan.light', 0).connectLive(\n                    (number, actions) => (<div>\n                        <button onClick={() => actions.update(current => ++current)}>Increment!</button>\n                        <button onClick={() => actions.update(current => --current)}>Decrement!</button>\n                        <h1>{number}</h1>\n                    </div>)\n                )\n            },]\n            }/>\n\n        <h1>Best for complex reducers/simple actions. All in memory</h1>\n        <LineComponent\n            desc={`Conan.state`}\n            boxes={[\n                {\n                    description: `Only reducers (Auto actions)`,\n                    method1: `Conan.state<number, CounterReducers, CounterAutoActions>`,\n                    method2: `actions.increment() / actions.decrement() `,\n                    counterElement: Conan.state<number, CounterReducers, CounterAsapActions>({\n                        name: 'conan.state[reducers only]',\n                        reducers: getData => ({\n                            $decrement(): number {\n                                return getData() - 1;\n                            },\n                            $increment(): number {\n                                return getData() + 1;\n                            }\n                        }),\n                        initialData: 0\n                    })\n                        .connectLive(\n                            (number, actions) => (<div>\n                                <button onClick={() => actions.increment()}>Increment!</button>\n                                <button onClick={() => actions.decrement()}>Decrement!</button>\n                                <h1>{number}</h1>\n                            </div>)\n                        )\n                }, {\n                    description: `Only actions (Custom Actions)`,\n                    method1: `Conan.state<number, {}, CounterSimpleActions>`,\n                    method2: `actions.increment() / actions.decrement() `,\n                    counterElement: Conan.state<number, {}, CounterSimpleActions>({\n                        name: 'conan.state[reducers only]',\n                        actions: thread => ({\n                            decrement(): void {\n                                thread.reducers.$update(current => --current)\n                            },\n                            increment(): void {\n                                thread.reducers.$update(current => ++current)\n                            }\n                        }),\n                        initialData: 0\n                    })\n                        .connectLive(\n                            (number, actions) => (<div>\n                                <button onClick={() => actions.increment()}>Increment!</button>\n                                <button onClick={() => actions.decrement()}>Decrement!</button>\n                                <h1>{number}</h1>\n                            </div>)\n                        )\n                }, {\n                    description: `Auto & Custom Actions`,\n                    method1: `Conan.state<number, CounterDeltaReducers, CounterDeltaActions>`,\n                    method2: `actions.incrementTwice() / actions.decrementTwice() `,\n                    counterElement: Conan.state<number, CounterDeltaReducers, CounterDeltaActions>({\n                        name: 'conan.state[reducers only]',\n                        reducers: getData => ({\n                            $delta(delta: number): number {\n                                return getData() + delta;\n                            }\n                        }),\n                        actions: thread => ({\n                            incrementTwice(): void {\n                                thread.reducers.$delta(2);\n                            },\n                            decrementTwice(): void {\n                                thread.reducers.$delta(-2);\n                            }\n                        }),\n                        initialData: 0\n                    })\n                        .connectLive(\n                            (number, actions) => (<div>\n                                <button onClick={() => actions.incrementTwice()}>Increment!</button>\n                                <button onClick={() => actions.decrementTwice()}>Decrement!</button>\n                                <button onClick={() => actions.delta(5)}>Delta +5</button>\n                                <h1>{number}</h1>\n                            </div>)\n                        )\n                },\n\n            ]}\n        />\n\n\n        <h1>Best for simple async state</h1>\n        <LineComponent\n            desc={`Conan.state - async`}\n            boxes={[{\n                description: `Conan.state [bind]`,\n                method1: `Conan.state<number, CounterReducers, CounterAsapActions>`,\n                method2: `actions.increment / actions.decrement`,\n                counterElement: Conan.state<number, CounterReducers, CounterAsapActions>({\n                    name: 'conan.state[reducers only]',\n                    reducers: getData => ({\n                        $decrement(): number {\n                            return getData() - 1;\n                        },\n                        $increment(): number {\n                            return getData() + 1;\n                        }\n                    }),\n                    autoBind: {\n                        increment(): Asap<void> {\n                            return Asaps.delayed(undefined, 2000, 'increment');\n                        },\n                        decrement(): Asap<void> {\n                            return Asaps.delayed(undefined, 2000, 'decrement');\n                        }\n                    },\n                    initialData: 0\n                })\n                    .connectLive(\n                        (number, actions) => (<div>\n                            <button onClick={() => actions.increment()}>Increment!</button>\n                            <button onClick={() => actions.decrement()}>Decrement!</button>\n                            <h1>{number}</h1>\n                        </div>)\n                    )\n\n            }, {\n                description: `Conan.state [ASAP]`,\n                method1: `Conan.state<number, CounterDeltaReducers, CustomAsyncActions>`,\n                method2: `actions.incrementAsync / actions.decrementAsync`,\n                counterElement: Conan.state<number, CounterDeltaReducers, CustomAsyncActions>({\n                    name: 'conan.state[monitor]',\n                    reducers: getData => ({\n                            $delta(delta: number): number {\n                                return getData() + delta;\n                            }\n                        }\n                    ),\n                    actions: thread => ({\n                        incrementAsync(): void {\n                            Asaps.delayed<number>(5, 2000, 'incrementAsync').then(value => thread.reducers.$delta(value));\n                        },\n                        decrementAsync(): void {\n                            Asaps.delayed<number>(-5, 2000, 'decrementAsync').then(value => thread.reducers.$delta(value));\n                        }\n                    }),\n                    initialData: 0\n                })\n                    .connectLive(\n                        (number, actions) => (<div>\n                            <button onClick={() => actions.incrementAsync()}>Increment!</button>\n                            <button onClick={() => actions.decrementAsync()}>Decrement!</button>\n                            <button onClick={() => actions.delta(-5)}>Delta -5</button>\n                            <h1>{number}</h1>\n                        </div>)\n                    )\n\n            }, {\n                description: `Conan.state [monitor]`,\n                method1: `Conan.state<number, CounterDeltaReducers, CustomAsyncActions>`,\n                method2: `actions.incrementAsync / actions.decrementAsync / actions.delta`,\n                counterElement: Conan.state<number, CounterDeltaReducers, CustomAsyncActions>({\n                    name: 'conan.state[monitor]',\n                    reducers: getData => ({\n                            $delta(delta: number): number {\n                                return getData() + delta;\n                            }\n                        }\n                    ),\n                    actions: thread => ({\n                        incrementAsync(): Asap<number> {\n                            return thread.monitor<number>(\n                                Asaps.delayed<number>(5, 2000, 'incrementAsync'),\n                                (result, reducers) => reducers.$delta(result),\n                            );\n                        },\n                        decrementAsync(): Asap<number> {\n                            return thread.monitor<number>(\n                                Asaps.delayed<number>(-5, 2000, 'decrementAsync'),\n                                (result, reducers) => reducers.$delta(result),\n                            );\n\n                        }\n                    }),\n                    initialData: 0\n                })\n                    .connectLive(\n                        (number, actions) => (<div>\n                            <button onClick={() => actions.incrementAsync()}>Increment!</button>\n                            <button onClick={() => actions.decrementAsync()}>Decrement!</button>\n                            <button onClick={() => actions.delta(-5)}>Delta -5</button>\n                            <h1>{number}</h1>\n                        </div>)\n                    )\n\n            }]\n            }/>\n\n        <h1>Best for complex state/async/orchestration</h1>\n        <LineComponent\n            desc={`Conan.controller`}\n            boxes={[{\n                description: `Conan.controller`,\n                method1: `Conan.light<number>('conan.light', 0)`,\n                method2: `actions.update`,\n                counterElement: <span>TBI</span>\n            },]\n            }/>\n\n    </div>)\n}\n"]},"metadata":{},"sourceType":"module"}